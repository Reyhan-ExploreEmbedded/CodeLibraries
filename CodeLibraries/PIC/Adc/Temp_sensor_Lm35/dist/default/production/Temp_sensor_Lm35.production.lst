

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Feb 14 13:23:49 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     	;# 
    35  0001                     	;# 
    36  0002                     	;# 
    37  0003                     	;# 
    38  0004                     	;# 
    39  0005                     	;# 
    40  0006                     	;# 
    41  0007                     	;# 
    42  0008                     	;# 
    43  0009                     	;# 
    44  000A                     	;# 
    45  000B                     	;# 
    46  000C                     	;# 
    47  000D                     	;# 
    48  000E                     	;# 
    49  000E                     	;# 
    50  000F                     	;# 
    51  0010                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0015                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001B                     	;# 
    65  001C                     	;# 
    66  001D                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  0087                     	;# 
    73  0088                     	;# 
    74  0089                     	;# 
    75  008C                     	;# 
    76  008D                     	;# 
    77  008E                     	;# 
    78  0091                     	;# 
    79  0092                     	;# 
    80  0093                     	;# 
    81  0094                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009C                     	;# 
    85  009D                     	;# 
    86  009E                     	;# 
    87  009F                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  010F                     	;# 
    92  018C                     	;# 
    93  018D                     	;# 
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001D                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  0081                     	;# 
   130  0085                     	;# 
   131  0086                     	;# 
   132  0087                     	;# 
   133  0088                     	;# 
   134  0089                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  009F                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0088                     	;# 
   194  0089                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  010F                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214                           
   215                           	psect	idataBANK0
   216  0289                     __pidataBANK0:	
   217                           
   218                           ;initializer for _ARR_LcdLineNumAddress_U8
   219  0289  3480               	retlw	128
   220  028A  3480               	retlw	128
   221  028B  34C0               	retlw	192
   222  028C  3490               	retlw	144
   223  028D  34D0               	retlw	208
   224                           
   225                           	psect	nvBANK0
   226  005A                     __pnvBANK0:	
   227  005A                     _STK_LCDConfig:	
   228  005A                     	ds	3
   229  001F                     _ADCON0	set	31
   230  001E                     _ADRESH	set	30
   231  0006                     _PORTB	set	6
   232  0008                     _PORTD	set	8
   233  00F8                     _ADON	set	248
   234  00FA                     _GO	set	250
   235  00FA                     _GO_DONE	set	250
   236  009F                     _ADCON1	set	159
   237  009E                     _ADRESL	set	158
   238  0086                     _TRISB	set	134
   239  0088                     _TRISD	set	136
   240                           
   241                           	psect	strings
   242  0003                     __pstrings:	
   243  0003                     stringtab:	
   244  0003                     __stringtab:	
   245  0003                     stringcode:	
   246                           ;	String table - string pointers are 1 byte each
   247                           
   248  0003                     stringdir:	
   249  0003  3000               	movlw	high stringdir
   250  0004  008A               	movwf	10
   251  0005  0804               	movf	4,w
   252  0006  0A84               	incf	4,f
   253  0007  0782               	addwf	2,f
   254  0008                     __stringbase:	
   255  0008  3400               	retlw	0
   256  0009                     __end_of__stringtab:	
   257  0009                     __stringdata:	
   258  0009                     STR_1:	
   259  0009  3441               	retlw	65	;'A'
   260  000A  3444               	retlw	68	;'D'
   261  000B  3443               	retlw	67	;'C'
   262  000C  3420               	retlw	32	;' '
   263  000D  3476               	retlw	118	;'v'
   264  000E  3461               	retlw	97	;'a'
   265  000F  346C               	retlw	108	;'l'
   266  0010  3475               	retlw	117	;'u'
   267  0011  3465               	retlw	101	;'e'
   268  0012  343A               	retlw	58	;':'
   269  0013  3425               	retlw	37	;'%'
   270  0014  3434               	retlw	52	;'4'
   271  0015  3475               	retlw	117	;'u'
   272  0016  3400               	retlw	0
   273  0017                     STR_2:	
   274  0017  3454               	retlw	84	;'T'
   275  0018  3465               	retlw	101	;'e'
   276  0019  346D               	retlw	109	;'m'
   277  001A  3470               	retlw	112	;'p'
   278  001B  343A               	retlw	58	;':'
   279  001C  3425               	retlw	37	;'%'
   280  001D  3434               	retlw	52	;'4'
   281  001E  3475               	retlw	117	;'u'
   282  001F  3400               	retlw	0
   283  0020                     __end_of__stringdata:	
   284                           
   285                           ; #config settings
   286  0000                     
   287                           	psect	cinit
   288  07DE                     start_initialization:	
   289  07DE                     __initialization:	
   290                           
   291                           ; Clear objects allocated to BANK0
   292  07DE  01DD               	clrf	__pbssBANK0& (0+127)
   293  07DF  01DE               	clrf	(__pbssBANK0+1)& (0+127)
   294                           
   295                           ; Initialize objects allocated to BANK0
   296  07E0  120A  118A  2289  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   297  07E5  00D5               	movwf	__pdataBANK0& (0+127)
   298  07E6  120A  118A  228A  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   299  07EB  00D6               	movwf	(__pdataBANK0+1)& (0+127)
   300  07EC  120A  118A  228B  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   301  07F1  00D7               	movwf	(__pdataBANK0+2)& (0+127)
   302  07F2  120A  118A  228C  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   303  07F7  00D8               	movwf	(__pdataBANK0+3)& (0+127)
   304  07F8  120A  118A  228D   	fcall	__pidataBANK0+4	;fetch initializer
   305  07FB  00D9               	movwf	(__pdataBANK0+4)& (0+127)
   306  07FC                     end_of_initialization:	
   307                           ;End of C runtime variable initialization code
   308                           
   309  07FC                     __end_of__initialization:	
   310  07FC  0183               	clrf	3
   311  07FD  120A  118A  2CF6   	ljmp	_main	;jump to C main() function
   312                           
   313                           	psect	bssBANK0
   314  005D                     __pbssBANK0:	
   315  005D                     _VAR_LcdTrackCursorPos_U8:	
   316  005D                     	ds	1
   317  005E                     _VAR_LcdTrackLineNum_U8:	
   318  005E                     	ds	1
   319                           
   320                           	psect	dataBANK0
   321  0055                     __pdataBANK0:	
   322  0055                     _ARR_LcdLineNumAddress_U8:	
   323  0055                     	ds	5
   324                           
   325                           	psect	cstackCOMMON
   326  0070                     __pcstackCOMMON:	
   327  0070                     ?_ADC_Init:	
   328  0070                     ??_ADC_Init:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?_LCD_GoToLine:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ?_LCD_GoToNextLine:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0070                     ?_DELAY_us:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0070                     ?_LCD_CmdWrite:	
   341                           ; 0 bytes @ 0x0
   342                           
   343  0070                     ?_lcd_Reset:	
   344                           ; 0 bytes @ 0x0
   345                           
   346  0070                     ?_LCD_Clear:	
   347                           ; 0 bytes @ 0x0
   348                           
   349  0070                     ?_lcd_BusyCheck:	
   350                           ; 0 bytes @ 0x0
   351                           
   352  0070                     ?_lcd_SendCmdSignals:	
   353                           ; 0 bytes @ 0x0
   354                           
   355  0070                     ?_lcd_SendNibble:	
   356                           ; 0 bytes @ 0x0
   357                           
   358  0070                     ??_lcd_SendNibble:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0070                     ?_lcd_DataWrite:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0070                     ?_lcd_SendDataSignals:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0070                     ?_main:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0070                     ?_LCD_DisplayChar:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0070                     ?___lldiv:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0070                     DELAY_us@us_count:	
   377                           ; 4 bytes @ 0x0
   378                           
   379  0070                     ___lldiv@divisor:	
   380                           ; 2 bytes @ 0x0
   381                           
   382                           
   383                           ; 4 bytes @ 0x0
   384  0070                     	ds	1
   385  0071                     lcd_SendNibble@var:	
   386                           
   387                           ; 1 bytes @ 0x1
   388  0071                     	ds	1
   389  0072                     ??_DELAY_us:	
   390  0072                     ??_lcd_BusyCheck:	
   391                           ; 0 bytes @ 0x2
   392                           
   393  0072                     ??_lcd_SendCmdSignals:	
   394                           ; 0 bytes @ 0x2
   395                           
   396  0072                     ??_lcd_SendDataSignals:	
   397                           ; 0 bytes @ 0x2
   398                           
   399  0072                     ?_DELAY_ms:	
   400                           ; 0 bytes @ 0x2
   401                           
   402  0072                     ?_ADC_GetAdcValue:	
   403                           ; 0 bytes @ 0x2
   404                           
   405  0072                     DELAY_ms@ms_count:	
   406                           ; 2 bytes @ 0x2
   407                           
   408                           
   409                           ; 2 bytes @ 0x2
   410  0072                     	ds	1
   411  0073                     lcd_BusyCheck@busyflag:	
   412                           
   413                           ; 1 bytes @ 0x3
   414  0073                     	ds	1
   415  0074                     ??_ADC_GetAdcValue:	
   416  0074                     ??_LCD_CmdWrite:	
   417                           ; 0 bytes @ 0x4
   418                           
   419  0074                     ??_lcd_Reset:	
   420                           ; 0 bytes @ 0x4
   421                           
   422  0074                     ??_lcd_DataWrite:	
   423                           ; 0 bytes @ 0x4
   424                           
   425  0074                     ??_DELAY_ms:	
   426                           ; 0 bytes @ 0x4
   427                           
   428  0074                     ___lldiv@dividend:	
   429                           ; 0 bytes @ 0x4
   430                           
   431                           
   432                           ; 4 bytes @ 0x4
   433  0074                     	ds	1
   434  0075                     ADC_GetAdcValue@var_adcChannel_u8:	
   435  0075                     LCD_CmdWrite@var_lcdCmd_u8:	
   436                           ; 1 bytes @ 0x5
   437                           
   438  0075                     lcd_DataWrite@dat:	
   439                           ; 1 bytes @ 0x5
   440                           
   441                           
   442                           ; 1 bytes @ 0x5
   443  0075                     	ds	1
   444  0076                     ??_LCD_GoToLine:	
   445  0076                     ??_LCD_GoToNextLine:	
   446                           ; 0 bytes @ 0x6
   447                           
   448                           
   449                           ; 0 bytes @ 0x6
   450  0076                     	ds	1
   451  0077                     ??_LCD_DisplayChar:	
   452  0077                     LCD_GoToLine@var_lineNumber_u8:	
   453                           ; 0 bytes @ 0x7
   454                           
   455                           
   456                           ; 1 bytes @ 0x7
   457  0077                     	ds	1
   458  0078                     ?_LCD_Init:	
   459  0078                     ??_LCD_Clear:	
   460                           ; 0 bytes @ 0x8
   461                           
   462  0078                     ??___lldiv:	
   463                           ; 0 bytes @ 0x8
   464                           
   465  0078                     LCD_Init@var_lcdNoOfLines_u8:	
   466                           ; 0 bytes @ 0x8
   467                           
   468  0078                     LCD_DisplayChar@var_lcdData_u8:	
   469                           ; 1 bytes @ 0x8
   470                           
   471                           
   472                           ; 1 bytes @ 0x8
   473  0078                     	ds	1
   474  0079                     LCD_Init@var_MaxCharsPerLine_u8:	
   475  0079                     ___lldiv@quotient:	
   476                           ; 1 bytes @ 0x9
   477                           
   478                           
   479                           ; 4 bytes @ 0x9
   480  0079                     	ds	1
   481  007A                     ??_LCD_Init:	
   482                           
   483                           ; 0 bytes @ 0xA
   484  007A                     	ds	1
   485  007B                     LCD_Init@var_lcdMode_u8:	
   486                           
   487                           ; 1 bytes @ 0xB
   488  007B                     	ds	2
   489  007D                     ___lldiv@counter:	
   490                           
   491                           ; 1 bytes @ 0xD
   492  007D                     	ds	1
   493                           
   494                           	psect	cstackBANK0
   495  0020                     __pcstackBANK0:	
   496  0020                     ?___bmul:	
   497  0020                     ___bmul@multiplicand:	
   498                           ; 1 bytes @ 0x0
   499                           
   500                           
   501                           ; 1 bytes @ 0x0
   502  0020                     	ds	1
   503  0021                     ??___bmul:	
   504                           
   505                           ; 0 bytes @ 0x1
   506  0021                     	ds	1
   507  0022                     ___bmul@product:	
   508                           
   509                           ; 1 bytes @ 0x2
   510  0022                     	ds	1
   511  0023                     ___bmul@multiplier:	
   512                           
   513                           ; 1 bytes @ 0x3
   514  0023                     	ds	1
   515  0024                     ?_LCD_DisplayDecimalNumber:	
   516  0024                     LCD_DisplayDecimalNumber@var_DecNumber_u32:	
   517                           ; 0 bytes @ 0x4
   518                           
   519                           
   520                           ; 4 bytes @ 0x4
   521  0024                     	ds	4
   522  0028                     LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8:	
   523                           
   524                           ; 1 bytes @ 0x8
   525  0028                     	ds	1
   526  0029                     ??_LCD_DisplayDecimalNumber:	
   527                           
   528                           ; 0 bytes @ 0x9
   529  0029                     	ds	2
   530  002B                     LCD_DisplayDecimalNumber@a:	
   531                           
   532                           ; 10 bytes @ 0xB
   533  002B                     	ds	10
   534  0035                     LCD_DisplayDecimalNumber@i:	
   535                           
   536                           ; 1 bytes @ 0x15
   537  0035                     	ds	1
   538  0036                     ?_LCD_Printf:	
   539                           
   540                           ; 0 bytes @ 0x16
   541  0036                     	ds	2
   542  0038                     ??_LCD_Printf:	
   543                           
   544                           ; 0 bytes @ 0x18
   545  0038                     	ds	2
   546  003A                     LCD_Printf@var_floatNum_f32:	
   547                           
   548                           ; 3 bytes @ 0x1A
   549  003A                     	ds	3
   550  003D                     LCD_Printf@str:	
   551                           
   552                           ; 1 bytes @ 0x1D
   553  003D                     	ds	1
   554  003E                     LCD_Printf@var_num_u32:	
   555                           
   556                           ; 4 bytes @ 0x1E
   557  003E                     	ds	4
   558  0042                     LCD_Printf@var_num_u16:	
   559                           
   560                           ; 2 bytes @ 0x22
   561  0042                     	ds	2
   562  0044                     LCD_Printf@argList:	
   563                           
   564                           ; 1 bytes @ 0x24
   565  0044                     	ds	1
   566  0045                     LCD_Printf@var_num_s32:	
   567                           
   568                           ; 4 bytes @ 0x25
   569  0045                     	ds	4
   570  0049                     LCD_Printf@var_num_s16:	
   571                           
   572                           ; 2 bytes @ 0x29
   573  0049                     	ds	2
   574  004B                     LCD_Printf@ptr:	
   575                           
   576                           ; 1 bytes @ 0x2B
   577  004B                     	ds	1
   578  004C                     LCD_Printf@var_numOfDigitsToDisp_u8:	
   579                           
   580                           ; 1 bytes @ 0x2C
   581  004C                     	ds	1
   582  004D                     LCD_Printf@ch:	
   583                           
   584                           ; 1 bytes @ 0x2D
   585  004D                     	ds	1
   586  004E                     LCD_Printf@argp:	
   587                           
   588                           ; 1 bytes @ 0x2E
   589  004E                     	ds	1
   590  004F                     ??_main:	
   591                           
   592                           ; 0 bytes @ 0x2F
   593  004F                     	ds	2
   594  0051                     main@adc_temp:	
   595                           
   596                           ; 2 bytes @ 0x31
   597  0051                     	ds	2
   598  0053                     main@adc_result:	
   599                           
   600                           ; 2 bytes @ 0x33
   601  0053                     	ds	2
   602                           
   603                           	psect	maintext
   604  04F6                     __pmaintext:	
   605 ;;
   606 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   607 ;;
   608 ;; *************** function _main *****************
   609 ;; Defined at:
   610 ;;		line 15 in file "Temp_sensor_Lm35.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;  adc_result      2   51[BANK0 ] unsigned int 
   615 ;;  adc_temp        2   49[BANK0 ] unsigned int 
   616 ;; Return value:  Size  Location     Type
   617 ;;		None               void
   618 ;; Registers used:
   619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   620 ;; Tracked objects:
   621 ;;		On entry : 17F/0
   622 ;;		On exit  : 0/0
   623 ;;		Unchanged: 0/0
   624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   625 ;;      Params:         0       0       0       0       0
   626 ;;      Locals:         0       4       0       0       0
   627 ;;      Temps:          0       2       0       0       0
   628 ;;      Totals:         0       6       0       0       0
   629 ;;Total ram usage:        6 bytes
   630 ;; Hardware stack levels required when called:    7
   631 ;; This function calls:
   632 ;;		_ADC_GetAdcValue
   633 ;;		_ADC_Init
   634 ;;		_LCD_GoToLine
   635 ;;		_LCD_GoToNextLine
   636 ;;		_LCD_Init
   637 ;;		_LCD_Printf
   638 ;; This function is called by:
   639 ;;		Startup code after reset
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643                           
   644                           ;psect for function _main
   645  04F6                     _main:	
   646                           
   647                           ;Temp_sensor_Lm35.c: 17: unsigned int adc_result,adc_temp;
   648                           ;Temp_sensor_Lm35.c: 20: LCD_Init(8,2,16);
   649                           
   650                           ;incstack = 0
   651                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   652  04F6  3002               	movlw	2
   653  04F7  1283               	bcf	3,5	;RP0=0, select bank0
   654  04F8  1303               	bcf	3,6	;RP1=0, select bank0
   655  04F9  00CF               	movwf	??_main
   656  04FA  084F               	movf	??_main,w
   657  04FB  00F8               	movwf	LCD_Init@var_lcdNoOfLines_u8
   658  04FC  3010               	movlw	16
   659  04FD  00D0               	movwf	??_main+1
   660  04FE  0850               	movf	??_main+1,w
   661  04FF  00F9               	movwf	LCD_Init@var_MaxCharsPerLine_u8
   662  0500  3008               	movlw	8
   663  0501  120A  118A  2453  120A  118A  	fcall	_LCD_Init
   664                           
   665                           ;Temp_sensor_Lm35.c: 23: ADC_Init();
   666  0506  120A  118A  228E  120A  118A  	fcall	_ADC_Init
   667  050B                     l1459:	
   668                           ;Temp_sensor_Lm35.c: 27: while(1)
   669                           
   670                           
   671                           ;Temp_sensor_Lm35.c: 28: {
   672                           ;Temp_sensor_Lm35.c: 30: adc_result= ADC_GetAdcValue(1);
   673  050B  3001               	movlw	1
   674  050C  120A  118A  234C  120A  118A  	fcall	_ADC_GetAdcValue
   675  0511  0873               	movf	?_ADC_GetAdcValue+1,w
   676  0512  1283               	bcf	3,5	;RP0=0, select bank0
   677  0513  1303               	bcf	3,6	;RP1=0, select bank0
   678  0514  01D4               	clrf	main@adc_result+1
   679  0515  07D4               	addwf	main@adc_result+1,f
   680  0516  0872               	movf	?_ADC_GetAdcValue,w
   681  0517  01D3               	clrf	main@adc_result
   682  0518  07D3               	addwf	main@adc_result,f
   683                           
   684                           ;Temp_sensor_Lm35.c: 32: LCD_GoToLine(1);
   685  0519  3001               	movlw	1
   686  051A  120A  118A  22D3  120A  118A  	fcall	_LCD_GoToLine
   687                           
   688                           ;Temp_sensor_Lm35.c: 33: LCD_Printf("ADC value:%4u",adc_result);
   689  051F  1283               	bcf	3,5	;RP0=0, select bank0
   690  0520  1303               	bcf	3,6	;RP1=0, select bank0
   691  0521  0854               	movf	main@adc_result+1,w
   692  0522  01B7               	clrf	?_LCD_Printf+1
   693  0523  07B7               	addwf	?_LCD_Printf+1,f
   694  0524  0853               	movf	main@adc_result,w
   695  0525  01B6               	clrf	?_LCD_Printf
   696  0526  07B6               	addwf	?_LCD_Printf,f
   697  0527  3001               	movlw	(STR_1-__stringbase)& (0+255)
   698  0528  120A  118A  2644  120A  118A  	fcall	_LCD_Printf
   699                           
   700                           ;Temp_sensor_Lm35.c: 39: adc_temp = (adc_result/2);
   701  052D  1283               	bcf	3,5	;RP0=0, select bank0
   702  052E  1303               	bcf	3,6	;RP1=0, select bank0
   703  052F  0854               	movf	main@adc_result+1,w
   704  0530  00D0               	movwf	??_main+1
   705  0531  0853               	movf	main@adc_result,w
   706  0532  00CF               	movwf	??_main
   707  0533  1003               	clrc
   708  0534  0CD0               	rrf	??_main+1,f
   709  0535  0CCF               	rrf	??_main,f
   710  0536  084F               	movf	??_main,w
   711  0537  00D1               	movwf	main@adc_temp
   712  0538  0850               	movf	??_main+1,w
   713  0539  00D2               	movwf	main@adc_temp+1
   714                           
   715                           ;Temp_sensor_Lm35.c: 42: LCD_GoToNextLine();
   716  053A  120A  118A  22E8  120A  118A  	fcall	_LCD_GoToNextLine
   717                           
   718                           ;Temp_sensor_Lm35.c: 43: LCD_Printf("Temp:%4u",adc_temp);
   719  053F  1283               	bcf	3,5	;RP0=0, select bank0
   720  0540  1303               	bcf	3,6	;RP1=0, select bank0
   721  0541  0852               	movf	main@adc_temp+1,w
   722  0542  01B7               	clrf	?_LCD_Printf+1
   723  0543  07B7               	addwf	?_LCD_Printf+1,f
   724  0544  0851               	movf	main@adc_temp,w
   725  0545  01B6               	clrf	?_LCD_Printf
   726  0546  07B6               	addwf	?_LCD_Printf,f
   727  0547  300F               	movlw	(STR_2-__stringbase)& (0+255)
   728  0548  120A  118A  2644  120A  118A  	fcall	_LCD_Printf
   729  054D  2D0B               	goto	l1459
   730  054E                     __end_of_main:	
   731                           
   732                           	psect	text1
   733  0644                     __ptext1:	
   734 ;; *************** function _LCD_Printf *****************
   735 ;; Defined at:
   736 ;;		line 673 in file "lcd.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;  argList         1    wreg     PTR const unsigned char 
   739 ;;		 -> STR_2(9), STR_1(14), 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  argList         1   36[BANK0 ] PTR const unsigned char 
   742 ;;		 -> STR_2(9), STR_1(14), 
   743 ;;  var_num_s32     4   37[BANK0 ] long 
   744 ;;  var_num_u32     4   30[BANK0 ] unsigned long 
   745 ;;  var_floatNum    3   26[BANK0 ] unsigned long 
   746 ;;  var_num_s16     2   41[BANK0 ] int 
   747 ;;  var_num_u16     2   34[BANK0 ] unsigned int 
   748 ;;  argp            1   46[BANK0 ] PTR void [1]
   749 ;;		 -> ?_LCD_Printf(0), 
   750 ;;  ch              1   45[BANK0 ] unsigned char 
   751 ;;  var_numOfDig    1   44[BANK0 ] unsigned char 
   752 ;;  ptr             1   43[BANK0 ] PTR const unsigned char 
   753 ;;		 -> STR_2(9), STR_1(14), 
   754 ;;  str             1   29[BANK0 ] PTR unsigned char 
   755 ;; Return value:  Size  Location     Type
   756 ;;		None               void
   757 ;; Registers used:
   758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   764 ;;      Params:         0       2       0       0       0
   765 ;;      Locals:         0      21       0       0       0
   766 ;;      Temps:          0       2       0       0       0
   767 ;;      Totals:         0      25       0       0       0
   768 ;;Total ram usage:       25 bytes
   769 ;; Hardware stack levels used:    1
   770 ;; Hardware stack levels required when called:    6
   771 ;; This function calls:
   772 ;;		_LCD_DisplayChar
   773 ;;		_LCD_DisplayDecimalNumber
   774 ;;		___bmul
   775 ;; This function is called by:
   776 ;;		_main
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           
   781                           ;psect for function _LCD_Printf
   782  0644                     _LCD_Printf:	
   783                           
   784                           ;incstack = 0
   785                           ; Regs used in _LCD_Printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   786                           ;LCD_Printf@argList stored from wreg
   787  0644  1283               	bcf	3,5	;RP0=0, select bank0
   788  0645  1303               	bcf	3,6	;RP1=0, select bank0
   789  0646  00C4               	movwf	LCD_Printf@argList
   790                           
   791                           ;lcd.c: 675: const char *ptr;
   792                           ;lcd.c: 676: double var_floatNum_f32;
   793                           ;lcd.c: 677: va_list argp;
   794                           ;lcd.c: 678: sint16_t var_num_s16;
   795                           ;lcd.c: 679: sint32_t var_num_s32;
   796                           ;lcd.c: 680: uint16_t var_num_u16;
   797                           ;lcd.c: 681: uint32_t var_num_u32;
   798                           ;lcd.c: 682: char *str;
   799                           ;lcd.c: 683: char ch;
   800                           ;lcd.c: 684: uint8_t var_numOfDigitsToDisp_u8;
   801                           ;lcd.c: 686: *argp = __va_start();
   802  0647  3036               	movlw	?_LCD_Printf& (0+255)
   803  0648  00B8               	movwf	??_LCD_Printf
   804  0649  0838               	movf	??_LCD_Printf,w
   805  064A  00CE               	movwf	LCD_Printf@argp
   806                           
   807                           ;lcd.c: 689: for(ptr = argList; *ptr != '\0'; ptr++)
   808  064B  0844               	movf	LCD_Printf@argList,w
   809  064C  00B8               	movwf	??_LCD_Printf
   810  064D  0838               	movf	??_LCD_Printf,w
   811  064E  00CB               	movwf	LCD_Printf@ptr
   812  064F                     l1453:	
   813  064F  084B               	movf	LCD_Printf@ptr,w
   814  0650  0084               	movwf	4
   815  0651  120A  118A  2003  120A  118A  	fcall	stringdir
   816  0656  3800               	iorlw	0
   817  0657  1903               	btfsc	3,2
   818  0658  0008               	return
   819                           
   820                           ;lcd.c: 690: {
   821                           ;lcd.c: 692: ch= *ptr;
   822  0659  084B               	movf	LCD_Printf@ptr,w
   823  065A  0084               	movwf	4
   824  065B  120A  118A  2003  120A  118A  	fcall	stringdir
   825  0660  00B8               	movwf	??_LCD_Printf
   826  0661  0838               	movf	??_LCD_Printf,w
   827  0662  00CD               	movwf	LCD_Printf@ch
   828                           
   829                           ;lcd.c: 693: if(ch == '%')
   830  0663  084D               	movf	LCD_Printf@ch,w
   831  0664  3A25               	xorlw	37
   832  0665  1D03               	skipz
   833  0666  2FD1               	goto	l1449
   834                           
   835                           ;lcd.c: 694: {
   836                           ;lcd.c: 695: ptr++;
   837  0667  3001               	movlw	1
   838  0668  00B8               	movwf	??_LCD_Printf
   839  0669  0838               	movf	??_LCD_Printf,w
   840  066A  07CB               	addwf	LCD_Printf@ptr,f
   841                           
   842                           ;lcd.c: 696: ch = *ptr;
   843  066B  084B               	movf	LCD_Printf@ptr,w
   844  066C  0084               	movwf	4
   845  066D  120A  118A  2003  120A  118A  	fcall	stringdir
   846  0672  00B8               	movwf	??_LCD_Printf
   847  0673  0838               	movf	??_LCD_Printf,w
   848  0674  00CD               	movwf	LCD_Printf@ch
   849                           
   850                           ;lcd.c: 697: if((ch>=0x30) && (ch<=0x39))
   851  0675  3030               	movlw	48
   852  0676  024D               	subwf	LCD_Printf@ch,w
   853  0677  1C03               	skipc
   854  0678  2EA6               	goto	l1377
   855  0679  303A               	movlw	58
   856  067A  024D               	subwf	LCD_Printf@ch,w
   857  067B  1803               	skipnc
   858  067C  2EA6               	goto	l1377
   859                           
   860                           ;lcd.c: 698: {
   861                           ;lcd.c: 699: var_numOfDigitsToDisp_u8 = 0;
   862  067D  01CC               	clrf	LCD_Printf@var_numOfDigitsToDisp_u8
   863  067E                     l1373:	
   864                           ;lcd.c: 700: while((ch>=0x30) && (ch<=0x39))
   865                           
   866  067E  3030               	movlw	48
   867  067F  024D               	subwf	LCD_Printf@ch,w
   868  0680  1C03               	skipc
   869  0681  2F9F               	goto	l1447
   870  0682  303A               	movlw	58
   871  0683  024D               	subwf	LCD_Printf@ch,w
   872  0684  1803               	btfsc	3,0
   873  0685  2F9F               	goto	l1447
   874                           
   875                           ;lcd.c: 701: {
   876                           ;lcd.c: 702: var_numOfDigitsToDisp_u8 = (var_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
   877  0686  300A               	movlw	10
   878  0687  00B8               	movwf	??_LCD_Printf
   879  0688  0838               	movf	??_LCD_Printf,w
   880  0689  00A0               	movwf	___bmul@multiplicand
   881  068A  084C               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
   882  068B  120A  118A  22AC  120A  118A  	fcall	___bmul
   883  0690  1283               	bcf	3,5	;RP0=0, select bank0
   884  0691  1303               	bcf	3,6	;RP1=0, select bank0
   885  0692  074D               	addwf	LCD_Printf@ch,w
   886  0693  3ED0               	addlw	208
   887  0694  00B9               	movwf	??_LCD_Printf+1
   888  0695  0839               	movf	??_LCD_Printf+1,w
   889  0696  00CC               	movwf	LCD_Printf@var_numOfDigitsToDisp_u8
   890                           
   891                           ;lcd.c: 703: ptr++;
   892  0697  3001               	movlw	1
   893  0698  00B8               	movwf	??_LCD_Printf
   894  0699  0838               	movf	??_LCD_Printf,w
   895  069A  07CB               	addwf	LCD_Printf@ptr,f
   896                           
   897                           ;lcd.c: 704: ch = *ptr;
   898  069B  084B               	movf	LCD_Printf@ptr,w
   899  069C  0084               	movwf	4
   900  069D  120A  118A  2003  120A  118A  	fcall	stringdir
   901  06A2  00B8               	movwf	??_LCD_Printf
   902  06A3  0838               	movf	??_LCD_Printf,w
   903  06A4  00CD               	movwf	LCD_Printf@ch
   904  06A5  2E7E               	goto	l1373
   905  06A6                     l1377:	
   906                           ;lcd.c: 705: }
   907                           ;lcd.c: 706: }
   908                           
   909                           
   910                           ;lcd.c: 707: else
   911                           ;lcd.c: 708: {
   912                           ;lcd.c: 709: var_numOfDigitsToDisp_u8 = 0xffu;
   913  06A6  30FF               	movlw	255
   914  06A7  00B8               	movwf	??_LCD_Printf
   915  06A8  0838               	movf	??_LCD_Printf,w
   916  06A9  00CC               	movwf	LCD_Printf@var_numOfDigitsToDisp_u8
   917                           
   918                           ;lcd.c: 710: }
   919                           ;lcd.c: 713: switch(ch)
   920  06AA  2F9F               	goto	l1447
   921  06AB                     l1379:	
   922                           ;lcd.c: 714: {
   923                           ;lcd.c: 715: case 'C':
   924                           
   925                           
   926                           ;lcd.c: 716: case 'c':
   927                           ;lcd.c: 717: ch = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
   928  06AB  084E               	movf	LCD_Printf@argp,w
   929  06AC  0084               	movwf	4
   930  06AD  1383               	bcf	3,7	;select IRP bank0
   931  06AE  0800               	movf	0,w
   932  06AF  00B8               	movwf	??_LCD_Printf
   933  06B0  0838               	movf	??_LCD_Printf,w
   934  06B1  00CD               	movwf	LCD_Printf@ch
   935  06B2  3002               	movlw	2
   936  06B3  00B8               	movwf	??_LCD_Printf
   937  06B4  0838               	movf	??_LCD_Printf,w
   938  06B5  07CE               	addwf	LCD_Printf@argp,f
   939  06B6  2FD1               	goto	l1449
   940  06B7                     l1385:	
   941                           ;lcd.c: 721: case 'd':
   942                           
   943                           ;lcd.c: 719: break;
   944                           
   945                           ;lcd.c: 718: LCD_DisplayChar(ch);
   946                           
   947                           
   948                           ;lcd.c: 722: var_num_s16 = (*(sint16_t *)__va_arg((*(sint16_t **)argp), (sint16_t)0));
   949  06B7  1283               	bcf	3,5	;RP0=0, select bank0
   950  06B8  1303               	bcf	3,6	;RP1=0, select bank0
   951  06B9  084E               	movf	LCD_Printf@argp,w
   952  06BA  0084               	movwf	4
   953  06BB  1383               	bcf	3,7	;select IRP bank0
   954  06BC  0800               	movf	0,w
   955  06BD  00C9               	movwf	LCD_Printf@var_num_s16
   956  06BE  0A84               	incf	4,f
   957  06BF  0800               	movf	0,w
   958  06C0  00CA               	movwf	LCD_Printf@var_num_s16+1
   959  06C1  3002               	movlw	2
   960  06C2  00B8               	movwf	??_LCD_Printf
   961  06C3  0838               	movf	??_LCD_Printf,w
   962  06C4  07CE               	addwf	LCD_Printf@argp,f
   963                           
   964                           ;lcd.c: 724: if(var_num_s16<0)
   965  06C5  1FCA               	btfss	LCD_Printf@var_num_s16+1,7
   966  06C6  2ED2               	goto	l1395
   967                           
   968                           ;lcd.c: 725: {
   969                           ;lcd.c: 726: var_num_s16 = -var_num_s16;
   970  06C7  09C9               	comf	LCD_Printf@var_num_s16,f
   971  06C8  09CA               	comf	LCD_Printf@var_num_s16+1,f
   972  06C9  0AC9               	incf	LCD_Printf@var_num_s16,f
   973  06CA  1903               	skipnz
   974  06CB  0ACA               	incf	LCD_Printf@var_num_s16+1,f
   975                           
   976                           ;lcd.c: 727: LCD_DisplayChar('-');
   977  06CC  302D               	movlw	45
   978  06CD  120A  118A  232D  120A  118A  	fcall	_LCD_DisplayChar
   979  06D2                     l1395:	
   980                           
   981                           ;lcd.c: 728: }
   982                           ;lcd.c: 729: LCD_DisplayDecimalNumber(var_num_s16,var_numOfDigitsToDisp_u8);
   983  06D2  1283               	bcf	3,5	;RP0=0, select bank0
   984  06D3  1303               	bcf	3,6	;RP1=0, select bank0
   985  06D4  0849               	movf	LCD_Printf@var_num_s16,w
   986  06D5  00A4               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32
   987  06D6  084A               	movf	LCD_Printf@var_num_s16+1,w
   988  06D7  00A5               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1
   989  06D8  3000               	movlw	0
   990  06D9  1BA5               	btfsc	LCD_DisplayDecimalNumber@var_DecNumber_u32+1,7
   991  06DA  30FF               	movlw	255
   992  06DB  00A6               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2
   993  06DC  00A7               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3
   994  06DD  084C               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
   995  06DE  00B8               	movwf	??_LCD_Printf
   996  06DF  0838               	movf	??_LCD_Printf,w
   997  06E0  00A8               	movwf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8
   998  06E1  120A  118A  25AC  120A  118A  	fcall	_LCD_DisplayDecimalNumber
   999                           
  1000                           ;lcd.c: 731: break;
  1001  06E6  2FD7               	goto	l1451
  1002  06E7                     l1397:	
  1003                           ;lcd.c: 733: case 'D':
  1004                           
  1005                           
  1006                           ;lcd.c: 734: var_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  1007  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  1008  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  1009  06E9  084E               	movf	LCD_Printf@argp,w
  1010  06EA  0084               	movwf	4
  1011  06EB  1383               	bcf	3,7	;select IRP bank0
  1012  06EC  0800               	movf	0,w
  1013  06ED  00C5               	movwf	LCD_Printf@var_num_s32
  1014  06EE  0A84               	incf	4,f
  1015  06EF  0800               	movf	0,w
  1016  06F0  00C6               	movwf	LCD_Printf@var_num_s32+1
  1017  06F1  0A84               	incf	4,f
  1018  06F2  0800               	movf	0,w
  1019  06F3  00C7               	movwf	LCD_Printf@var_num_s32+2
  1020  06F4  0A84               	incf	4,f
  1021  06F5  0800               	movf	0,w
  1022  06F6  00C8               	movwf	LCD_Printf@var_num_s32+3
  1023  06F7  3004               	movlw	4
  1024  06F8  00B8               	movwf	??_LCD_Printf
  1025  06F9  0838               	movf	??_LCD_Printf,w
  1026  06FA  07CE               	addwf	LCD_Printf@argp,f
  1027                           
  1028                           ;lcd.c: 736: if(var_num_s32<0)
  1029  06FB  1FC8               	btfss	LCD_Printf@var_num_s32+3,7
  1030  06FC  2F0E               	goto	l176
  1031                           
  1032                           ;lcd.c: 737: {
  1033                           ;lcd.c: 738: var_num_s32 = -var_num_s32;
  1034  06FD  09C5               	comf	LCD_Printf@var_num_s32,f
  1035  06FE  09C6               	comf	LCD_Printf@var_num_s32+1,f
  1036  06FF  09C7               	comf	LCD_Printf@var_num_s32+2,f
  1037  0700  09C8               	comf	LCD_Printf@var_num_s32+3,f
  1038  0701  0AC5               	incf	LCD_Printf@var_num_s32,f
  1039  0702  1903               	skipnz
  1040  0703  0AC6               	incf	LCD_Printf@var_num_s32+1,f
  1041  0704  1903               	skipnz
  1042  0705  0AC7               	incf	LCD_Printf@var_num_s32+2,f
  1043  0706  1903               	skipnz
  1044  0707  0AC8               	incf	LCD_Printf@var_num_s32+3,f
  1045                           
  1046                           ;lcd.c: 739: LCD_DisplayChar('-');
  1047  0708  302D               	movlw	45
  1048  0709  120A  118A  232D  120A  118A  	fcall	_LCD_DisplayChar
  1049  070E                     l176:	
  1050                           
  1051                           ;lcd.c: 740: }
  1052                           ;lcd.c: 741: LCD_DisplayDecimalNumber(var_num_s32,var_numOfDigitsToDisp_u8);
  1053  070E  1283               	bcf	3,5	;RP0=0, select bank0
  1054  070F  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0710  0848               	movf	LCD_Printf@var_num_s32+3,w
  1056  0711  00A7               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3
  1057  0712  0847               	movf	LCD_Printf@var_num_s32+2,w
  1058  0713  00A6               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2
  1059  0714  0846               	movf	LCD_Printf@var_num_s32+1,w
  1060  0715  00A5               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1
  1061  0716  0845               	movf	LCD_Printf@var_num_s32,w
  1062  0717  00A4               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32
  1063  0718  084C               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
  1064  0719  00B8               	movwf	??_LCD_Printf
  1065  071A  0838               	movf	??_LCD_Printf,w
  1066  071B  00A8               	movwf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8
  1067  071C  120A  118A  25AC  120A  118A  	fcall	_LCD_DisplayDecimalNumber
  1068                           
  1069                           ;lcd.c: 743: break;
  1070  0721  2FD7               	goto	l1451
  1071  0722                     l1407:	
  1072                           ;lcd.c: 745: case 'u':
  1073                           
  1074                           
  1075                           ;lcd.c: 746: var_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1076  0722  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0723  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0724  084E               	movf	LCD_Printf@argp,w
  1079  0725  0084               	movwf	4
  1080  0726  1383               	bcf	3,7	;select IRP bank0
  1081  0727  0800               	movf	0,w
  1082  0728  00C2               	movwf	LCD_Printf@var_num_u16
  1083  0729  0A84               	incf	4,f
  1084  072A  0800               	movf	0,w
  1085  072B  00C3               	movwf	LCD_Printf@var_num_u16+1
  1086  072C  3002               	movlw	2
  1087  072D  00B8               	movwf	??_LCD_Printf
  1088  072E  0838               	movf	??_LCD_Printf,w
  1089  072F  07CE               	addwf	LCD_Printf@argp,f
  1090                           
  1091                           ;lcd.c: 748: LCD_DisplayDecimalNumber(var_num_u16,var_numOfDigitsToDisp_u8);
  1092  0730  0842               	movf	LCD_Printf@var_num_u16,w
  1093  0731  00A4               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32
  1094  0732  0843               	movf	LCD_Printf@var_num_u16+1,w
  1095  0733  00A5               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1
  1096  0734  01A6               	clrf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2
  1097  0735  01A7               	clrf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3
  1098  0736  084C               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
  1099  0737  00B8               	movwf	??_LCD_Printf
  1100  0738  0838               	movf	??_LCD_Printf,w
  1101  0739  00A8               	movwf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8
  1102  073A  120A  118A  25AC  120A  118A  	fcall	_LCD_DisplayDecimalNumber
  1103                           
  1104                           ;lcd.c: 750: break;
  1105  073F  2FD7               	goto	l1451
  1106  0740                     l1413:	
  1107                           ;lcd.c: 752: case 'U':
  1108                           
  1109                           
  1110                           ;lcd.c: 753: var_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1111  0740  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0741  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0742  084E               	movf	LCD_Printf@argp,w
  1114  0743  0084               	movwf	4
  1115  0744  1383               	bcf	3,7	;select IRP bank0
  1116  0745  0800               	movf	0,w
  1117  0746  00BE               	movwf	LCD_Printf@var_num_u32
  1118  0747  0A84               	incf	4,f
  1119  0748  0800               	movf	0,w
  1120  0749  00BF               	movwf	LCD_Printf@var_num_u32+1
  1121  074A  0A84               	incf	4,f
  1122  074B  0800               	movf	0,w
  1123  074C  00C0               	movwf	LCD_Printf@var_num_u32+2
  1124  074D  0A84               	incf	4,f
  1125  074E  0800               	movf	0,w
  1126  074F  00C1               	movwf	LCD_Printf@var_num_u32+3
  1127  0750  3004               	movlw	4
  1128  0751  00B8               	movwf	??_LCD_Printf
  1129  0752  0838               	movf	??_LCD_Printf,w
  1130  0753  07CE               	addwf	LCD_Printf@argp,f
  1131                           
  1132                           ;lcd.c: 755: LCD_DisplayDecimalNumber(var_num_u32,var_numOfDigitsToDisp_u8);
  1133  0754  0841               	movf	LCD_Printf@var_num_u32+3,w
  1134  0755  00A7               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3
  1135  0756  0840               	movf	LCD_Printf@var_num_u32+2,w
  1136  0757  00A6               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2
  1137  0758  083F               	movf	LCD_Printf@var_num_u32+1,w
  1138  0759  00A5               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1
  1139  075A  083E               	movf	LCD_Printf@var_num_u32,w
  1140  075B  00A4               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32
  1141  075C  084C               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
  1142  075D  00B8               	movwf	??_LCD_Printf
  1143  075E  0838               	movf	??_LCD_Printf,w
  1144  075F  00A8               	movwf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8
  1145  0760  120A  118A  25AC  120A  118A  	fcall	_LCD_DisplayDecimalNumber
  1146                           
  1147                           ;lcd.c: 757: break;
  1148  0765  2FD7               	goto	l1451
  1149  0766                     l1419:	
  1150                           ;lcd.c: 759: case 'x':
  1151                           
  1152                           
  1153                           ;lcd.c: 760: var_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1154  0766  1283               	bcf	3,5	;RP0=0, select bank0
  1155  0767  1303               	bcf	3,6	;RP1=0, select bank0
  1156  0768  2F6A               	goto	l1427
  1157  0769                     l1423:	
  1158                           ;lcd.c: 766: case 'X':
  1159                           
  1160                           ;lcd.c: 764: break;
  1161                           
  1162  0769  2F74               	goto	l1431
  1163  076A                     l1427:	
  1164                           ;lcd.c: 774: case 'b':
  1165                           
  1166                           ;lcd.c: 771: break;
  1167                           
  1168                           ;lcd.c: 767: var_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1169                           
  1170                           
  1171                           ;lcd.c: 775: var_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  1172  076A  084E               	movf	LCD_Printf@argp,w
  1173  076B  0084               	movwf	4
  1174  076C  1383               	bcf	3,7	;select IRP bank0
  1175  076D  0800               	movf	0,w
  1176  076E  00C2               	movwf	LCD_Printf@var_num_u16
  1177  076F  0A84               	incf	4,f
  1178  0770  0800               	movf	0,w
  1179  0771  00C3               	movwf	LCD_Printf@var_num_u16+1
  1180  0772  3002               	movlw	2
  1181  0773  2F99               	goto	L5
  1182  0774                     l1431:	
  1183                           ;lcd.c: 783: case 'B':
  1184                           
  1185                           ;lcd.c: 781: break;
  1186                           
  1187                           
  1188                           ;lcd.c: 784: var_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  1189  0774  084E               	movf	LCD_Printf@argp,w
  1190  0775  0084               	movwf	4
  1191  0776  1383               	bcf	3,7	;select IRP bank0
  1192  0777  0800               	movf	0,w
  1193  0778  00BE               	movwf	LCD_Printf@var_num_u32
  1194  0779  0A84               	incf	4,f
  1195  077A  0800               	movf	0,w
  1196  077B  00BF               	movwf	LCD_Printf@var_num_u32+1
  1197  077C  0A84               	incf	4,f
  1198  077D  0800               	movf	0,w
  1199  077E  00C0               	movwf	LCD_Printf@var_num_u32+2
  1200  077F  0A84               	incf	4,f
  1201  0780  0800               	movf	0,w
  1202  0781  00C1               	movwf	LCD_Printf@var_num_u32+3
  1203  0782  3004               	movlw	4
  1204  0783  2F99               	goto	L5
  1205  0784                     l1435:	
  1206                           ;lcd.c: 793: case 'F':
  1207                           
  1208                           ;lcd.c: 790: break;
  1209                           
  1210                           
  1211                           ;lcd.c: 794: case 'f':
  1212                           ;lcd.c: 795: var_floatNum_f32 = (*(double *)__va_arg((*(double **)argp), (double)0));
  1213  0784  084E               	movf	LCD_Printf@argp,w
  1214  0785  0084               	movwf	4
  1215  0786  1383               	bcf	3,7	;select IRP bank0
  1216  0787  0800               	movf	0,w
  1217  0788  00BA               	movwf	LCD_Printf@var_floatNum_f32
  1218  0789  0A84               	incf	4,f
  1219  078A  0800               	movf	0,w
  1220  078B  00BB               	movwf	LCD_Printf@var_floatNum_f32+1
  1221  078C  0A84               	incf	4,f
  1222  078D  0800               	movf	0,w
  1223  078E  00BC               	movwf	LCD_Printf@var_floatNum_f32+2
  1224  078F  3003               	movlw	3
  1225  0790  2F99               	goto	L5
  1226  0791                     l1439:	
  1227                           ;lcd.c: 802: case 'S':
  1228                           
  1229                           ;lcd.c: 799: break;
  1230                           
  1231                           
  1232                           ;lcd.c: 803: case 's':
  1233                           ;lcd.c: 804: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  1234  0791  084E               	movf	LCD_Printf@argp,w
  1235  0792  0084               	movwf	4
  1236  0793  1383               	bcf	3,7	;select IRP bank0
  1237  0794  0800               	movf	0,w
  1238  0795  00B8               	movwf	??_LCD_Printf
  1239  0796  0838               	movf	??_LCD_Printf,w
  1240  0797  00BD               	movwf	LCD_Printf@str
  1241  0798  3001               	movlw	1
  1242  0799                     L5:	
  1243  0799  00B8               	movwf	??_LCD_Printf
  1244  079A  0838               	movf	??_LCD_Printf,w
  1245  079B  07CE               	addwf	LCD_Printf@argp,f
  1246                           
  1247                           ;lcd.c: 808: break;
  1248  079C  2FD7               	goto	l1451
  1249  079D                     l1443:	
  1250                           ;lcd.c: 810: case '%':
  1251                           
  1252                           
  1253                           ;lcd.c: 811: LCD_DisplayChar('%');
  1254  079D  3025               	movlw	37
  1255  079E  2FD2               	goto	L6
  1256  079F                     l1447:	
  1257                           ;lcd.c: 813: }
  1258                           
  1259                           ;lcd.c: 812: break;
  1260                           
  1261  079F  1283               	bcf	3,5	;RP0=0, select bank0
  1262  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  1263  07A1  084D               	movf	LCD_Printf@ch,w
  1264                           
  1265                           ; Switch size 1, requested type "space"
  1266                           ; Number of cases is 15, Range of values is 37 to 120
  1267                           ; switch strategies available:
  1268                           ; Name         Instructions Cycles
  1269                           ; simple_byte           46    24 (average)
  1270                           ; direct_byte          263    11 (fixed)
  1271                           ; jumptable            263     9 (fixed)
  1272                           ;	Chosen strategy is simple_byte
  1273  07A2  3A25               	xorlw	37	; case 37
  1274  07A3  1903               	skipnz
  1275  07A4  2F9D               	goto	l1443
  1276  07A5  3A67               	xorlw	103	; case 66
  1277  07A6  1903               	skipnz
  1278  07A7  2F74               	goto	l1431
  1279  07A8  3A01               	xorlw	1	; case 67
  1280  07A9  1903               	skipnz
  1281  07AA  2EAB               	goto	l1379
  1282  07AB  3A07               	xorlw	7	; case 68
  1283  07AC  1903               	skipnz
  1284  07AD  2EE7               	goto	l1397
  1285  07AE  3A02               	xorlw	2	; case 70
  1286  07AF  1903               	skipnz
  1287  07B0  2F84               	goto	l1435
  1288  07B1  3A15               	xorlw	21	; case 83
  1289  07B2  1903               	skipnz
  1290  07B3  2F91               	goto	l1439
  1291  07B4  3A06               	xorlw	6	; case 85
  1292  07B5  1903               	skipnz
  1293  07B6  2F40               	goto	l1413
  1294  07B7  3A0D               	xorlw	13	; case 88
  1295  07B8  1903               	skipnz
  1296  07B9  2F69               	goto	l1423
  1297  07BA  3A3A               	xorlw	58	; case 98
  1298  07BB  1903               	skipnz
  1299  07BC  2F6A               	goto	l1427
  1300  07BD  3A01               	xorlw	1	; case 99
  1301  07BE  1903               	skipnz
  1302  07BF  2EAB               	goto	l1379
  1303  07C0  3A07               	xorlw	7	; case 100
  1304  07C1  1903               	skipnz
  1305  07C2  2EB7               	goto	l1385
  1306  07C3  3A02               	xorlw	2	; case 102
  1307  07C4  1903               	skipnz
  1308  07C5  2F84               	goto	l1435
  1309  07C6  3A15               	xorlw	21	; case 115
  1310  07C7  1903               	skipnz
  1311  07C8  2F91               	goto	l1439
  1312  07C9  3A06               	xorlw	6	; case 117
  1313  07CA  1903               	skipnz
  1314  07CB  2F22               	goto	l1407
  1315  07CC  3A0D               	xorlw	13	; case 120
  1316  07CD  1903               	skipnz
  1317  07CE  2F66               	goto	l1419
  1318  07CF  2FD7               	goto	l1451
  1319                           
  1320                           ;lcd.c: 814: }
  1321  07D0  2FD7               	goto	l1451
  1322  07D1                     l1449:	
  1323                           
  1324                           ;lcd.c: 815: else
  1325                           ;lcd.c: 816: {
  1326                           ;lcd.c: 818: LCD_DisplayChar(ch);
  1327  07D1  084D               	movf	LCD_Printf@ch,w
  1328  07D2                     L6:	
  1329  07D2  120A  118A  232D  120A  118A  	fcall	_LCD_DisplayChar
  1330  07D7                     l1451:	
  1331  07D7  3001               	movlw	1
  1332  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  1333  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  1334  07DA  00B8               	movwf	??_LCD_Printf
  1335  07DB  0838               	movf	??_LCD_Printf,w
  1336  07DC  07CB               	addwf	LCD_Printf@ptr,f
  1337  07DD  2E4F               	goto	l1453
  1338  07DE                     __end_of_LCD_Printf:	
  1339                           
  1340                           	psect	text2
  1341  05AC                     __ptext2:	
  1342 ;; *************** function _LCD_DisplayDecimalNumber *****************
  1343 ;; Defined at:
  1344 ;;		line 431 in file "lcd.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  var_DecNumbe    4    4[BANK0 ] unsigned long 
  1347 ;;  var_numOfDig    1    8[BANK0 ] unsigned char 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  a              10   11[BANK0 ] unsigned char [10]
  1350 ;;  i               1   21[BANK0 ] unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;		None               void
  1353 ;; Registers used:
  1354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1360 ;;      Params:         0       5       0       0       0
  1361 ;;      Locals:         0      11       0       0       0
  1362 ;;      Temps:          0       2       0       0       0
  1363 ;;      Totals:         0      18       0       0       0
  1364 ;;Total ram usage:       18 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; Hardware stack levels required when called:    5
  1367 ;; This function calls:
  1368 ;;		_LCD_DisplayChar
  1369 ;;		___bmul
  1370 ;;		___lldiv
  1371 ;; This function is called by:
  1372 ;;		_LCD_Printf
  1373 ;; This function uses a non-reentrant model
  1374 ;;
  1375                           
  1376                           
  1377                           ;psect for function _LCD_DisplayDecimalNumber
  1378  05AC                     _LCD_DisplayDecimalNumber:	
  1379                           
  1380                           ;lcd.c: 433: uint8_t i=0,a[10];
  1381                           
  1382                           ;incstack = 0
  1383                           ; Regs used in _LCD_DisplayDecimalNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1384  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  1385  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  1386  05AE  01B5               	clrf	LCD_DisplayDecimalNumber@i
  1387                           
  1388                           ;lcd.c: 435: if(var_DecNumber_u32==0)
  1389  05AF  0827               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3,w
  1390  05B0  0426               	iorwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2,w
  1391  05B1  0425               	iorwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1,w
  1392  05B2  0424               	iorwf	LCD_DisplayDecimalNumber@var_DecNumber_u32,w
  1393  05B3  1D03               	skipz
  1394  05B4  2DC8               	goto	l1285
  1395                           
  1396                           ;lcd.c: 436: {
  1397                           ;lcd.c: 438: for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<10u));i++)
  1398  05B5  01B5               	clrf	LCD_DisplayDecimalNumber@i
  1399  05B6                     l1281:	
  1400  05B6  0828               	movf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8,w
  1401  05B7  0235               	subwf	LCD_DisplayDecimalNumber@i,w
  1402  05B8  1803               	skipnc
  1403  05B9  2E40               	goto	l1309
  1404  05BA  300A               	movlw	10
  1405  05BB  0235               	subwf	LCD_DisplayDecimalNumber@i,w
  1406  05BC  1803               	btfsc	3,0
  1407  05BD  2E40               	goto	l1309
  1408                           
  1409                           ;lcd.c: 439: a[i] = 0x00;
  1410  05BE  0835               	movf	LCD_DisplayDecimalNumber@i,w
  1411  05BF  3E2B               	addlw	LCD_DisplayDecimalNumber@a& (0+255)
  1412  05C0  0084               	movwf	4
  1413  05C1  1383               	bcf	3,7	;select IRP bank0
  1414  05C2  0180               	clrf	0
  1415  05C3  3001               	movlw	1
  1416  05C4  00A9               	movwf	??_LCD_DisplayDecimalNumber
  1417  05C5  0829               	movf	??_LCD_DisplayDecimalNumber,w
  1418  05C6  07B5               	addwf	LCD_DisplayDecimalNumber@i,f
  1419  05C7  2DB6               	goto	l1281
  1420  05C8                     l1285:	
  1421                           ;lcd.c: 440: }
  1422                           
  1423                           
  1424                           ;lcd.c: 441: else
  1425                           ;lcd.c: 442: {
  1426                           ;lcd.c: 443: for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
  1427  05C8  01B5               	clrf	LCD_DisplayDecimalNumber@i
  1428  05C9                     l1303:	
  1429  05C9  0828               	movf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8,w
  1430  05CA  0235               	subwf	LCD_DisplayDecimalNumber@i,w
  1431  05CB  1803               	btfsc	3,0
  1432  05CC  2E40               	goto	l1309
  1433                           
  1434                           ;lcd.c: 444: {
  1435                           ;lcd.c: 447: if(var_DecNumber_u32!=0)
  1436  05CD  0827               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3,w
  1437  05CE  0426               	iorwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2,w
  1438  05CF  0425               	iorwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1,w
  1439  05D0  0424               	iorwf	LCD_DisplayDecimalNumber@var_DecNumber_u32,w
  1440  05D1  1903               	skipnz
  1441  05D2  2E1E               	goto	l1293
  1442                           
  1443                           ;lcd.c: 448: {
  1444                           ;lcd.c: 453: a[i]=(uint32_t)(var_DecNumber_u32 - (10 * (uint32_t)(var_DecNumber_u32/10))
      +                          );
  1445  05D3  300A               	movlw	10
  1446  05D4  00A9               	movwf	??_LCD_DisplayDecimalNumber
  1447  05D5  0829               	movf	??_LCD_DisplayDecimalNumber,w
  1448  05D6  00A0               	movwf	___bmul@multiplicand
  1449  05D7  0827               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3,w
  1450  05D8  00F7               	movwf	___lldiv@dividend+3
  1451  05D9  0826               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2,w
  1452  05DA  00F6               	movwf	___lldiv@dividend+2
  1453  05DB  0825               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1,w
  1454  05DC  00F5               	movwf	___lldiv@dividend+1
  1455  05DD  0824               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32,w
  1456  05DE  00F4               	movwf	___lldiv@dividend
  1457  05DF  3000               	movlw	0
  1458  05E0  00F3               	movwf	___lldiv@divisor+3
  1459  05E1  3000               	movlw	0
  1460  05E2  00F2               	movwf	___lldiv@divisor+2
  1461  05E3  3000               	movlw	0
  1462  05E4  00F1               	movwf	___lldiv@divisor+1
  1463  05E5  300A               	movlw	10
  1464  05E6  00F0               	movwf	___lldiv@divisor
  1465  05E7  120A  118A  254E  120A  118A  	fcall	___lldiv
  1466  05EC  0870               	movf	?___lldiv,w
  1467  05ED  120A  118A  22AC  120A  118A  	fcall	___bmul
  1468  05F2  3AFF               	xorlw	255
  1469  05F3  3E01               	addlw	1
  1470  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  1471  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  1472  05F6  0724               	addwf	LCD_DisplayDecimalNumber@var_DecNumber_u32,w
  1473  05F7  00AA               	movwf	??_LCD_DisplayDecimalNumber+1
  1474  05F8  0835               	movf	LCD_DisplayDecimalNumber@i,w
  1475  05F9  3E2B               	addlw	LCD_DisplayDecimalNumber@a& (0+255)
  1476  05FA  0084               	movwf	4
  1477  05FB  082A               	movf	??_LCD_DisplayDecimalNumber+1,w
  1478  05FC  1383               	bcf	3,7	;select IRP bank0
  1479  05FD  0080               	movwf	0
  1480                           
  1481                           ;lcd.c: 454: var_DecNumber_u32=var_DecNumber_u32/10;
  1482  05FE  3000               	movlw	0
  1483  05FF  00F3               	movwf	___lldiv@divisor+3
  1484  0600  3000               	movlw	0
  1485  0601  00F2               	movwf	___lldiv@divisor+2
  1486  0602  3000               	movlw	0
  1487  0603  00F1               	movwf	___lldiv@divisor+1
  1488  0604  300A               	movlw	10
  1489  0605  00F0               	movwf	___lldiv@divisor
  1490  0606  0827               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3,w
  1491  0607  00F7               	movwf	___lldiv@dividend+3
  1492  0608  0826               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2,w
  1493  0609  00F6               	movwf	___lldiv@dividend+2
  1494  060A  0825               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1,w
  1495  060B  00F5               	movwf	___lldiv@dividend+1
  1496  060C  0824               	movf	LCD_DisplayDecimalNumber@var_DecNumber_u32,w
  1497  060D  00F4               	movwf	___lldiv@dividend
  1498  060E  120A  118A  254E  120A  118A  	fcall	___lldiv
  1499  0613  0873               	movf	?___lldiv+3,w
  1500  0614  1283               	bcf	3,5	;RP0=0, select bank0
  1501  0615  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0616  00A7               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+3
  1503  0617  0872               	movf	?___lldiv+2,w
  1504  0618  00A6               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+2
  1505  0619  0871               	movf	?___lldiv+1,w
  1506  061A  00A5               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32+1
  1507  061B  0870               	movf	?___lldiv,w
  1508  061C  00A4               	movwf	LCD_DisplayDecimalNumber@var_DecNumber_u32
  1509                           
  1510                           ;lcd.c: 455: }
  1511  061D  2E2B               	goto	l1301
  1512  061E                     l1293:	
  1513                           
  1514                           ;lcd.c: 456: else if( (var_numOfDigitsToDisplay_u8 == 0xffu) ||
  1515                           ;lcd.c: 457: (var_numOfDigitsToDisplay_u8 > 10u))
  1516  061E  0828               	movf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8,w
  1517  061F  3AFF               	xorlw	255
  1518  0620  1903               	skipnz
  1519  0621  2E40               	goto	l1309
  1520  0622  300B               	movlw	11
  1521  0623  0228               	subwf	LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8,w
  1522  0624  1803               	btfsc	3,0
  1523  0625  2E40               	goto	l1309
  1524                           
  1525                           ;lcd.c: 463: else
  1526                           ;lcd.c: 464: {
  1527                           ;lcd.c: 468: a[i]=0;
  1528                           
  1529                           ;lcd.c: 462: }
  1530                           
  1531                           ;lcd.c: 458: {
  1532                           ;lcd.c: 461: break;
  1533  0626  0835               	movf	LCD_DisplayDecimalNumber@i,w
  1534  0627  3E2B               	addlw	LCD_DisplayDecimalNumber@a& (0+255)
  1535  0628  0084               	movwf	4
  1536  0629  1383               	bcf	3,7	;select IRP bank0
  1537  062A  0180               	clrf	0
  1538  062B                     l1301:	
  1539  062B  3001               	movlw	1
  1540  062C  00A9               	movwf	??_LCD_DisplayDecimalNumber
  1541  062D  0829               	movf	??_LCD_DisplayDecimalNumber,w
  1542  062E  07B5               	addwf	LCD_DisplayDecimalNumber@i,f
  1543  062F  2DC9               	goto	l1303
  1544  0630                     l1305:	
  1545                           ;lcd.c: 469: }
  1546                           ;lcd.c: 470: }
  1547                           ;lcd.c: 471: }
  1548                           ;lcd.c: 474: while(i)
  1549                           
  1550                           
  1551                           ;lcd.c: 475: {
  1552                           ;lcd.c: 477: LCD_DisplayChar(((a[i-1])+0x30));
  1553  0630  0835               	movf	LCD_DisplayDecimalNumber@i,w
  1554  0631  3EFF               	addlw	255
  1555  0632  3E2B               	addlw	LCD_DisplayDecimalNumber@a& (0+255)
  1556  0633  0084               	movwf	4
  1557  0634  1383               	bcf	3,7	;select IRP bank0
  1558  0635  0800               	movf	0,w
  1559  0636  3E30               	addlw	48
  1560  0637  120A  118A  232D  120A  118A  	fcall	_LCD_DisplayChar
  1561                           
  1562                           ;lcd.c: 478: i--;
  1563  063C  3001               	movlw	1
  1564  063D  1283               	bcf	3,5	;RP0=0, select bank0
  1565  063E  1303               	bcf	3,6	;RP1=0, select bank0
  1566  063F  02B5               	subwf	LCD_DisplayDecimalNumber@i,f
  1567  0640                     l1309:	
  1568  0640  08B5               	movf	LCD_DisplayDecimalNumber@i,f
  1569  0641  1903               	btfsc	3,2
  1570  0642  0008               	return
  1571  0643  2E30               	goto	l1305
  1572  0644                     __end_of_LCD_DisplayDecimalNumber:	
  1573                           
  1574                           	psect	text3
  1575  054E                     __ptext3:	
  1576 ;; *************** function ___lldiv *****************
  1577 ;; Defined at:
  1578 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  divisor         4    0[COMMON] unsigned long 
  1581 ;;  dividend        4    4[COMMON] unsigned long 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  quotient        4    9[COMMON] unsigned long 
  1584 ;;  counter         1   13[COMMON] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  4    0[COMMON] unsigned long 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2, status,0
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1594 ;;      Params:         8       0       0       0       0
  1595 ;;      Locals:         5       0       0       0       0
  1596 ;;      Temps:          1       0       0       0       0
  1597 ;;      Totals:        14       0       0       0       0
  1598 ;;Total ram usage:       14 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; This function calls:
  1601 ;;		Nothing
  1602 ;; This function is called by:
  1603 ;;		_LCD_DisplayDecimalNumber
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           
  1608                           ;psect for function ___lldiv
  1609  054E                     ___lldiv:	
  1610                           
  1611                           ;incstack = 0
  1612                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  1613  054E  3000               	movlw	0
  1614  054F  00FC               	movwf	___lldiv@quotient+3
  1615  0550  3000               	movlw	0
  1616  0551  00FB               	movwf	___lldiv@quotient+2
  1617  0552  3000               	movlw	0
  1618  0553  00FA               	movwf	___lldiv@quotient+1
  1619  0554  3000               	movlw	0
  1620  0555  00F9               	movwf	___lldiv@quotient
  1621  0556  0873               	movf	___lldiv@divisor+3,w
  1622  0557  0472               	iorwf	___lldiv@divisor+2,w
  1623  0558  0471               	iorwf	___lldiv@divisor+1,w
  1624  0559  0470               	iorwf	___lldiv@divisor,w
  1625  055A  1903               	skipnz
  1626  055B  2DA3               	goto	l1261
  1627  055C  01FD               	clrf	___lldiv@counter
  1628  055D  0AFD               	incf	___lldiv@counter,f
  1629  055E                     l1247:	
  1630  055E  1BF3               	btfsc	___lldiv@divisor+3,7
  1631  055F  2D6E               	goto	l1249
  1632  0560  3001               	movlw	1
  1633  0561  00F8               	movwf	??___lldiv
  1634  0562                     u735:	
  1635  0562  1003               	clrc
  1636  0563  0DF0               	rlf	___lldiv@divisor,f
  1637  0564  0DF1               	rlf	___lldiv@divisor+1,f
  1638  0565  0DF2               	rlf	___lldiv@divisor+2,f
  1639  0566  0DF3               	rlf	___lldiv@divisor+3,f
  1640  0567  0BF8               	decfsz	??___lldiv,f
  1641  0568  2D62               	goto	u735
  1642  0569  3001               	movlw	1
  1643  056A  00F8               	movwf	??___lldiv
  1644  056B  0878               	movf	??___lldiv,w
  1645  056C  07FD               	addwf	___lldiv@counter,f
  1646  056D  2D5E               	goto	l1247
  1647  056E                     l1249:	
  1648  056E  3001               	movlw	1
  1649  056F  00F8               	movwf	??___lldiv
  1650  0570                     u755:	
  1651  0570  1003               	clrc
  1652  0571  0DF9               	rlf	___lldiv@quotient,f
  1653  0572  0DFA               	rlf	___lldiv@quotient+1,f
  1654  0573  0DFB               	rlf	___lldiv@quotient+2,f
  1655  0574  0DFC               	rlf	___lldiv@quotient+3,f
  1656  0575  0BF8               	decfsz	??___lldiv,f
  1657  0576  2D70               	goto	u755
  1658  0577  0873               	movf	___lldiv@divisor+3,w
  1659  0578  0277               	subwf	___lldiv@dividend+3,w
  1660  0579  1D03               	skipz
  1661  057A  2D85               	goto	u765
  1662  057B  0872               	movf	___lldiv@divisor+2,w
  1663  057C  0276               	subwf	___lldiv@dividend+2,w
  1664  057D  1D03               	skipz
  1665  057E  2D85               	goto	u765
  1666  057F  0871               	movf	___lldiv@divisor+1,w
  1667  0580  0275               	subwf	___lldiv@dividend+1,w
  1668  0581  1D03               	skipz
  1669  0582  2D85               	goto	u765
  1670  0583  0870               	movf	___lldiv@divisor,w
  1671  0584  0274               	subwf	___lldiv@dividend,w
  1672  0585                     u765:	
  1673  0585  1C03               	skipc
  1674  0586  2D96               	goto	l1257
  1675  0587  0870               	movf	___lldiv@divisor,w
  1676  0588  02F4               	subwf	___lldiv@dividend,f
  1677  0589  0871               	movf	___lldiv@divisor+1,w
  1678  058A  1C03               	skipc
  1679  058B  0F71               	incfsz	___lldiv@divisor+1,w
  1680  058C  02F5               	subwf	___lldiv@dividend+1,f
  1681  058D  0872               	movf	___lldiv@divisor+2,w
  1682  058E  1C03               	skipc
  1683  058F  0F72               	incfsz	___lldiv@divisor+2,w
  1684  0590  02F6               	subwf	___lldiv@dividend+2,f
  1685  0591  0873               	movf	___lldiv@divisor+3,w
  1686  0592  1C03               	skipc
  1687  0593  0F73               	incfsz	___lldiv@divisor+3,w
  1688  0594  02F7               	subwf	___lldiv@dividend+3,f
  1689  0595  1479               	bsf	___lldiv@quotient,0
  1690  0596                     l1257:	
  1691  0596  3001               	movlw	1
  1692  0597                     u775:	
  1693  0597  1003               	clrc
  1694  0598  0CF3               	rrf	___lldiv@divisor+3,f
  1695  0599  0CF2               	rrf	___lldiv@divisor+2,f
  1696  059A  0CF1               	rrf	___lldiv@divisor+1,f
  1697  059B  0CF0               	rrf	___lldiv@divisor,f
  1698  059C  3EFF               	addlw	-1
  1699  059D  1D03               	skipz
  1700  059E  2D97               	goto	u775
  1701  059F  3001               	movlw	1
  1702  05A0  02FD               	subwf	___lldiv@counter,f
  1703  05A1  1D03               	btfss	3,2
  1704  05A2  2D6E               	goto	l1249
  1705  05A3                     l1261:	
  1706  05A3  087C               	movf	___lldiv@quotient+3,w
  1707  05A4  00F3               	movwf	?___lldiv+3
  1708  05A5  087B               	movf	___lldiv@quotient+2,w
  1709  05A6  00F2               	movwf	?___lldiv+2
  1710  05A7  087A               	movf	___lldiv@quotient+1,w
  1711  05A8  00F1               	movwf	?___lldiv+1
  1712  05A9  0879               	movf	___lldiv@quotient,w
  1713  05AA  00F0               	movwf	?___lldiv
  1714  05AB  0008               	return
  1715  05AC                     __end_of___lldiv:	
  1716                           
  1717                           	psect	text4
  1718  02AC                     __ptext4:	
  1719 ;; *************** function ___bmul *****************
  1720 ;; Defined at:
  1721 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  multiplier      1    wreg     unsigned char 
  1724 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  multiplier      1    3[BANK0 ] unsigned char 
  1727 ;;  product         1    2[BANK0 ] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      unsigned char 
  1730 ;; Registers used:
  1731 ;;		wreg, status,2, status,0
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1737 ;;      Params:         0       1       0       0       0
  1738 ;;      Locals:         0       2       0       0       0
  1739 ;;      Temps:          0       1       0       0       0
  1740 ;;      Totals:         0       4       0       0       0
  1741 ;;Total ram usage:        4 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_LCD_DisplayDecimalNumber
  1747 ;;		_LCD_Printf
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           
  1752                           ;psect for function ___bmul
  1753  02AC                     ___bmul:	
  1754                           
  1755                           ;incstack = 0
  1756                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1757                           ;___bmul@multiplier stored from wreg
  1758  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1759  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  1760  02AE  00A3               	movwf	___bmul@multiplier
  1761  02AF  01A2               	clrf	___bmul@product
  1762  02B0                     l1227:	
  1763  02B0  1C23               	btfss	___bmul@multiplier,0
  1764  02B1  2AB6               	goto	l1231
  1765  02B2  0820               	movf	___bmul@multiplicand,w
  1766  02B3  00A1               	movwf	??___bmul
  1767  02B4  0821               	movf	??___bmul,w
  1768  02B5  07A2               	addwf	___bmul@product,f
  1769  02B6                     l1231:	
  1770  02B6  1003               	clrc
  1771  02B7  0DA0               	rlf	___bmul@multiplicand,f
  1772  02B8  1003               	clrc
  1773  02B9  0CA3               	rrf	___bmul@multiplier,f
  1774  02BA  08A3               	movf	___bmul@multiplier,f
  1775  02BB  1D03               	skipz
  1776  02BC  2AB0               	goto	l1227
  1777  02BD  0822               	movf	___bmul@product,w
  1778  02BE  0008               	return
  1779  02BF                     __end_of___bmul:	
  1780                           
  1781                           	psect	text5
  1782  032D                     __ptext5:	
  1783 ;; *************** function _LCD_DisplayChar *****************
  1784 ;; Defined at:
  1785 ;;		line 309 in file "lcd.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  var_lcdData_    1    wreg     unsigned char 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  var_lcdData_    1    8[COMMON] unsigned char 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;		None               void
  1792 ;; Registers used:
  1793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1799 ;;      Params:         0       0       0       0       0
  1800 ;;      Locals:         1       0       0       0       0
  1801 ;;      Temps:          1       0       0       0       0
  1802 ;;      Totals:         2       0       0       0       0
  1803 ;;Total ram usage:        2 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    4
  1806 ;; This function calls:
  1807 ;;		_LCD_GoToNextLine
  1808 ;;		_lcd_DataWrite
  1809 ;; This function is called by:
  1810 ;;		_LCD_DisplayDecimalNumber
  1811 ;;		_LCD_Printf
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           
  1816                           ;psect for function _LCD_DisplayChar
  1817  032D                     _LCD_DisplayChar:	
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _LCD_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1821                           ;LCD_DisplayChar@var_lcdData_u8 stored from wreg
  1822  032D  00F8               	movwf	LCD_DisplayChar@var_lcdData_u8
  1823                           
  1824                           ;lcd.c: 311: if((VAR_LcdTrackCursorPos_U8>=STK_LCDConfig.mvar_MaxSupportedChars_U8) || (
      +                          var_lcdData_u8=='\n'))
  1825  032E  1283               	bcf	3,5	;RP0=0, select bank0
  1826  032F  1303               	bcf	3,6	;RP1=0, select bank0
  1827  0330  085B               	movf	_STK_LCDConfig+1,w
  1828  0331  025D               	subwf	_VAR_LcdTrackCursorPos_U8,w
  1829  0332  1803               	skipnc
  1830  0333  2B38               	goto	l1217
  1831  0334  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1832  0335  3A0A               	xorlw	10
  1833  0336  1D03               	skipz
  1834  0337  2B3D               	goto	l1219
  1835  0338                     l1217:	
  1836                           
  1837                           ;lcd.c: 312: {
  1838                           ;lcd.c: 315: LCD_GoToNextLine();
  1839  0338  120A  118A  22E8  120A  118A  	fcall	_LCD_GoToNextLine
  1840  033D                     l1219:	
  1841                           
  1842                           ;lcd.c: 316: }
  1843                           ;lcd.c: 317: if(var_lcdData_u8!='\n')
  1844  033D  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1845  033E  3A0A               	xorlw	10
  1846  033F  1903               	skipnz
  1847  0340  0008               	return
  1848                           
  1849                           ;lcd.c: 318: {
  1850                           ;lcd.c: 320: lcd_DataWrite(var_lcdData_u8);
  1851  0341  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1852  0342  120A  118A  23CE   	fcall	_lcd_DataWrite
  1853                           
  1854                           ;lcd.c: 321: VAR_LcdTrackCursorPos_U8++;
  1855  0345  3001               	movlw	1
  1856  0346  00F7               	movwf	??_LCD_DisplayChar
  1857  0347  0877               	movf	??_LCD_DisplayChar,w
  1858  0348  1283               	bcf	3,5	;RP0=0, select bank0
  1859  0349  1303               	bcf	3,6	;RP1=0, select bank0
  1860  034A  07DD               	addwf	_VAR_LcdTrackCursorPos_U8,f
  1861  034B  0008               	return
  1862  034C                     __end_of_LCD_DisplayChar:	
  1863                           
  1864                           	psect	text6
  1865  03CE                     __ptext6:	
  1866 ;; *************** function _lcd_DataWrite *****************
  1867 ;; Defined at:
  1868 ;;		line 839 in file "lcd.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  dat             1    wreg     unsigned char 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  dat             1    5[COMMON] unsigned char 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, status,2, status,0, pclath, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         0       0       0       0       0
  1883 ;;      Locals:         1       0       0       0       0
  1884 ;;      Temps:          1       0       0       0       0
  1885 ;;      Totals:         2       0       0       0       0
  1886 ;;Total ram usage:        2 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    2
  1889 ;; This function calls:
  1890 ;;		_lcd_BusyCheck
  1891 ;;		_lcd_SendDataSignals
  1892 ;;		_lcd_SendNibble
  1893 ;; This function is called by:
  1894 ;;		_LCD_DisplayChar
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           
  1899                           ;psect for function _lcd_DataWrite
  1900  03CE                     _lcd_DataWrite:	
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _lcd_DataWrite: [wreg+status,2+status,0+pclath+cstack]
  1904                           ;lcd_DataWrite@dat stored from wreg
  1905  03CE  00F5               	movwf	lcd_DataWrite@dat
  1906                           
  1907                           ;lcd.c: 841: lcd_BusyCheck();
  1908  03CF  120A  118A  24A2  120A  118A  	fcall	_lcd_BusyCheck
  1909                           
  1910                           ;lcd.c: 842: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  1911  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  1912  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  1913  03D6  085C               	movf	_STK_LCDConfig+2,w
  1914  03D7  3A08               	xorlw	8
  1915  03D8  1D03               	skipz
  1916  03D9  2BE0               	goto	l1193
  1917                           
  1918                           ;lcd.c: 843: {
  1919                           ;lcd.c: 844: PORTB = dat;
  1920  03DA  0875               	movf	lcd_DataWrite@dat,w
  1921  03DB  0086               	movwf	6	;volatile
  1922                           
  1923                           ;lcd.c: 845: lcd_SendDataSignals();
  1924  03DC  120A  118A  22FE   	fcall	_lcd_SendDataSignals
  1925                           
  1926                           ;lcd.c: 846: }
  1927  03DF  0008               	return
  1928  03E0                     l1193:	
  1929                           
  1930                           ;lcd.c: 847: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  1931  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1932  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1933  03E2  085C               	movf	_STK_LCDConfig+2,w
  1934  03E3  3A04               	xorlw	4
  1935  03E4  1D03               	skipz
  1936  03E5  0008               	return
  1937                           
  1938                           ;lcd.c: 848: {
  1939                           ;lcd.c: 849: lcd_SendNibble(dat);
  1940  03E6  0875               	movf	lcd_DataWrite@dat,w
  1941  03E7  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  1942                           
  1943                           ;lcd.c: 850: lcd_SendDataSignals();
  1944  03EC  120A  118A  22FE  120A  118A  	fcall	_lcd_SendDataSignals
  1945                           
  1946                           ;lcd.c: 852: lcd_SendNibble(dat << 4);
  1947  03F1  0875               	movf	lcd_DataWrite@dat,w
  1948  03F2  00F4               	movwf	??_lcd_DataWrite
  1949  03F3  3003               	movlw	3
  1950  03F4                     u645:	
  1951  03F4  1003               	clrc
  1952  03F5  0DF4               	rlf	??_lcd_DataWrite,f
  1953  03F6  3EFF               	addlw	-1
  1954  03F7  1D03               	skipz
  1955  03F8  2BF4               	goto	u645
  1956  03F9  1003               	clrc
  1957  03FA  0D74               	rlf	??_lcd_DataWrite,w
  1958  03FB  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  1959                           
  1960                           ;lcd.c: 853: lcd_SendDataSignals();
  1961  0400  120A  118A  22FE   	fcall	_lcd_SendDataSignals
  1962  0403  0008               	return
  1963  0404                     __end_of_lcd_DataWrite:	
  1964                           
  1965                           	psect	text7
  1966  02FE                     __ptext7:	
  1967 ;; *************** function _lcd_SendDataSignals *****************
  1968 ;; Defined at:
  1969 ;;		line 994 in file "lcd.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;		None
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;		None
  1974 ;; Return value:  Size  Location     Type
  1975 ;;		None               void
  1976 ;; Registers used:
  1977 ;;		wreg, status,2, status,0, pclath, cstack
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1983 ;;      Params:         0       0       0       0       0
  1984 ;;      Locals:         0       0       0       0       0
  1985 ;;      Temps:          1       0       0       0       0
  1986 ;;      Totals:         1       0       0       0       0
  1987 ;;Total ram usage:        1 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    1
  1990 ;; This function calls:
  1991 ;;		_DELAY_us
  1992 ;; This function is called by:
  1993 ;;		_lcd_DataWrite
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           
  1998                           ;psect for function _lcd_SendDataSignals
  1999  02FE                     _lcd_SendDataSignals:	
  2000                           
  2001                           ;lcd.c: 996: (((PORTD)) |= (1<<((0))));
  2002                           
  2003                           ;incstack = 0
  2004                           ; Regs used in _lcd_SendDataSignals: [wreg+status,2+status,0+pclath+cstack]
  2005  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  2006  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  2007  0300  1408               	bsf	8,0	;volatile
  2008                           
  2009                           ;lcd.c: 998: (((PORTD)) &= ~(1<<((1))));
  2010  0301  30FD               	movlw	253
  2011  0302  00F2               	movwf	??_lcd_SendDataSignals
  2012  0303  0872               	movf	??_lcd_SendDataSignals,w
  2013  0304  0588               	andwf	8,f	;volatile
  2014                           
  2015                           ;lcd.c: 1000: (((PORTD)) |= (1<<((2))));
  2016  0305  1508               	bsf	8,2	;volatile
  2017                           
  2018                           ;lcd.c: 1001: DELAY_us(10);
  2019  0306  300A               	movlw	10
  2020  0307  00F0               	movwf	DELAY_us@us_count
  2021  0308  3000               	movlw	0
  2022  0309  00F1               	movwf	DELAY_us@us_count+1
  2023  030A  120A  118A  2296   	fcall	_DELAY_us
  2024                           
  2025                           ;lcd.c: 1002: (((PORTD)) &= ~(1<<((2))));
  2026  030D  30FB               	movlw	251
  2027  030E  00F2               	movwf	??_lcd_SendDataSignals
  2028  030F  0872               	movf	??_lcd_SendDataSignals,w
  2029  0310  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0311  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0312  0588               	andwf	8,f	;volatile
  2032  0313  0008               	return
  2033  0314                     __end_of_lcd_SendDataSignals:	
  2034                           
  2035                           	psect	text8
  2036  02E8                     __ptext8:	
  2037 ;; *************** function _LCD_GoToNextLine *****************
  2038 ;; Defined at:
  2039 ;;		line 208 in file "lcd.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;		None
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;		None
  2044 ;; Return value:  Size  Location     Type
  2045 ;;		None               void
  2046 ;; Registers used:
  2047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2053 ;;      Params:         0       0       0       0       0
  2054 ;;      Locals:         0       0       0       0       0
  2055 ;;      Temps:          1       0       0       0       0
  2056 ;;      Totals:         1       0       0       0       0
  2057 ;;Total ram usage:        1 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    3
  2060 ;; This function calls:
  2061 ;;		_LCD_CmdWrite
  2062 ;; This function is called by:
  2063 ;;		_main
  2064 ;;		_LCD_DisplayChar
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           
  2069                           ;psect for function _LCD_GoToNextLine
  2070  02E8                     _LCD_GoToNextLine:	
  2071                           
  2072                           ;lcd.c: 212: VAR_LcdTrackLineNum_U8++;
  2073                           
  2074                           ;incstack = 0
  2075                           ; Regs used in _LCD_GoToNextLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2076  02E8  3001               	movlw	1
  2077  02E9  00F6               	movwf	??_LCD_GoToNextLine
  2078  02EA  0876               	movf	??_LCD_GoToNextLine,w
  2079  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2080  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  2081  02ED  07DE               	addwf	_VAR_LcdTrackLineNum_U8,f
  2082                           
  2083                           ;lcd.c: 213: VAR_LcdTrackCursorPos_U8 = 0x00;
  2084  02EE  01DD               	clrf	_VAR_LcdTrackCursorPos_U8
  2085                           
  2086                           ;lcd.c: 214: if(VAR_LcdTrackLineNum_U8 > STK_LCDConfig.mvar_MaxSupportedLines_U8)
  2087  02EF  085E               	movf	_VAR_LcdTrackLineNum_U8,w
  2088  02F0  025A               	subwf	_STK_LCDConfig,w
  2089  02F1  1803               	skipnc
  2090  02F2  2AF5               	goto	l1183
  2091                           
  2092                           ;lcd.c: 215: VAR_LcdTrackLineNum_U8 = 0x01;
  2093  02F3  01DE               	clrf	_VAR_LcdTrackLineNum_U8
  2094  02F4  0ADE               	incf	_VAR_LcdTrackLineNum_U8,f
  2095  02F5                     l1183:	
  2096                           
  2097                           ;lcd.c: 216: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[VAR_LcdTrackLineNum_U8]);
  2098  02F5  085E               	movf	_VAR_LcdTrackLineNum_U8,w
  2099  02F6  3E55               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
  2100  02F7  0084               	movwf	4
  2101  02F8  1383               	bcf	3,7	;select IRP bank0
  2102  02F9  0800               	movf	0,w
  2103  02FA  120A  118A  2398   	fcall	_LCD_CmdWrite
  2104  02FD  0008               	return
  2105  02FE                     __end_of_LCD_GoToNextLine:	
  2106                           
  2107                           	psect	text9
  2108  0453                     __ptext9:	
  2109 ;; *************** function _LCD_Init *****************
  2110 ;; Defined at:
  2111 ;;		line 112 in file "lcd.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  var_lcdMode_    1    wreg     unsigned char 
  2114 ;;  var_lcdNoOfL    1    8[COMMON] unsigned char 
  2115 ;;  var_MaxChars    1    9[COMMON] unsigned char 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;  var_lcdMode_    1   11[COMMON] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;		None               void
  2120 ;; Registers used:
  2121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2127 ;;      Params:         2       0       0       0       0
  2128 ;;      Locals:         1       0       0       0       0
  2129 ;;      Temps:          1       0       0       0       0
  2130 ;;      Totals:         4       0       0       0       0
  2131 ;;Total ram usage:        4 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    5
  2134 ;; This function calls:
  2135 ;;		_DELAY_ms
  2136 ;;		_LCD_Clear
  2137 ;;		_LCD_CmdWrite
  2138 ;;		_lcd_Reset
  2139 ;; This function is called by:
  2140 ;;		_main
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           
  2145                           ;psect for function _LCD_Init
  2146  0453                     _LCD_Init:	
  2147                           
  2148                           ;incstack = 0
  2149                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2150                           ;LCD_Init@var_lcdMode_u8 stored from wreg
  2151  0453  00FB               	movwf	LCD_Init@var_lcdMode_u8
  2152                           
  2153                           ;lcd.c: 116: TRISB = 0x00u;
  2154  0454  1683               	bsf	3,5	;RP0=1, select bank1
  2155  0455  1303               	bcf	3,6	;RP1=0, select bank1
  2156  0456  0186               	clrf	6	;volatile
  2157                           
  2158                           ;lcd.c: 117: TRISD = 0x00u;
  2159  0457  0188               	clrf	8	;volatile
  2160                           
  2161                           ;lcd.c: 118: STK_LCDConfig.mvar_LcdMode_U8 = var_lcdMode_u8;
  2162  0458  087B               	movf	LCD_Init@var_lcdMode_u8,w
  2163  0459  00FA               	movwf	??_LCD_Init
  2164  045A  087A               	movf	??_LCD_Init,w
  2165  045B  1283               	bcf	3,5	;RP0=0, select bank0
  2166  045C  1303               	bcf	3,6	;RP1=0, select bank0
  2167  045D  00DC               	movwf	_STK_LCDConfig+2
  2168                           
  2169                           ;lcd.c: 119: STK_LCDConfig.mvar_MaxSupportedChars_U8 = var_MaxCharsPerLine_u8;
  2170  045E  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  2171  045F  00FA               	movwf	??_LCD_Init
  2172  0460  087A               	movf	??_LCD_Init,w
  2173  0461  00DB               	movwf	_STK_LCDConfig+1
  2174                           
  2175                           ;lcd.c: 120: STK_LCDConfig.mvar_MaxSupportedLines_U8 = var_lcdNoOfLines_u8;
  2176  0462  0878               	movf	LCD_Init@var_lcdNoOfLines_u8,w
  2177  0463  00FA               	movwf	??_LCD_Init
  2178  0464  087A               	movf	??_LCD_Init,w
  2179  0465  00DA               	movwf	_STK_LCDConfig
  2180                           
  2181                           ;lcd.c: 121: if(var_lcdNoOfLines_u8 > mENUM_LcdLineTwo)
  2182  0466  3003               	movlw	3
  2183  0467  0278               	subwf	LCD_Init@var_lcdNoOfLines_u8,w
  2184  0468  1C03               	skipc
  2185  0469  2C76               	goto	l1323
  2186                           
  2187                           ;lcd.c: 122: {
  2188                           ;lcd.c: 123: ARR_LcdLineNumAddress_U8[mENUM_LcdLineThree] = 0x90 + (var_MaxCharsPerLine_
      +                          u8 & 0x0fu);
  2189  046A  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  2190  046B  390F               	andlw	15
  2191  046C  3E90               	addlw	144
  2192  046D  00FA               	movwf	??_LCD_Init
  2193  046E  087A               	movf	??_LCD_Init,w
  2194  046F  00D8               	movwf	_ARR_LcdLineNumAddress_U8+3
  2195                           
  2196                           ;lcd.c: 124: ARR_LcdLineNumAddress_U8[mENUM_LcdLineFour] = 0xd0 + (var_MaxCharsPerLine_u
      +                          8 & 0x0fu);
  2197  0470  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  2198  0471  390F               	andlw	15
  2199  0472  3ED0               	addlw	208
  2200  0473  00FA               	movwf	??_LCD_Init
  2201  0474  087A               	movf	??_LCD_Init,w
  2202  0475  00D9               	movwf	_ARR_LcdLineNumAddress_U8+4
  2203  0476                     l1323:	
  2204                           
  2205                           ;lcd.c: 125: }
  2206                           ;lcd.c: 127: DELAY_ms(100);
  2207  0476  3064               	movlw	100
  2208  0477  00F2               	movwf	DELAY_ms@ms_count
  2209  0478  3000               	movlw	0
  2210  0479  00F3               	movwf	DELAY_ms@ms_count+1
  2211  047A  120A  118A  22BF  120A  118A  	fcall	_DELAY_ms
  2212                           
  2213                           ;lcd.c: 129: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  2214  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0481  085C               	movf	_STK_LCDConfig+2,w
  2217  0482  3A08               	xorlw	8
  2218  0483  1D03               	skipz
  2219  0484  2C87               	goto	l1329
  2220                           
  2221                           ;lcd.c: 130: {
  2222                           ;lcd.c: 131: LCD_CmdWrite(0x38u);
  2223  0485  3038               	movlw	56
  2224  0486  2C93               	goto	L7
  2225  0487                     l1329:	
  2226                           ;lcd.c: 132: }
  2227                           
  2228                           
  2229                           ;lcd.c: 133: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  2230  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0489  085C               	movf	_STK_LCDConfig+2,w
  2233  048A  3A04               	xorlw	4
  2234  048B  1D03               	skipz
  2235  048C  2C98               	goto	l108
  2236                           
  2237                           ;lcd.c: 134: {
  2238                           ;lcd.c: 135: lcd_Reset();
  2239  048D  120A  118A  2404  120A  118A  	fcall	_lcd_Reset
  2240                           
  2241                           ;lcd.c: 136: LCD_CmdWrite(0x28u);
  2242  0492  3028               	movlw	40
  2243  0493                     L7:	
  2244  0493  120A  118A  2398  120A  118A  	fcall	_LCD_CmdWrite
  2245  0498                     l108:	
  2246                           
  2247                           ;lcd.c: 137: }
  2248                           ;lcd.c: 139: LCD_CmdWrite(0x0Eu);
  2249  0498  300E               	movlw	14
  2250  0499  120A  118A  2398  120A  118A  	fcall	_LCD_CmdWrite
  2251                           
  2252                           ;lcd.c: 140: LCD_Clear();
  2253  049E  120A  118A  22A1   	fcall	_LCD_Clear
  2254  04A1  0008               	return
  2255  04A2                     __end_of_LCD_Init:	
  2256                           
  2257                           	psect	text10
  2258  0404                     __ptext10:	
  2259 ;; *************** function _lcd_Reset *****************
  2260 ;; Defined at:
  2261 ;;		line 923 in file "lcd.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;		None               void
  2268 ;; Registers used:
  2269 ;;		wreg, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2275 ;;      Params:         0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0
  2278 ;;      Totals:         0       0       0       0       0
  2279 ;;Total ram usage:        0 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    2
  2282 ;; This function calls:
  2283 ;;		_DELAY_ms
  2284 ;;		_DELAY_us
  2285 ;;		_lcd_SendCmdSignals
  2286 ;;		_lcd_SendNibble
  2287 ;; This function is called by:
  2288 ;;		_LCD_Init
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           
  2293                           ;psect for function _lcd_Reset
  2294  0404                     _lcd_Reset:	
  2295                           
  2296                           ;lcd.c: 926: lcd_SendNibble(0x30);
  2297                           
  2298                           ;incstack = 0
  2299                           ; Regs used in _lcd_Reset: [wreg+status,2+status,0+pclath+cstack]
  2300  0404  3030               	movlw	48
  2301  0405  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  2302                           
  2303                           ;lcd.c: 927: lcd_SendCmdSignals();
  2304  040A  120A  118A  2314  120A  118A  	fcall	_lcd_SendCmdSignals
  2305                           
  2306                           ;lcd.c: 928: DELAY_ms(100);
  2307  040F  3064               	movlw	100
  2308  0410  00F2               	movwf	DELAY_ms@ms_count
  2309  0411  3000               	movlw	0
  2310  0412  00F3               	movwf	DELAY_ms@ms_count+1
  2311  0413  120A  118A  22BF  120A  118A  	fcall	_DELAY_ms
  2312                           
  2313                           ;lcd.c: 929: lcd_SendNibble(0x30);
  2314  0418  3030               	movlw	48
  2315  0419  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  2316                           
  2317                           ;lcd.c: 930: lcd_SendCmdSignals();
  2318  041E  120A  118A  2314  120A  118A  	fcall	_lcd_SendCmdSignals
  2319                           
  2320                           ;lcd.c: 931: DELAY_us(200);
  2321  0423  30C8               	movlw	200
  2322  0424  00F0               	movwf	DELAY_us@us_count
  2323  0425  3000               	movlw	0
  2324  0426  00F1               	movwf	DELAY_us@us_count+1
  2325  0427  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  2326                           
  2327                           ;lcd.c: 932: lcd_SendNibble(0x30);
  2328  042C  3030               	movlw	48
  2329  042D  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  2330                           
  2331                           ;lcd.c: 933: lcd_SendCmdSignals();
  2332  0432  120A  118A  2314  120A  118A  	fcall	_lcd_SendCmdSignals
  2333                           
  2334                           ;lcd.c: 934: DELAY_us(200);
  2335  0437  30C8               	movlw	200
  2336  0438  00F0               	movwf	DELAY_us@us_count
  2337  0439  3000               	movlw	0
  2338  043A  00F1               	movwf	DELAY_us@us_count+1
  2339  043B  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  2340                           
  2341                           ;lcd.c: 935: lcd_SendNibble(0x20);
  2342  0440  3020               	movlw	32
  2343  0441  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  2344                           
  2345                           ;lcd.c: 936: lcd_SendCmdSignals();
  2346  0446  120A  118A  2314  120A  118A  	fcall	_lcd_SendCmdSignals
  2347                           
  2348                           ;lcd.c: 937: DELAY_us(200);
  2349  044B  30C8               	movlw	200
  2350  044C  00F0               	movwf	DELAY_us@us_count
  2351  044D  3000               	movlw	0
  2352  044E  00F1               	movwf	DELAY_us@us_count+1
  2353  044F  120A  118A  2296   	fcall	_DELAY_us
  2354  0452  0008               	return
  2355  0453                     __end_of_lcd_Reset:	
  2356                           
  2357                           	psect	text11
  2358  02BF                     __ptext11:	
  2359 ;; *************** function _DELAY_ms *****************
  2360 ;; Defined at:
  2361 ;;		line 76 in file "delay.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  ms_count        2    2[COMMON] unsigned int 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;		None
  2366 ;; Return value:  Size  Location     Type
  2367 ;;		None               void
  2368 ;; Registers used:
  2369 ;;		wreg, status,2, status,0, pclath, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2375 ;;      Params:         2       0       0       0       0
  2376 ;;      Locals:         0       0       0       0       0
  2377 ;;      Temps:          0       0       0       0       0
  2378 ;;      Totals:         2       0       0       0       0
  2379 ;;Total ram usage:        2 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    1
  2382 ;; This function calls:
  2383 ;;		_DELAY_us
  2384 ;; This function is called by:
  2385 ;;		_LCD_Init
  2386 ;;		_lcd_Reset
  2387 ;;		_DELAY_sec
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           
  2392                           ;psect for function _DELAY_ms
  2393  02BF                     _DELAY_ms:	
  2394  02BF                     l1211:	
  2395                           ;delay.c: 78: while(ms_count!=0)
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  2399                           
  2400  02BF  0873               	movf	DELAY_ms@ms_count+1,w
  2401  02C0  0472               	iorwf	DELAY_ms@ms_count,w
  2402  02C1  1903               	btfsc	3,2
  2403  02C2  0008               	return
  2404                           
  2405                           ;delay.c: 79: {
  2406                           ;delay.c: 80: DELAY_us(300u);
  2407  02C3  302C               	movlw	44
  2408  02C4  00F0               	movwf	DELAY_us@us_count
  2409  02C5  3001               	movlw	1
  2410  02C6  00F1               	movwf	DELAY_us@us_count+1
  2411  02C7  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  2412                           
  2413                           ;delay.c: 81: ms_count--;
  2414  02CC  3001               	movlw	1
  2415  02CD  02F2               	subwf	DELAY_ms@ms_count,f
  2416  02CE  3000               	movlw	0
  2417  02CF  1C03               	skipc
  2418  02D0  03F3               	decf	DELAY_ms@ms_count+1,f
  2419  02D1  02F3               	subwf	DELAY_ms@ms_count+1,f
  2420  02D2  2ABF               	goto	l1211
  2421  02D3                     __end_of_DELAY_ms:	
  2422                           
  2423                           	psect	text12
  2424  02A1                     __ptext12:	
  2425 ;; *************** function _LCD_Clear *****************
  2426 ;; Defined at:
  2427 ;;		line 154 in file "lcd.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;		None
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;		None
  2432 ;; Return value:  Size  Location     Type
  2433 ;;		None               void
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2441 ;;      Params:         0       0       0       0       0
  2442 ;;      Locals:         0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0
  2444 ;;      Totals:         0       0       0       0       0
  2445 ;;Total ram usage:        0 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    4
  2448 ;; This function calls:
  2449 ;;		_LCD_CmdWrite
  2450 ;;		_LCD_GoToLine
  2451 ;; This function is called by:
  2452 ;;		_LCD_Init
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           
  2457                           ;psect for function _LCD_Clear
  2458  02A1                     _LCD_Clear:	
  2459                           
  2460                           ;lcd.c: 156: LCD_CmdWrite(0x01u);
  2461                           
  2462                           ;incstack = 0
  2463                           ; Regs used in _LCD_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2464  02A1  3001               	movlw	1
  2465  02A2  120A  118A  2398  120A  118A  	fcall	_LCD_CmdWrite
  2466                           
  2467                           ;lcd.c: 157: LCD_GoToLine(mENUM_LcdLineOne);
  2468  02A7  3001               	movlw	1
  2469  02A8  120A  118A  22D3   	fcall	_LCD_GoToLine
  2470  02AB  0008               	return
  2471  02AC                     __end_of_LCD_Clear:	
  2472                           
  2473                           	psect	text13
  2474  02D3                     __ptext13:	
  2475 ;; *************** function _LCD_GoToLine *****************
  2476 ;; Defined at:
  2477 ;;		line 181 in file "lcd.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  var_lineNumb    1    wreg     unsigned char 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  var_lineNumb    1    7[COMMON] unsigned char 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;		None               void
  2484 ;; Registers used:
  2485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2491 ;;      Params:         0       0       0       0       0
  2492 ;;      Locals:         1       0       0       0       0
  2493 ;;      Temps:          1       0       0       0       0
  2494 ;;      Totals:         2       0       0       0       0
  2495 ;;Total ram usage:        2 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    3
  2498 ;; This function calls:
  2499 ;;		_LCD_CmdWrite
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;;		_LCD_Clear
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           
  2507                           ;psect for function _LCD_GoToLine
  2508  02D3                     _LCD_GoToLine:	
  2509                           
  2510                           ;incstack = 0
  2511                           ; Regs used in _LCD_GoToLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2512                           ;LCD_GoToLine@var_lineNumber_u8 stored from wreg
  2513  02D3  00F7               	movwf	LCD_GoToLine@var_lineNumber_u8
  2514                           
  2515                           ;lcd.c: 183: if(var_lineNumber_u8 <= STK_LCDConfig.mvar_MaxSupportedLines_U8)
  2516  02D4  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  2517  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2518  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  2519  02D7  025A               	subwf	_STK_LCDConfig,w
  2520  02D8  1C03               	skipc
  2521  02D9  0008               	return
  2522                           
  2523                           ;lcd.c: 184: {
  2524                           ;lcd.c: 187: VAR_LcdTrackCursorPos_U8 = 0x00;
  2525  02DA  01DD               	clrf	_VAR_LcdTrackCursorPos_U8
  2526                           
  2527                           ;lcd.c: 188: VAR_LcdTrackLineNum_U8 = var_lineNumber_u8;
  2528  02DB  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  2529  02DC  00F6               	movwf	??_LCD_GoToLine
  2530  02DD  0876               	movf	??_LCD_GoToLine,w
  2531  02DE  00DE               	movwf	_VAR_LcdTrackLineNum_U8
  2532                           
  2533                           ;lcd.c: 189: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[var_lineNumber_u8]);
  2534  02DF  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  2535  02E0  3E55               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
  2536  02E1  0084               	movwf	4
  2537  02E2  1383               	bcf	3,7	;select IRP bank0
  2538  02E3  0800               	movf	0,w
  2539  02E4  120A  118A  2398   	fcall	_LCD_CmdWrite
  2540  02E7  0008               	return
  2541  02E8                     __end_of_LCD_GoToLine:	
  2542                           
  2543                           	psect	text14
  2544  0398                     __ptext14:	
  2545 ;; *************** function _LCD_CmdWrite *****************
  2546 ;; Defined at:
  2547 ;;		line 274 in file "lcd.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;  var_lcdCmd_u    1    wreg     unsigned char 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  var_lcdCmd_u    1    5[COMMON] unsigned char 
  2552 ;; Return value:  Size  Location     Type
  2553 ;;		None               void
  2554 ;; Registers used:
  2555 ;;		wreg, status,2, status,0, pclath, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2561 ;;      Params:         0       0       0       0       0
  2562 ;;      Locals:         1       0       0       0       0
  2563 ;;      Temps:          1       0       0       0       0
  2564 ;;      Totals:         2       0       0       0       0
  2565 ;;Total ram usage:        2 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    2
  2568 ;; This function calls:
  2569 ;;		_lcd_BusyCheck
  2570 ;;		_lcd_SendCmdSignals
  2571 ;;		_lcd_SendNibble
  2572 ;; This function is called by:
  2573 ;;		_LCD_Init
  2574 ;;		_LCD_Clear
  2575 ;;		_LCD_GoToLine
  2576 ;;		_LCD_GoToNextLine
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           
  2581                           ;psect for function _LCD_CmdWrite
  2582  0398                     _LCD_CmdWrite:	
  2583                           
  2584                           ;incstack = 0
  2585                           ; Regs used in _LCD_CmdWrite: [wreg+status,2+status,0+pclath+cstack]
  2586                           ;LCD_CmdWrite@var_lcdCmd_u8 stored from wreg
  2587  0398  00F5               	movwf	LCD_CmdWrite@var_lcdCmd_u8
  2588                           
  2589                           ;lcd.c: 276: lcd_BusyCheck();
  2590  0399  120A  118A  24A2  120A  118A  	fcall	_lcd_BusyCheck
  2591                           
  2592                           ;lcd.c: 277: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  2593  039E  1283               	bcf	3,5	;RP0=0, select bank0
  2594  039F  1303               	bcf	3,6	;RP1=0, select bank0
  2595  03A0  085C               	movf	_STK_LCDConfig+2,w
  2596  03A1  3A08               	xorlw	8
  2597  03A2  1D03               	skipz
  2598  03A3  2BAA               	goto	l1161
  2599                           
  2600                           ;lcd.c: 278: {
  2601                           ;lcd.c: 280: PORTB = var_lcdCmd_u8;
  2602  03A4  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  2603  03A5  0086               	movwf	6	;volatile
  2604                           
  2605                           ;lcd.c: 281: lcd_SendCmdSignals();
  2606  03A6  120A  118A  2314   	fcall	_lcd_SendCmdSignals
  2607                           
  2608                           ;lcd.c: 282: }
  2609  03A9  0008               	return
  2610  03AA                     l1161:	
  2611                           
  2612                           ;lcd.c: 283: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  2613  03AA  1283               	bcf	3,5	;RP0=0, select bank0
  2614  03AB  1303               	bcf	3,6	;RP1=0, select bank0
  2615  03AC  085C               	movf	_STK_LCDConfig+2,w
  2616  03AD  3A04               	xorlw	4
  2617  03AE  1D03               	skipz
  2618  03AF  0008               	return
  2619                           
  2620                           ;lcd.c: 284: {
  2621                           ;lcd.c: 285: lcd_SendNibble(var_lcdCmd_u8);
  2622  03B0  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  2623  03B1  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  2624                           
  2625                           ;lcd.c: 286: lcd_SendCmdSignals();
  2626  03B6  120A  118A  2314  120A  118A  	fcall	_lcd_SendCmdSignals
  2627                           
  2628                           ;lcd.c: 288: lcd_SendNibble(var_lcdCmd_u8 << 4);
  2629  03BB  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  2630  03BC  00F4               	movwf	??_LCD_CmdWrite
  2631  03BD  3003               	movlw	3
  2632  03BE                     u605:	
  2633  03BE  1003               	clrc
  2634  03BF  0DF4               	rlf	??_LCD_CmdWrite,f
  2635  03C0  3EFF               	addlw	-1
  2636  03C1  1D03               	skipz
  2637  03C2  2BBE               	goto	u605
  2638  03C3  1003               	clrc
  2639  03C4  0D74               	rlf	??_LCD_CmdWrite,w
  2640  03C5  120A  118A  2372  120A  118A  	fcall	_lcd_SendNibble
  2641                           
  2642                           ;lcd.c: 289: lcd_SendCmdSignals();
  2643  03CA  120A  118A  2314   	fcall	_lcd_SendCmdSignals
  2644  03CD  0008               	return
  2645  03CE                     __end_of_LCD_CmdWrite:	
  2646                           
  2647                           	psect	text15
  2648  0372                     __ptext15:	
  2649 ;; *************** function _lcd_SendNibble *****************
  2650 ;; Defined at:
  2651 ;;		line 953 in file "lcd.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  var             1    wreg     unsigned char 
  2654 ;; Auto vars:     Size  Location     Type
  2655 ;;  var             1    1[COMMON] unsigned char 
  2656 ;; Return value:  Size  Location     Type
  2657 ;;		None               void
  2658 ;; Registers used:
  2659 ;;		wreg, status,2, status,0
  2660 ;; Tracked objects:
  2661 ;;		On entry : 0/0
  2662 ;;		On exit  : 0/0
  2663 ;;		Unchanged: 0/0
  2664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2665 ;;      Params:         0       0       0       0       0
  2666 ;;      Locals:         1       0       0       0       0
  2667 ;;      Temps:          1       0       0       0       0
  2668 ;;      Totals:         2       0       0       0       0
  2669 ;;Total ram usage:        2 bytes
  2670 ;; Hardware stack levels used:    1
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_LCD_CmdWrite
  2675 ;;		_lcd_DataWrite
  2676 ;;		_lcd_Reset
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           
  2681                           ;psect for function _lcd_SendNibble
  2682  0372                     _lcd_SendNibble:	
  2683                           
  2684                           ;incstack = 0
  2685                           ; Regs used in _lcd_SendNibble: [wreg+status,2+status,0]
  2686                           ;lcd_SendNibble@var stored from wreg
  2687  0372  00F1               	movwf	lcd_SendNibble@var
  2688                           
  2689                           ;lcd.c: 955: (((((var)&((1<<(4))))!=0u))? ((PORTB) |= (1<<(4))): ((PORTB) &= ~(1<<(4))))
      +                          ;
  2690  0373  1E71               	btfss	lcd_SendNibble@var,4
  2691  0374  2B79               	goto	l1133
  2692  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2693  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2694  0377  1606               	bsf	6,4	;volatile
  2695  0378  2B7F               	goto	l1135
  2696  0379                     l1133:	
  2697  0379  30EF               	movlw	239
  2698  037A  00F0               	movwf	??_lcd_SendNibble
  2699  037B  0870               	movf	??_lcd_SendNibble,w
  2700  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2701  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2702  037E  0586               	andwf	6,f	;volatile
  2703  037F                     l1135:	
  2704                           
  2705                           ;lcd.c: 956: (((((var)&((1<<(5))))!=0u))? ((PORTB) |= (1<<(5))): ((PORTB) &= ~(1<<(5))))
      +                          ;
  2706  037F  1EF1               	btfss	lcd_SendNibble@var,5
  2707  0380  2B83               	goto	l1139
  2708  0381  1686               	bsf	6,5	;volatile
  2709  0382  2B87               	goto	l1141
  2710  0383                     l1139:	
  2711  0383  30DF               	movlw	223
  2712  0384  00F0               	movwf	??_lcd_SendNibble
  2713  0385  0870               	movf	??_lcd_SendNibble,w
  2714  0386  0586               	andwf	6,f	;volatile
  2715  0387                     l1141:	
  2716                           
  2717                           ;lcd.c: 957: (((((var)&((1<<(6))))!=0u))? ((PORTB) |= (1<<(6))): ((PORTB) &= ~(1<<(6))))
      +                          ;
  2718  0387  1F71               	btfss	lcd_SendNibble@var,6
  2719  0388  2B8B               	goto	l1145
  2720  0389  1706               	bsf	6,6	;volatile
  2721  038A  2B8F               	goto	l1147
  2722  038B                     l1145:	
  2723  038B  30BF               	movlw	191
  2724  038C  00F0               	movwf	??_lcd_SendNibble
  2725  038D  0870               	movf	??_lcd_SendNibble,w
  2726  038E  0586               	andwf	6,f	;volatile
  2727  038F                     l1147:	
  2728                           
  2729                           ;lcd.c: 958: (((((var)&((1<<(7))))!=0u))? ((PORTB) |= (1<<(7))): ((PORTB) &= ~(1<<(7))))
      +                          ;
  2730  038F  1FF1               	btfss	lcd_SendNibble@var,7
  2731  0390  2B93               	goto	l1151
  2732  0391  1786               	bsf	6,7	;volatile
  2733  0392  0008               	return
  2734  0393                     l1151:	
  2735  0393  307F               	movlw	127
  2736  0394  00F0               	movwf	??_lcd_SendNibble
  2737  0395  0870               	movf	??_lcd_SendNibble,w
  2738  0396  0586               	andwf	6,f	;volatile
  2739  0397  0008               	return
  2740  0398                     __end_of_lcd_SendNibble:	
  2741                           
  2742                           	psect	text16
  2743  0314                     __ptext16:	
  2744 ;; *************** function _lcd_SendCmdSignals *****************
  2745 ;; Defined at:
  2746 ;;		line 972 in file "lcd.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;		None               void
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0, pclath, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2760 ;;      Params:         0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0
  2762 ;;      Temps:          1       0       0       0       0
  2763 ;;      Totals:         1       0       0       0       0
  2764 ;;Total ram usage:        1 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    1
  2767 ;; This function calls:
  2768 ;;		_DELAY_us
  2769 ;; This function is called by:
  2770 ;;		_LCD_CmdWrite
  2771 ;;		_lcd_Reset
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           
  2776                           ;psect for function _lcd_SendCmdSignals
  2777  0314                     _lcd_SendCmdSignals:	
  2778                           
  2779                           ;lcd.c: 974: (((PORTD)) &= ~(1<<((0))));
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _lcd_SendCmdSignals: [wreg+status,2+status,0+pclath+cstack]
  2783  0314  30FE               	movlw	254
  2784  0315  00F2               	movwf	??_lcd_SendCmdSignals
  2785  0316  0872               	movf	??_lcd_SendCmdSignals,w
  2786  0317  1283               	bcf	3,5	;RP0=0, select bank0
  2787  0318  1303               	bcf	3,6	;RP1=0, select bank0
  2788  0319  0588               	andwf	8,f	;volatile
  2789                           
  2790                           ;lcd.c: 976: (((PORTD)) &= ~(1<<((1))));
  2791  031A  30FD               	movlw	253
  2792  031B  00F2               	movwf	??_lcd_SendCmdSignals
  2793  031C  0872               	movf	??_lcd_SendCmdSignals,w
  2794  031D  0588               	andwf	8,f	;volatile
  2795                           
  2796                           ;lcd.c: 978: (((PORTD)) |= (1<<((2))));
  2797  031E  1508               	bsf	8,2	;volatile
  2798                           
  2799                           ;lcd.c: 979: DELAY_us(10);
  2800  031F  300A               	movlw	10
  2801  0320  00F0               	movwf	DELAY_us@us_count
  2802  0321  3000               	movlw	0
  2803  0322  00F1               	movwf	DELAY_us@us_count+1
  2804  0323  120A  118A  2296   	fcall	_DELAY_us
  2805                           
  2806                           ;lcd.c: 980: (((PORTD)) &= ~(1<<((2))));
  2807  0326  30FB               	movlw	251
  2808  0327  00F2               	movwf	??_lcd_SendCmdSignals
  2809  0328  0872               	movf	??_lcd_SendCmdSignals,w
  2810  0329  1283               	bcf	3,5	;RP0=0, select bank0
  2811  032A  1303               	bcf	3,6	;RP1=0, select bank0
  2812  032B  0588               	andwf	8,f	;volatile
  2813  032C  0008               	return
  2814  032D                     __end_of_lcd_SendCmdSignals:	
  2815                           
  2816                           	psect	text17
  2817  04A2                     __ptext17:	
  2818 ;; *************** function _lcd_BusyCheck *****************
  2819 ;; Defined at:
  2820 ;;		line 873 in file "lcd.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  busyflag        1    3[COMMON] unsigned char 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;		None               void
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2834 ;;      Params:         0       0       0       0       0
  2835 ;;      Locals:         1       0       0       0       0
  2836 ;;      Temps:          1       0       0       0       0
  2837 ;;      Totals:         2       0       0       0       0
  2838 ;;Total ram usage:        2 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    1
  2841 ;; This function calls:
  2842 ;;		_DELAY_us
  2843 ;; This function is called by:
  2844 ;;		_LCD_CmdWrite
  2845 ;;		_lcd_DataWrite
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function _lcd_BusyCheck
  2851  04A2                     _lcd_BusyCheck:	
  2852                           
  2853                           ;incstack = 0
  2854                           ; Regs used in _lcd_BusyCheck: [wreg+status,2+status,0+pclath+cstack]
  2855  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  2856  04A3  1303               	bcf	3,6	;RP1=0, select bank1
  2857  04A4  1786               	bsf	6,7	;volatile
  2858                           
  2859                           ;lcd.c: 879: (((PORTD)) &= ~(1<<((0))));
  2860  04A5  30FE               	movlw	254
  2861  04A6  00F2               	movwf	??_lcd_BusyCheck
  2862  04A7  0872               	movf	??_lcd_BusyCheck,w
  2863  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2864  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2865  04AA  0588               	andwf	8,f	;volatile
  2866                           
  2867                           ;lcd.c: 880: (((PORTD)) |= (1<<((1))));
  2868  04AB  1488               	bsf	8,1	;volatile
  2869  04AC                     l203:	
  2870                           ;lcd.c: 881: do
  2871                           
  2872                           
  2873                           ;lcd.c: 882: {
  2874                           ;lcd.c: 884: (((PORTD)) &= ~(1<<((2))));
  2875  04AC  30FB               	movlw	251
  2876  04AD  00F2               	movwf	??_lcd_BusyCheck
  2877  04AE  0872               	movf	??_lcd_BusyCheck,w
  2878  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2879  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2880  04B1  0588               	andwf	8,f	;volatile
  2881                           
  2882                           ;lcd.c: 885: DELAY_us(10);
  2883  04B2  300A               	movlw	10
  2884  04B3  00F0               	movwf	DELAY_us@us_count
  2885  04B4  3000               	movlw	0
  2886  04B5  00F1               	movwf	DELAY_us@us_count+1
  2887  04B6  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  2888                           
  2889                           ;lcd.c: 886: (((PORTD)) |= (1<<((2))));
  2890  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2891  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2892  04BD  1508               	bsf	8,2	;volatile
  2893                           
  2894                           ;lcd.c: 887: DELAY_us(10);
  2895  04BE  300A               	movlw	10
  2896  04BF  00F0               	movwf	DELAY_us@us_count
  2897  04C0  3000               	movlw	0
  2898  04C1  00F1               	movwf	DELAY_us@us_count+1
  2899  04C2  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  2900                           
  2901                           ;lcd.c: 888: busyflag = (((PORTB)&((1<<(7))))!=0u);
  2902  04C7  3000               	movlw	0
  2903  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2904  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  2905  04CA  1B86               	btfsc	6,7	;volatile
  2906  04CB  3001               	movlw	1
  2907  04CC  00F2               	movwf	??_lcd_BusyCheck
  2908  04CD  0872               	movf	??_lcd_BusyCheck,w
  2909  04CE  00F3               	movwf	lcd_BusyCheck@busyflag
  2910                           
  2911                           ;lcd.c: 891: if(STK_LCDConfig.mvar_LcdMode_U8 == 4)
  2912  04CF  085C               	movf	_STK_LCDConfig+2,w
  2913  04D0  3A04               	xorlw	4
  2914  04D1  1D03               	skipz
  2915  04D2  2CEC               	goto	l1115
  2916                           
  2917                           ;lcd.c: 892: {
  2918                           ;lcd.c: 894: (((PORTD)) &= ~(1<<((2))));
  2919  04D3  30FB               	movlw	251
  2920  04D4  00F2               	movwf	??_lcd_BusyCheck
  2921  04D5  0872               	movf	??_lcd_BusyCheck,w
  2922  04D6  0588               	andwf	8,f	;volatile
  2923                           
  2924                           ;lcd.c: 895: DELAY_us(10);
  2925  04D7  300A               	movlw	10
  2926  04D8  00F0               	movwf	DELAY_us@us_count
  2927  04D9  3000               	movlw	0
  2928  04DA  00F1               	movwf	DELAY_us@us_count+1
  2929  04DB  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  2930                           
  2931                           ;lcd.c: 896: (((PORTD)) |= (1<<((2))));
  2932  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2933  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2934  04E2  1508               	bsf	8,2	;volatile
  2935                           
  2936                           ;lcd.c: 897: DELAY_us(10);
  2937  04E3  300A               	movlw	10
  2938  04E4  00F0               	movwf	DELAY_us@us_count
  2939  04E5  3000               	movlw	0
  2940  04E6  00F1               	movwf	DELAY_us@us_count+1
  2941  04E7  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  2942  04EC                     l1115:	
  2943                           
  2944                           ;lcd.c: 898: }
  2945                           ;lcd.c: 899: }while(busyflag);
  2946  04EC  08F3               	movf	lcd_BusyCheck@busyflag,f
  2947  04ED  1D03               	skipz
  2948  04EE  2CAC               	goto	l203
  2949                           
  2950                           ;lcd.c: 901: ((0x00u)? ((TRISB) |= (1<<(7))): ((TRISB) &= ~(1<<(7))));
  2951  04EF  307F               	movlw	127
  2952  04F0  00F2               	movwf	??_lcd_BusyCheck
  2953  04F1  0872               	movf	??_lcd_BusyCheck,w
  2954  04F2  1683               	bsf	3,5	;RP0=1, select bank1
  2955  04F3  1303               	bcf	3,6	;RP1=0, select bank1
  2956  04F4  0586               	andwf	6,f	;volatile
  2957  04F5  0008               	return
  2958  04F6                     __end_of_lcd_BusyCheck:	
  2959                           
  2960                           	psect	text18
  2961  028E                     __ptext18:	
  2962 ;; *************** function _ADC_Init *****************
  2963 ;; Defined at:
  2964 ;;		line 54 in file "adc.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;		None
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;		None
  2969 ;; Return value:  Size  Location     Type
  2970 ;;		None               void
  2971 ;; Registers used:
  2972 ;;		wreg, status,2
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2978 ;;      Params:         0       0       0       0       0
  2979 ;;      Locals:         0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0
  2981 ;;      Totals:         0       0       0       0       0
  2982 ;;Total ram usage:        0 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_main
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           
  2992                           ;psect for function _ADC_Init
  2993  028E                     _ADC_Init:	
  2994                           
  2995                           ;adc.c: 56: ADCON0=0x00;
  2996                           
  2997                           ;incstack = 0
  2998                           ; Regs used in _ADC_Init: [wreg+status,2]
  2999  028E  1283               	bcf	3,5	;RP0=0, select bank0
  3000  028F  1303               	bcf	3,6	;RP1=0, select bank0
  3001  0290  019F               	clrf	31	;volatile
  3002                           
  3003                           ;adc.c: 57: ADCON1=0x80;
  3004  0291  3080               	movlw	128
  3005  0292  1683               	bsf	3,5	;RP0=1, select bank1
  3006  0293  1303               	bcf	3,6	;RP1=0, select bank1
  3007  0294  009F               	movwf	31	;volatile
  3008  0295  0008               	return
  3009  0296                     __end_of_ADC_Init:	
  3010                           
  3011                           	psect	text19
  3012  034C                     __ptext19:	
  3013 ;; *************** function _ADC_GetAdcValue *****************
  3014 ;; Defined at:
  3015 ;;		line 76 in file "adc.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  var_adcChann    1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  var_adcChann    1    5[COMMON] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  2    2[COMMON] unsigned int 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0, pclath, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3029 ;;      Params:         2       0       0       0       0
  3030 ;;      Locals:         1       0       0       0       0
  3031 ;;      Temps:          1       0       0       0       0
  3032 ;;      Totals:         4       0       0       0       0
  3033 ;;Total ram usage:        4 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    1
  3036 ;; This function calls:
  3037 ;;		_DELAY_us
  3038 ;; This function is called by:
  3039 ;;		_main
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           
  3044                           ;psect for function _ADC_GetAdcValue
  3045  034C                     _ADC_GetAdcValue:	
  3046                           
  3047                           ;incstack = 0
  3048                           ; Regs used in _ADC_GetAdcValue: [wreg+status,2+status,0+pclath+cstack]
  3049                           ;ADC_GetAdcValue@var_adcChannel_u8 stored from wreg
  3050  034C  00F5               	movwf	ADC_GetAdcValue@var_adcChannel_u8
  3051                           
  3052                           ;adc.c: 79: ADCON0= (var_adcChannel_u8<<3);
  3053  034D  0875               	movf	ADC_GetAdcValue@var_adcChannel_u8,w
  3054  034E  00F4               	movwf	??_ADC_GetAdcValue
  3055  034F  3002               	movlw	2
  3056  0350                     u905:	
  3057  0350  1003               	clrc
  3058  0351  0DF4               	rlf	??_ADC_GetAdcValue,f
  3059  0352  3EFF               	addlw	-1
  3060  0353  1D03               	skipz
  3061  0354  2B50               	goto	u905
  3062  0355  1003               	clrc
  3063  0356  0D74               	rlf	??_ADC_GetAdcValue,w
  3064  0357  1283               	bcf	3,5	;RP0=0, select bank0
  3065  0358  1303               	bcf	3,6	;RP1=0, select bank0
  3066  0359  009F               	movwf	31	;volatile
  3067                           
  3068                           ;adc.c: 80: ADON = 1;
  3069  035A  141F               	bsf	31,0	;volatile
  3070                           
  3071                           ;adc.c: 81: DELAY_us(50);
  3072  035B  3032               	movlw	50
  3073  035C  00F0               	movwf	DELAY_us@us_count
  3074  035D  3000               	movlw	0
  3075  035E  00F1               	movwf	DELAY_us@us_count+1
  3076  035F  120A  118A  2296  120A  118A  	fcall	_DELAY_us
  3077                           
  3078                           ;adc.c: 83: GO=1;
  3079  0364  1283               	bcf	3,5	;RP0=0, select bank0
  3080  0365  1303               	bcf	3,6	;RP1=0, select bank0
  3081  0366  151F               	bsf	31,2	;volatile
  3082  0367                     l40:	
  3083                           ;adc.c: 84: while(GO_DONE==1);
  3084                           
  3085  0367  191F               	btfsc	31,2	;volatile
  3086  0368  2B67               	goto	l40
  3087                           
  3088                           ;adc.c: 87: return((ADRESH<<8) + ADRESL);
  3089  0369  081E               	movf	30,w	;volatile
  3090  036A  01F3               	clrf	?_ADC_GetAdcValue+1
  3091  036B  07F3               	addwf	?_ADC_GetAdcValue+1,f
  3092  036C  1683               	bsf	3,5	;RP0=1, select bank1
  3093  036D  1303               	bcf	3,6	;RP1=0, select bank1
  3094  036E  081E               	movf	30,w	;volatile
  3095  036F  01F2               	clrf	?_ADC_GetAdcValue
  3096  0370  07F2               	addwf	?_ADC_GetAdcValue,f
  3097  0371  0008               	return
  3098  0372                     __end_of_ADC_GetAdcValue:	
  3099                           
  3100                           	psect	text20
  3101  0296                     __ptext20:	
  3102 ;; *************** function _DELAY_us *****************
  3103 ;; Defined at:
  3104 ;;		line 55 in file "delay.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  us_count        2    0[COMMON] unsigned int 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;		None               void
  3111 ;; Registers used:
  3112 ;;		wreg, status,2, status,0
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3118 ;;      Params:         2       0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0
  3120 ;;      Temps:          0       0       0       0       0
  3121 ;;      Totals:         2       0       0       0       0
  3122 ;;Total ram usage:        2 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_ADC_GetAdcValue
  3128 ;;		_DELAY_ms
  3129 ;;		_lcd_BusyCheck
  3130 ;;		_lcd_Reset
  3131 ;;		_lcd_SendCmdSignals
  3132 ;;		_lcd_SendDataSignals
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function _DELAY_us
  3138  0296                     _DELAY_us:	
  3139  0296                     l1089:	
  3140                           ;delay.c: 57: while(us_count!=0)
  3141                           
  3142                           ;incstack = 0
  3143                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  3144                           
  3145  0296  0871               	movf	DELAY_us@us_count+1,w
  3146  0297  0470               	iorwf	DELAY_us@us_count,w
  3147  0298  1903               	btfsc	3,2
  3148  0299  0008               	return
  3149                           
  3150                           ;delay.c: 58: {
  3151                           ;delay.c: 59: us_count--;
  3152  029A  3001               	movlw	1
  3153  029B  02F0               	subwf	DELAY_us@us_count,f
  3154  029C  3000               	movlw	0
  3155  029D  1C03               	skipc
  3156  029E  03F1               	decf	DELAY_us@us_count+1,f
  3157  029F  02F1               	subwf	DELAY_us@us_count+1,f
  3158  02A0  2A96               	goto	l1089
  3159  02A1                     __end_of_DELAY_us:	
  3160  007E                     btemp	set	126	;btemp
  3161  007E                     wtemp	set	126
  3162  007E                     wtemp0	set	126
  3163  0080                     wtemp1	set	128
  3164  0082                     wtemp2	set	130
  3165  0084                     wtemp3	set	132
  3166  0086                     wtemp4	set	134
  3167  0088                     wtemp5	set	136
  3168  007F                     wtemp6	set	127
  3169  007E                     ttemp	set	126
  3170  007E                     ttemp0	set	126
  3171  0081                     ttemp1	set	129
  3172  0084                     ttemp2	set	132
  3173  0087                     ttemp3	set	135
  3174  007F                     ttemp4	set	127
  3175  007E                     ltemp	set	126
  3176  007E                     ltemp0	set	126
  3177  0082                     ltemp1	set	130
  3178  0086                     ltemp2	set	134
  3179  0080                     ltemp3	set	128


Data Sizes:
    Strings     23
    Constant    0
    Data        5
    BSS         2
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     53      63
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Printf@str	PTR unsigned char  size(1) Largest target is 0

    LCD_Printf@argList	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_2(CODE[9]), STR_1(CODE[14]), 

    LCD_Printf@ptr	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_2(CODE[9]), STR_1(CODE[14]), 

    LCD_Printf@argp	PTR void [1] size(1) Largest target is 0
		 -> ?_LCD_Printf(BANK0[0]), 


Critical Paths under _main in COMMON

    _LCD_DisplayDecimalNumber->___lldiv
    ___bmul->___lldiv
    _LCD_DisplayChar->_LCD_GoToNextLine
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_SendDataSignals->_DELAY_us
    _LCD_GoToNextLine->_LCD_CmdWrite
    _lcd_Reset->_DELAY_ms
    _DELAY_ms->_DELAY_us
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _lcd_SendCmdSignals->_DELAY_us
    _lcd_BusyCheck->_DELAY_us
    _ADC_GetAdcValue->_DELAY_us

Critical Paths under _main in BANK0

    _main->_LCD_Printf
    _LCD_Printf->_LCD_DisplayDecimalNumber
    _LCD_DisplayDecimalNumber->___bmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   19170
                                             47 BANK0      6     6      0
                    _ADC_GetAdcValue
                           _ADC_Init
                       _LCD_GoToLine
                   _LCD_GoToNextLine
                           _LCD_Init
                         _LCD_Printf
 ---------------------------------------------------------------------------------
 (1) _LCD_Printf                                          25    23      2    8283
                                             22 BANK0     25    23      2
                    _LCD_DisplayChar
           _LCD_DisplayDecimalNumber
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayDecimalNumber                            18    13      5    4316
                                              4 BANK0     18    13      5
                    _LCD_DisplayChar
                             ___bmul
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     374
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     198
                                              0 BANK0      4     3      1
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      2     2      0    2844
                                              7 COMMON     2     2      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        2     2      0    1389
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  1     1      0     606
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     1     1      0    1389
                                              6 COMMON     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     2      2    7347
                                              8 COMMON     4     2      2
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    2088
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (3) _DELAY_ms                                             2     0      2     788
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0    2844
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToLine                                         2     2      0    1455
                                              6 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (5) _LCD_CmdWrite                                         2     2      0    1389
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendNibble                                       2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_SendCmdSignals                                   1     1      0     606
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (5) _lcd_BusyCheck                                        2     2      0     629
                                              2 COMMON     2     2      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetAdcValue                                      4     2      2     628
                                              2 COMMON     4     2      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (6) _DELAY_us                                             2     0      2     606
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetAdcValue
     _DELAY_us
   _ADC_Init
   _LCD_GoToLine
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
   _LCD_GoToNextLine
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
         _lcd_SendNibble
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendCmdSignals
             _DELAY_us
           _lcd_SendNibble
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
   _LCD_Printf
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendCmdSignals
             _DELAY_us
           _lcd_SendNibble
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendDataSignals
           _DELAY_us
         _lcd_SendNibble
     _LCD_DisplayDecimalNumber
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_us
             _lcd_SendCmdSignals
               _DELAY_us
             _lcd_SendNibble
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendDataSignals
             _DELAY_us
           _lcd_SendNibble
       ___bmul
         ___lldiv (ARG)
       ___lldiv
     ___bmul
       ___lldiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     35      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4D      12        0.0%
ABS                  0      0      4D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Feb 14 13:23:49 2015

                                                  pc 0002                                       ___bmul@product 0022  
                                        __CFG_CP$OFF 0000                                        ?_LCD_CmdWrite 0070  
                                                 l40 0367                                                   _GO 00FA  
                                        ?_LCD_Printf 0036                                                   fsr 0004  
                                      ?_LCD_GoToLine 0070                                          __CFG_LVP$ON 0000  
                                                l203 04AC                                                  l108 0498  
                                                l176 070E                                         __CFG_CPD$OFF 0000  
                                                u605 03BE                                                  u645 03F4  
                                                u735 0562                                                  u905 0350  
                                                u755 0570                                                  u765 0585  
                                                u775 0597                                                  fsr0 0004  
                                                indf 0000                                        _STK_LCDConfig 005A  
                                       __CFG_FOSC$HS 0000                              __end_of_ADC_GetAdcValue 0372  
                            __end_of_LCD_DisplayChar 034C                                                 l1115 04EC  
                                               l1211 02BF                                                 l1141 0387  
                                               l1133 0379                                                 l1301 062B  
                                               l1151 0393                                                 l1135 037F  
                                               l1231 02B6                                                 l1303 05C9  
                                               l1145 038B                                                 l1161 03AA  
                                               l1217 0338                                                 l1305 0630  
                                               l1147 038F                                                 l1139 0383  
                                               l1323 0476                                                 l1219 033D  
                                               l1227 02B0                                                 l1261 05A3  
                                               l1309 0640                                                 l1413 0740  
                                               l1183 02F5                                                 l1247 055E  
                                               l1431 0774                                                 l1423 0769  
                                               l1407 0722                                                 l1089 0296  
                                               l1329 0487                                                 l1193 03E0  
                                               l1257 0596                                                 l1249 056E  
                                               l1281 05B6                                                 l1443 079D  
                                               l1435 0784                                                 l1427 076A  
                                               l1419 0766                                                 l1451 07D7  
                                               l1293 061E                                                 l1285 05C8  
                                               l1373 067E                                                 l1453 064F  
                                               l1439 0791                                                 l1447 079F  
                                               l1385 06B7                                                 l1377 06A6  
                                               l1449 07D1                                                 l1395 06D2  
                                               l1379 06AB                                                 l1459 050B  
                                               l1397 06E7                                                 _ADON 00F8  
                                               STR_1 0009                                                 STR_2 0017  
                                       __CFG_WRT$OFF 0000                                                 _main 04F6  
                                 __size_of_LCD_Clear 000B                                                 btemp 007E  
                                   __end_of_ADC_Init 0296                                                 ltemp 007E  
                                               start 0000                                                 ttemp 007E  
                                               wtemp 007E                                         main@adc_temp 0051  
                                   __end_of_DELAY_ms 02D3                                     __end_of_DELAY_us 02A1  
                                  ___bmul@multiplier 0023                                       ??_LCD_CmdWrite 0074  
                                     ??_LCD_GoToLine 0076                                     __end_of_LCD_Init 04A2  
                                   lcd_DataWrite@dat 0075                                                ?_main 0070  
                                      __CFG_WDTE$OFF 0000                                      __end_of___lldiv 05AC  
                                              _PORTB 0006                                                _PORTD 0008  
                                              _TRISB 0086                                                _TRISD 0088  
LCD_DisplayDecimalNumber@var_numOfDigitsToDisplay_u8 0028                    __size_of_LCD_DisplayDecimalNumber 0098  
                                     __CFG_BOREN$OFF 0000                                                pclath 000A  
                          ?_LCD_DisplayDecimalNumber 0024                                                ltemp0 007E  
                                              ltemp1 0082                                                ltemp2 0086  
                                              ltemp3 0080                                  __size_of_LCD_Printf 019A  
                                              ttemp0 007E                                                ttemp1 0081  
                                              ttemp2 0084                                                ttemp3 0087  
                                              ttemp4 007F                                                status 0003  
                                              wtemp0 007E                                                wtemp1 0080  
                                              wtemp2 0082                                                wtemp3 0084  
                                              wtemp4 0086                                                wtemp5 0088  
                                              wtemp6 007F                                      __initialization 07DE  
                                       __end_of_main 054E                            LCD_CmdWrite@var_lcdCmd_u8 0075  
                                             ??_main 004F                          __size_of_lcd_SendCmdSignals 0019  
                                  __end_of_LCD_Clear 02AC            LCD_DisplayDecimalNumber@var_DecNumber_u32 0024  
                              LCD_Printf@var_num_s16 0049                                LCD_Printf@var_num_s32 0045  
                              LCD_Printf@var_num_u16 0042                                LCD_Printf@var_num_u32 003E  
                                   ?_ADC_GetAdcValue 0072                                               _ADCON0 001F  
                                             _ADCON1 009F                                     ?_LCD_DisplayChar 0070  
                                       LCD_Printf@ch 004D                                               _ADRESH 001E  
                                             _ADRESL 009E                                    lcd_SendNibble@var 0071  
                         LCD_Printf@var_floatNum_f32 003A                                lcd_BusyCheck@busyflag 0073  
                                     __CFG_PWRTE$OFF 0000                                               ___bmul 02AC  
                                          ??___lldiv 0078                                     DELAY_ms@ms_count 0072  
                                          ?_ADC_Init 0070                                    ?_LCD_GoToNextLine 0070  
                                          ?_DELAY_ms 0072                                            ?_DELAY_us 0070  
                                 ??_LCD_GoToNextLine 0076                                 __end_of_LCD_CmdWrite 03CE  
                                     main@adc_result 0053                                 __end_of_LCD_GoToLine 02E8  
                            __end_of__initialization 07FC                                            ?_LCD_Init 0078  
                                ___bmul@multiplicand 0020                                       __pcstackCOMMON 0070  
                                       __pidataBANK0 0289                                __end_of_lcd_DataWrite 0404  
                                       ??_LCD_Printf 0038                                   __size_of_lcd_Reset 004F  
                                         ??_ADC_Init 0070                         __size_of_lcd_SendDataSignals 0016  
                                         ??_DELAY_ms 0074                                           ??_DELAY_us 0072  
                      LCD_DisplayChar@var_lcdData_u8 0078                                           __pbssBANK0 005D  
                              __end_of_lcd_BusyCheck 04F6                                           ??_LCD_Init 007A  
                                 __end_of_LCD_Printf 07DE                                           __pmaintext 04F6  
                                            ?___bmul 0020                                        LCD_Printf@ptr 004B  
                                      LCD_Printf@str 003D                     __end_of_LCD_DisplayDecimalNumber 0644  
                                            _GO_DONE 00FA                                     DELAY_us@us_count 0070  
                                         __stringtab 0003                                    __end_of_lcd_Reset 0453  
                                    __size_of___bmul 0013                                              ___lldiv 054E  
                            __size_of_lcd_SendNibble 0026                                              __ptext1 0644  
                                            __ptext2 05AC                                              __ptext3 054E  
                                            __ptext4 02AC                                              __ptext5 032D  
                                            __ptext6 03CE                                              __ptext7 02FE  
                                            __ptext8 02E8                                              __ptext9 0453  
                              __size_of_LCD_CmdWrite 0036                                __size_of_LCD_GoToLine 0015  
                                          _LCD_Clear 02A1                                 end_of_initialization 07FC  
                                    ___lldiv@divisor 0070                                      ___lldiv@counter 007D  
                         __end_of_lcd_SendCmdSignals 032D                                         _LCD_CmdWrite 0398  
                                       _LCD_GoToLine 02D3                     ADC_GetAdcValue@var_adcChannel_u8 0075  
                           _LCD_DisplayDecimalNumber 05AC                                           ?_LCD_Clear 0070  
                      LCD_GoToLine@var_lineNumber_u8 0077                                    __size_of_ADC_Init 0008  
                                  __size_of_DELAY_ms 0014                                    __size_of_DELAY_us 000B  
                           __size_of_ADC_GetAdcValue 0026                             __size_of_LCD_DisplayChar 001F  
                                  __size_of_LCD_Init 004F                            __size_of_LCD_GoToNextLine 0016  
                                _lcd_SendDataSignals 02FE                                       __end_of___bmul 02BF  
                     LCD_Init@var_MaxCharsPerLine_u8 0079                                    LCD_Printf@argList 0044  
                           _ARR_LcdLineNumAddress_U8 0055                                  start_initialization 07DE  
                               ?_lcd_SendDataSignals 0070                             _VAR_LcdTrackCursorPos_U8 005D  
                                           ??___bmul 0021                                          __pdataBANK0 0055  
                                     _lcd_SendNibble 0372                          LCD_Init@var_lcdNoOfLines_u8 0078  
                 LCD_Printf@var_numOfDigitsToDisp_u8 004C                                ??_lcd_SendDataSignals 0072  
                                          ___latbits 0002                                        __pcstackBANK0 0020  
                                        ??_LCD_Clear 0078                                  __end_of__stringdata 0020  
                             LCD_Init@var_lcdMode_u8 007B                               __size_of_lcd_DataWrite 0036  
                                          __pnvBANK0 005A                               __end_of_lcd_SendNibble 0398  
                                           ?___lldiv 0070                                    ??_ADC_GetAdcValue 0074  
                                          _lcd_Reset 0404                                    ??_LCD_DisplayChar 0077  
                                          __pstrings 0003                               __size_of_lcd_BusyCheck 0054  
                                     LCD_Printf@argp 004E                                             _ADC_Init 028E  
                                           _DELAY_ms 02BF                                             _DELAY_us 0296  
                                           _LCD_Init 0453                                     _LCD_GoToNextLine 02E8  
                                    ?_lcd_SendNibble 0070                                           ?_lcd_Reset 0070  
                                      _lcd_DataWrite 03CE                           ??_LCD_DisplayDecimalNumber 0029  
                                        __stringbase 0008                                          __stringdata 0009  
                                 _lcd_SendCmdSignals 0314                                        _lcd_BusyCheck 04A2  
                                ?_lcd_SendCmdSignals 0070                                       ?_lcd_DataWrite 0070  
                                   __size_of___lldiv 005E                                   __end_of__stringtab 0009  
                               ??_lcd_SendCmdSignals 0072                                             __ptext10 0404  
                                           __ptext11 02BF                                             __ptext20 0296  
                                           __ptext12 02A1                                             __ptext13 02D3  
                                           __ptext14 0398                                             __ptext15 0372  
                                           __ptext16 0314                                             __ptext17 04A2  
                                           __ptext18 028E                                             __ptext19 034C  
                          LCD_DisplayDecimalNumber@a 002B                            LCD_DisplayDecimalNumber@i 0035  
                                     ?_lcd_BusyCheck 0070                                        __size_of_main 0058  
                                        ??_lcd_Reset 0074                                           _LCD_Printf 0644  
                             _VAR_LcdTrackLineNum_U8 005E                                      _ADC_GetAdcValue 034C  
                                   ___lldiv@dividend 0074                                      _LCD_DisplayChar 032D  
                                          stringcode 0003                                      ??_lcd_DataWrite 0074  
                        __end_of_lcd_SendDataSignals 0314                                     ___lldiv@quotient 0079  
                           __end_of_LCD_GoToNextLine 02FE                                             stringdir 0003  
                                           stringtab 0003                                      ??_lcd_BusyCheck 0072  
                                   ??_lcd_SendNibble 0070  
