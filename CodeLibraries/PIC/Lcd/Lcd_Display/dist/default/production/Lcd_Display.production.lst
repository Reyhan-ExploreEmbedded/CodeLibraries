

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Feb 18 17:36:06 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     	;# 
    29  0001                     	;# 
    30  0002                     	;# 
    31  0003                     	;# 
    32  0004                     	;# 
    33  0005                     	;# 
    34  0006                     	;# 
    35  0007                     	;# 
    36  0008                     	;# 
    37  0009                     	;# 
    38  000A                     	;# 
    39  000B                     	;# 
    40  000C                     	;# 
    41  000D                     	;# 
    42  000E                     	;# 
    43  000E                     	;# 
    44  000F                     	;# 
    45  0010                     	;# 
    46  0011                     	;# 
    47  0012                     	;# 
    48  0013                     	;# 
    49  0014                     	;# 
    50  0015                     	;# 
    51  0015                     	;# 
    52  0016                     	;# 
    53  0017                     	;# 
    54  0018                     	;# 
    55  0019                     	;# 
    56  001A                     	;# 
    57  001B                     	;# 
    58  001B                     	;# 
    59  001C                     	;# 
    60  001D                     	;# 
    61  001E                     	;# 
    62  001F                     	;# 
    63  0081                     	;# 
    64  0085                     	;# 
    65  0086                     	;# 
    66  0087                     	;# 
    67  0088                     	;# 
    68  0089                     	;# 
    69  008C                     	;# 
    70  008D                     	;# 
    71  008E                     	;# 
    72  0091                     	;# 
    73  0092                     	;# 
    74  0093                     	;# 
    75  0094                     	;# 
    76  0098                     	;# 
    77  0099                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  009E                     	;# 
    81  009F                     	;# 
    82  010C                     	;# 
    83  010D                     	;# 
    84  010E                     	;# 
    85  010F                     	;# 
    86  018C                     	;# 
    87  018D                     	;# 
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000D                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0013                     	;# 
   109  0014                     	;# 
   110  0015                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  001D                     	;# 
   121  001E                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  0087                     	;# 
   127  0088                     	;# 
   128  0089                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0098                     	;# 
   137  0099                     	;# 
   138  009C                     	;# 
   139  009D                     	;# 
   140  009E                     	;# 
   141  009F                     	;# 
   142  010C                     	;# 
   143  010D                     	;# 
   144  010E                     	;# 
   145  010F                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148                           
   149                           	psect	idataBANK0
   150  0575                     __pidataBANK0:	
   151                           
   152                           ;initializer for _ARR_LcdLineNumAddress_U8
   153  0575  3480               	retlw	128
   154  0576  3480               	retlw	128
   155  0577  34C0               	retlw	192
   156  0578  3490               	retlw	144
   157  0579  34D0               	retlw	208
   158                           
   159                           	psect	nvBANK0
   160  0025                     __pnvBANK0:	
   161  0025                     _STK_LCDConfig:	
   162  0025                     	ds	3
   163  0006                     _PORTB	set	6
   164  0008                     _PORTD	set	8
   165  0086                     _TRISB	set	134
   166  0088                     _TRISD	set	136
   167                           
   168                           	psect	strings
   169  0003                     __pstrings:	
   170  0003                     stringtab:	
   171  0003                     __stringtab:	
   172  0003                     stringcode:	
   173                           ;	String table - string pointers are 1 byte each
   174                           
   175  0003                     stringdir:	
   176  0003  3000               	movlw	high stringdir
   177  0004  008A               	movwf	10
   178  0005  0804               	movf	4,w
   179  0006  0A84               	incf	4,f
   180  0007  0782               	addwf	2,f
   181  0008                     __stringbase:	
   182  0008  3400               	retlw	0
   183  0009                     __end_of__stringtab:	
   184  0009                     __stringdata:	
   185  0009                     STR_1:	
   186  0009  3468               	retlw	104	;'h'
   187  000A  3465               	retlw	101	;'e'
   188  000B  346C               	retlw	108	;'l'
   189  000C  346C               	retlw	108	;'l'
   190  000D  346F               	retlw	111	;'o'
   191  000E  342C               	retlw	44	;','
   192  000F  3420               	retlw	32	;' '
   193  0010  3477               	retlw	119	;'w'
   194  0011  346F               	retlw	111	;'o'
   195  0012  3472               	retlw	114	;'r'
   196  0013  346C               	retlw	108	;'l'
   197  0014  3464               	retlw	100	;'d'
   198  0015  3400               	retlw	0
   199  0016                     STR_2:	
   200  0016  3467               	retlw	103	;'g'
   201  0017  346F               	retlw	111	;'o'
   202  0018  346F               	retlw	111	;'o'
   203  0019  3464               	retlw	100	;'d'
   204  001A  3420               	retlw	32	;' '
   205  001B  346D               	retlw	109	;'m'
   206  001C  346F               	retlw	111	;'o'
   207  001D  3472               	retlw	114	;'r'
   208  001E  346E               	retlw	110	;'n'
   209  001F  3469               	retlw	105	;'i'
   210  0020  346E               	retlw	110	;'n'
   211  0021  3467               	retlw	103	;'g'
   212  0022  3400               	retlw	0
   213  0023                     __end_of__stringdata:	
   214                           
   215                           ; #config settings
   216  0000                     
   217                           	psect	cinit
   218  07DE                     start_initialization:	
   219  07DE                     __initialization:	
   220                           
   221                           ; Clear objects allocated to BANK0
   222  07DE  01A8               	clrf	__pbssBANK0& (0+127)
   223  07DF  01A9               	clrf	(__pbssBANK0+1)& (0+127)
   224                           
   225                           ; Initialize objects allocated to BANK0
   226  07E0  120A  118A  2575  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   227  07E5  00A0               	movwf	__pdataBANK0& (0+127)
   228  07E6  120A  118A  2576  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   229  07EB  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   230  07EC  120A  118A  2577  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   231  07F1  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   232  07F2  120A  118A  2578  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   233  07F7  00A3               	movwf	(__pdataBANK0+3)& (0+127)
   234  07F8  120A  118A  2579   	fcall	__pidataBANK0+4	;fetch initializer
   235  07FB  00A4               	movwf	(__pdataBANK0+4)& (0+127)
   236  07FC                     end_of_initialization:	
   237                           ;End of C runtime variable initialization code
   238                           
   239  07FC                     __end_of__initialization:	
   240  07FC  0183               	clrf	3
   241  07FD  120A  118A  2E39   	ljmp	_main	;jump to C main() function
   242                           
   243                           	psect	bssBANK0
   244  0028                     __pbssBANK0:	
   245  0028                     _VAR_LcdTrackCursorPos_U8:	
   246  0028                     	ds	1
   247  0029                     _VAR_LcdTrackLineNum_U8:	
   248  0029                     	ds	1
   249                           
   250                           	psect	dataBANK0
   251  0020                     __pdataBANK0:	
   252  0020                     _ARR_LcdLineNumAddress_U8:	
   253  0020                     	ds	5
   254                           
   255                           	psect	cstackCOMMON
   256  0070                     __pcstackCOMMON:	
   257  0070                     ?_LCD_DisplayString:	
   258  0070                     ?_LCD_GoToLine:	
   259                           ; 0 bytes @ 0x0
   260                           
   261  0070                     ?_LCD_CmdWrite:	
   262                           ; 0 bytes @ 0x0
   263                           
   264  0070                     ?_lcd_Reset:	
   265                           ; 0 bytes @ 0x0
   266                           
   267  0070                     ?_LCD_Clear:	
   268                           ; 0 bytes @ 0x0
   269                           
   270  0070                     ?_lcd_BusyCheck:	
   271                           ; 0 bytes @ 0x0
   272                           
   273  0070                     ?_lcd_SendCmdSignals:	
   274                           ; 0 bytes @ 0x0
   275                           
   276  0070                     ?_lcd_SendNibble:	
   277                           ; 0 bytes @ 0x0
   278                           
   279  0070                     ??_lcd_SendNibble:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0070                     ?_lcd_DataWrite:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0070                     ?_lcd_SendDataSignals:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0070                     ?_main:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0070                     ?_DELAY_us:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0070                     ?_LCD_GoToNextLine:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0070                     ?_LCD_DisplayChar:	
   298                           ; 0 bytes @ 0x0
   299                           
   300  0070                     DELAY_us@us_count:	
   301                           ; 0 bytes @ 0x0
   302                           
   303                           
   304                           ; 2 bytes @ 0x0
   305  0070                     	ds	1
   306  0071                     lcd_SendNibble@var:	
   307                           
   308                           ; 1 bytes @ 0x1
   309  0071                     	ds	1
   310  0072                     ??_lcd_BusyCheck:	
   311  0072                     ??_lcd_SendCmdSignals:	
   312                           ; 0 bytes @ 0x2
   313                           
   314  0072                     ??_lcd_SendDataSignals:	
   315                           ; 0 bytes @ 0x2
   316                           
   317  0072                     ??_DELAY_us:	
   318                           ; 0 bytes @ 0x2
   319                           
   320  0072                     ?_DELAY_ms:	
   321                           ; 0 bytes @ 0x2
   322                           
   323  0072                     DELAY_ms@ms_count:	
   324                           ; 0 bytes @ 0x2
   325                           
   326                           
   327                           ; 2 bytes @ 0x2
   328  0072                     	ds	1
   329  0073                     lcd_BusyCheck@busyflag:	
   330                           
   331                           ; 1 bytes @ 0x3
   332  0073                     	ds	1
   333  0074                     ??_LCD_CmdWrite:	
   334  0074                     ??_lcd_Reset:	
   335                           ; 0 bytes @ 0x4
   336                           
   337  0074                     ??_lcd_DataWrite:	
   338                           ; 0 bytes @ 0x4
   339                           
   340  0074                     ??_DELAY_ms:	
   341                           ; 0 bytes @ 0x4
   342                           
   343                           
   344                           ; 0 bytes @ 0x4
   345  0074                     	ds	1
   346  0075                     LCD_CmdWrite@var_lcdCmd_u8:	
   347  0075                     lcd_DataWrite@dat:	
   348                           ; 1 bytes @ 0x5
   349                           
   350                           
   351                           ; 1 bytes @ 0x5
   352  0075                     	ds	1
   353  0076                     ??_LCD_GoToLine:	
   354  0076                     ??_LCD_GoToNextLine:	
   355                           ; 0 bytes @ 0x6
   356                           
   357                           
   358                           ; 0 bytes @ 0x6
   359  0076                     	ds	1
   360  0077                     ??_LCD_DisplayChar:	
   361  0077                     LCD_GoToLine@var_lineNumber_u8:	
   362                           ; 0 bytes @ 0x7
   363                           
   364                           
   365                           ; 1 bytes @ 0x7
   366  0077                     	ds	1
   367  0078                     ?_LCD_Init:	
   368  0078                     ??_LCD_Clear:	
   369                           ; 0 bytes @ 0x8
   370                           
   371  0078                     LCD_Init@var_lcdNoOfLines_u8:	
   372                           ; 0 bytes @ 0x8
   373                           
   374  0078                     LCD_DisplayChar@var_lcdData_u8:	
   375                           ; 1 bytes @ 0x8
   376                           
   377                           
   378                           ; 1 bytes @ 0x8
   379  0078                     	ds	1
   380  0079                     ??_LCD_DisplayString:	
   381  0079                     LCD_Init@var_MaxCharsPerLine_u8:	
   382                           ; 0 bytes @ 0x9
   383                           
   384                           
   385                           ; 1 bytes @ 0x9
   386  0079                     	ds	1
   387  007A                     ??_LCD_Init:	
   388  007A                     LCD_DisplayString@ptr_stringPointer_u8:	
   389                           ; 0 bytes @ 0xA
   390                           
   391                           
   392                           ; 1 bytes @ 0xA
   393  007A                     	ds	1
   394  007B                     LCD_Init@var_lcdMode_u8:	
   395                           
   396                           ; 1 bytes @ 0xB
   397  007B                     	ds	1
   398  007C                     ??_main:	
   399                           
   400                           ; 0 bytes @ 0xC
   401  007C                     	ds	2
   402                           
   403                           	psect	maintext
   404  0639                     __pmaintext:	
   405 ;;
   406 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   407 ;;
   408 ;; *************** function _main *****************
   409 ;; Defined at:
   410 ;;		line 16 in file "Lcd_Display.c"
   411 ;; Parameters:    Size  Location     Type
   412 ;;		None
   413 ;; Auto vars:     Size  Location     Type
   414 ;;		None
   415 ;; Return value:  Size  Location     Type
   416 ;;		None               void
   417 ;; Registers used:
   418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : 17F/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         0       0       0       0       0
   425 ;;      Locals:         0       0       0       0       0
   426 ;;      Temps:          2       0       0       0       0
   427 ;;      Totals:         2       0       0       0       0
   428 ;;Total ram usage:        2 bytes
   429 ;; Hardware stack levels required when called:    6
   430 ;; This function calls:
   431 ;;		_LCD_DisplayString
   432 ;;		_LCD_GoToLine
   433 ;;		_LCD_Init
   434 ;; This function is called by:
   435 ;;		Startup code after reset
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           
   440                           ;psect for function _main
   441  0639                     _main:	
   442                           
   443                           ;Lcd_Display.c: 20: LCD_Init(8,2,16);
   444                           
   445                           ;incstack = 0
   446                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   447  0639  3002               	movlw	2
   448  063A  00FC               	movwf	??_main
   449  063B  087C               	movf	??_main,w
   450  063C  00F8               	movwf	LCD_Init@var_lcdNoOfLines_u8
   451  063D  3010               	movlw	16
   452  063E  00FD               	movwf	??_main+1
   453  063F  087D               	movf	??_main+1,w
   454  0640  00F9               	movwf	LCD_Init@var_MaxCharsPerLine_u8
   455  0641  3008               	movlw	8
   456  0642  120A  118A  273B  120A  118A  	fcall	_LCD_Init
   457                           
   458                           ;Lcd_Display.c: 23: LCD_DisplayString("hello, world");
   459  0647  3001               	movlw	(STR_1-__stringbase)& (0+255)
   460  0648  120A  118A  25FE  120A  118A  	fcall	_LCD_DisplayString
   461                           
   462                           ;Lcd_Display.c: 26: LCD_GoToLine(2);
   463  064D  3002               	movlw	2
   464  064E  120A  118A  25A4  120A  118A  	fcall	_LCD_GoToLine
   465                           
   466                           ;Lcd_Display.c: 27: LCD_DisplayString("good morning");
   467  0653  300E               	movlw	(STR_2-__stringbase)& (0+255)
   468  0654  120A  118A  25FE  120A  118A  	fcall	_LCD_DisplayString
   469  0659                     l9:	
   470                           ;Lcd_Display.c: 30: while(1);
   471                           
   472  0659  2E59               	goto	l9
   473  065A                     __end_of_main:	
   474                           
   475                           	psect	text1
   476  073B                     __ptext1:	
   477 ;; *************** function _LCD_Init *****************
   478 ;; Defined at:
   479 ;;		line 112 in file "lcd.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;  var_lcdMode_    1    wreg     unsigned char 
   482 ;;  var_lcdNoOfL    1    8[COMMON] unsigned char 
   483 ;;  var_MaxChars    1    9[COMMON] unsigned char 
   484 ;; Auto vars:     Size  Location     Type
   485 ;;  var_lcdMode_    1   11[COMMON] unsigned char 
   486 ;; Return value:  Size  Location     Type
   487 ;;		None               void
   488 ;; Registers used:
   489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   490 ;; Tracked objects:
   491 ;;		On entry : 0/0
   492 ;;		On exit  : 0/0
   493 ;;		Unchanged: 0/0
   494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   495 ;;      Params:         2       0       0       0       0
   496 ;;      Locals:         1       0       0       0       0
   497 ;;      Temps:          1       0       0       0       0
   498 ;;      Totals:         4       0       0       0       0
   499 ;;Total ram usage:        4 bytes
   500 ;; Hardware stack levels used:    1
   501 ;; Hardware stack levels required when called:    5
   502 ;; This function calls:
   503 ;;		_DELAY_ms
   504 ;;		_LCD_Clear
   505 ;;		_LCD_CmdWrite
   506 ;;		_lcd_Reset
   507 ;; This function is called by:
   508 ;;		_main
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           
   513                           ;psect for function _LCD_Init
   514  073B                     _LCD_Init:	
   515                           
   516                           ;incstack = 0
   517                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   518                           ;LCD_Init@var_lcdMode_u8 stored from wreg
   519  073B  00FB               	movwf	LCD_Init@var_lcdMode_u8
   520                           
   521                           ;lcd.c: 116: TRISB = 0x00u;
   522  073C  1683               	bsf	3,5	;RP0=1, select bank1
   523  073D  1303               	bcf	3,6	;RP1=0, select bank1
   524  073E  0186               	clrf	6	;volatile
   525                           
   526                           ;lcd.c: 117: TRISD = 0x00u;
   527  073F  0188               	clrf	8	;volatile
   528                           
   529                           ;lcd.c: 118: STK_LCDConfig.mvar_LcdMode_U8 = var_lcdMode_u8;
   530  0740  087B               	movf	LCD_Init@var_lcdMode_u8,w
   531  0741  00FA               	movwf	??_LCD_Init
   532  0742  087A               	movf	??_LCD_Init,w
   533  0743  1283               	bcf	3,5	;RP0=0, select bank0
   534  0744  1303               	bcf	3,6	;RP1=0, select bank0
   535  0745  00A7               	movwf	_STK_LCDConfig+2
   536                           
   537                           ;lcd.c: 119: STK_LCDConfig.mvar_MaxSupportedChars_U8 = var_MaxCharsPerLine_u8;
   538  0746  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
   539  0747  00FA               	movwf	??_LCD_Init
   540  0748  087A               	movf	??_LCD_Init,w
   541  0749  00A6               	movwf	_STK_LCDConfig+1
   542                           
   543                           ;lcd.c: 120: STK_LCDConfig.mvar_MaxSupportedLines_U8 = var_lcdNoOfLines_u8;
   544  074A  0878               	movf	LCD_Init@var_lcdNoOfLines_u8,w
   545  074B  00FA               	movwf	??_LCD_Init
   546  074C  087A               	movf	??_LCD_Init,w
   547  074D  00A5               	movwf	_STK_LCDConfig
   548                           
   549                           ;lcd.c: 121: if(var_lcdNoOfLines_u8 > mENUM_LcdLineTwo)
   550  074E  3003               	movlw	3
   551  074F  0278               	subwf	LCD_Init@var_lcdNoOfLines_u8,w
   552  0750  1C03               	skipc
   553  0751  2F5E               	goto	l956
   554                           
   555                           ;lcd.c: 122: {
   556                           ;lcd.c: 123: ARR_LcdLineNumAddress_U8[mENUM_LcdLineThree] = 0x90 + (var_MaxCharsPerLine_
      +                          u8 & 0x0fu);
   557  0752  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
   558  0753  390F               	andlw	15
   559  0754  3E90               	addlw	144
   560  0755  00FA               	movwf	??_LCD_Init
   561  0756  087A               	movf	??_LCD_Init,w
   562  0757  00A3               	movwf	_ARR_LcdLineNumAddress_U8+3
   563                           
   564                           ;lcd.c: 124: ARR_LcdLineNumAddress_U8[mENUM_LcdLineFour] = 0xd0 + (var_MaxCharsPerLine_u
      +                          8 & 0x0fu);
   565  0758  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
   566  0759  390F               	andlw	15
   567  075A  3ED0               	addlw	208
   568  075B  00FA               	movwf	??_LCD_Init
   569  075C  087A               	movf	??_LCD_Init,w
   570  075D  00A4               	movwf	_ARR_LcdLineNumAddress_U8+4
   571  075E                     l956:	
   572                           
   573                           ;lcd.c: 125: }
   574                           ;lcd.c: 127: DELAY_ms(100);
   575  075E  3064               	movlw	100
   576  075F  00F2               	movwf	DELAY_ms@ms_count
   577  0760  3000               	movlw	0
   578  0761  00F3               	movwf	DELAY_ms@ms_count+1
   579  0762  120A  118A  2590  120A  118A  	fcall	_DELAY_ms
   580                           
   581                           ;lcd.c: 129: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
   582  0767  1283               	bcf	3,5	;RP0=0, select bank0
   583  0768  1303               	bcf	3,6	;RP1=0, select bank0
   584  0769  0827               	movf	_STK_LCDConfig+2,w
   585  076A  3A08               	xorlw	8
   586  076B  1D03               	skipz
   587  076C  2F6F               	goto	l962
   588                           
   589                           ;lcd.c: 130: {
   590                           ;lcd.c: 131: LCD_CmdWrite(0x38u);
   591  076D  3038               	movlw	56
   592  076E  2F7B               	goto	L1
   593  076F                     l962:	
   594                           ;lcd.c: 132: }
   595                           
   596                           
   597                           ;lcd.c: 133: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
   598  076F  1283               	bcf	3,5	;RP0=0, select bank0
   599  0770  1303               	bcf	3,6	;RP1=0, select bank0
   600  0771  0827               	movf	_STK_LCDConfig+2,w
   601  0772  3A04               	xorlw	4
   602  0773  1D03               	skipz
   603  0774  2F80               	goto	l73
   604                           
   605                           ;lcd.c: 134: {
   606                           ;lcd.c: 135: lcd_Reset();
   607  0775  120A  118A  26EC  120A  118A  	fcall	_lcd_Reset
   608                           
   609                           ;lcd.c: 136: LCD_CmdWrite(0x28u);
   610  077A  3028               	movlw	40
   611  077B                     L1:	
   612  077B  120A  118A  2680  120A  118A  	fcall	_LCD_CmdWrite
   613  0780                     l73:	
   614                           
   615                           ;lcd.c: 137: }
   616                           ;lcd.c: 139: LCD_CmdWrite(0x0Eu);
   617  0780  300E               	movlw	14
   618  0781  120A  118A  2680  120A  118A  	fcall	_LCD_CmdWrite
   619                           
   620                           ;lcd.c: 140: LCD_Clear();
   621  0786  120A  118A  2585   	fcall	_LCD_Clear
   622  0789  0008               	return
   623  078A                     __end_of_LCD_Init:	
   624                           
   625                           	psect	text2
   626  06EC                     __ptext2:	
   627 ;; *************** function _lcd_Reset *****************
   628 ;; Defined at:
   629 ;;		line 923 in file "lcd.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;		None
   632 ;; Auto vars:     Size  Location     Type
   633 ;;		None
   634 ;; Return value:  Size  Location     Type
   635 ;;		None               void
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, pclath, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   643 ;;      Params:         0       0       0       0       0
   644 ;;      Locals:         0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0
   646 ;;      Totals:         0       0       0       0       0
   647 ;;Total ram usage:        0 bytes
   648 ;; Hardware stack levels used:    1
   649 ;; Hardware stack levels required when called:    2
   650 ;; This function calls:
   651 ;;		_DELAY_ms
   652 ;;		_DELAY_us
   653 ;;		_lcd_SendCmdSignals
   654 ;;		_lcd_SendNibble
   655 ;; This function is called by:
   656 ;;		_LCD_Init
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           
   661                           ;psect for function _lcd_Reset
   662  06EC                     _lcd_Reset:	
   663                           
   664                           ;lcd.c: 926: lcd_SendNibble(0x30);
   665                           
   666                           ;incstack = 0
   667                           ; Regs used in _lcd_Reset: [wreg+status,2+status,0+pclath+cstack]
   668  06EC  3030               	movlw	48
   669  06ED  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
   670                           
   671                           ;lcd.c: 927: lcd_SendCmdSignals();
   672  06F2  120A  118A  25E5  120A  118A  	fcall	_lcd_SendCmdSignals
   673                           
   674                           ;lcd.c: 928: DELAY_ms(100);
   675  06F7  3064               	movlw	100
   676  06F8  00F2               	movwf	DELAY_ms@ms_count
   677  06F9  3000               	movlw	0
   678  06FA  00F3               	movwf	DELAY_ms@ms_count+1
   679  06FB  120A  118A  2590  120A  118A  	fcall	_DELAY_ms
   680                           
   681                           ;lcd.c: 929: lcd_SendNibble(0x30);
   682  0700  3030               	movlw	48
   683  0701  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
   684                           
   685                           ;lcd.c: 930: lcd_SendCmdSignals();
   686  0706  120A  118A  25E5  120A  118A  	fcall	_lcd_SendCmdSignals
   687                           
   688                           ;lcd.c: 931: DELAY_us(200);
   689  070B  30C8               	movlw	200
   690  070C  00F0               	movwf	DELAY_us@us_count
   691  070D  3000               	movlw	0
   692  070E  00F1               	movwf	DELAY_us@us_count+1
   693  070F  120A  118A  257A  120A  118A  	fcall	_DELAY_us
   694                           
   695                           ;lcd.c: 932: lcd_SendNibble(0x30);
   696  0714  3030               	movlw	48
   697  0715  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
   698                           
   699                           ;lcd.c: 933: lcd_SendCmdSignals();
   700  071A  120A  118A  25E5  120A  118A  	fcall	_lcd_SendCmdSignals
   701                           
   702                           ;lcd.c: 934: DELAY_us(200);
   703  071F  30C8               	movlw	200
   704  0720  00F0               	movwf	DELAY_us@us_count
   705  0721  3000               	movlw	0
   706  0722  00F1               	movwf	DELAY_us@us_count+1
   707  0723  120A  118A  257A  120A  118A  	fcall	_DELAY_us
   708                           
   709                           ;lcd.c: 935: lcd_SendNibble(0x20);
   710  0728  3020               	movlw	32
   711  0729  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
   712                           
   713                           ;lcd.c: 936: lcd_SendCmdSignals();
   714  072E  120A  118A  25E5  120A  118A  	fcall	_lcd_SendCmdSignals
   715                           
   716                           ;lcd.c: 937: DELAY_us(200);
   717  0733  30C8               	movlw	200
   718  0734  00F0               	movwf	DELAY_us@us_count
   719  0735  3000               	movlw	0
   720  0736  00F1               	movwf	DELAY_us@us_count+1
   721  0737  120A  118A  257A   	fcall	_DELAY_us
   722  073A  0008               	return
   723  073B                     __end_of_lcd_Reset:	
   724                           
   725                           	psect	text3
   726  0590                     __ptext3:	
   727 ;; *************** function _DELAY_ms *****************
   728 ;; Defined at:
   729 ;;		line 76 in file "delay.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;  ms_count        2    2[COMMON] unsigned int 
   732 ;; Auto vars:     Size  Location     Type
   733 ;;		None
   734 ;; Return value:  Size  Location     Type
   735 ;;		None               void
   736 ;; Registers used:
   737 ;;		wreg, status,2, status,0, pclath, cstack
   738 ;; Tracked objects:
   739 ;;		On entry : 0/0
   740 ;;		On exit  : 0/0
   741 ;;		Unchanged: 0/0
   742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   743 ;;      Params:         2       0       0       0       0
   744 ;;      Locals:         0       0       0       0       0
   745 ;;      Temps:          0       0       0       0       0
   746 ;;      Totals:         2       0       0       0       0
   747 ;;Total ram usage:        2 bytes
   748 ;; Hardware stack levels used:    1
   749 ;; Hardware stack levels required when called:    1
   750 ;; This function calls:
   751 ;;		_DELAY_us
   752 ;; This function is called by:
   753 ;;		_LCD_Init
   754 ;;		_lcd_Reset
   755 ;;		_DELAY_sec
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           
   760                           ;psect for function _DELAY_ms
   761  0590                     _DELAY_ms:	
   762  0590                     l902:	
   763                           ;delay.c: 78: while(ms_count!=0)
   764                           
   765                           ;incstack = 0
   766                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
   767                           
   768  0590  0873               	movf	DELAY_ms@ms_count+1,w
   769  0591  0472               	iorwf	DELAY_ms@ms_count,w
   770  0592  1903               	btfsc	3,2
   771  0593  0008               	return
   772                           
   773                           ;delay.c: 79: {
   774                           ;delay.c: 80: DELAY_us(300u);
   775  0594  302C               	movlw	44
   776  0595  00F0               	movwf	DELAY_us@us_count
   777  0596  3001               	movlw	1
   778  0597  00F1               	movwf	DELAY_us@us_count+1
   779  0598  120A  118A  257A  120A  118A  	fcall	_DELAY_us
   780                           
   781                           ;delay.c: 81: ms_count--;
   782  059D  3001               	movlw	1
   783  059E  02F2               	subwf	DELAY_ms@ms_count,f
   784  059F  3000               	movlw	0
   785  05A0  1C03               	skipc
   786  05A1  03F3               	decf	DELAY_ms@ms_count+1,f
   787  05A2  02F3               	subwf	DELAY_ms@ms_count+1,f
   788  05A3  2D90               	goto	l902
   789  05A4                     __end_of_DELAY_ms:	
   790                           
   791                           	psect	text4
   792  0585                     __ptext4:	
   793 ;; *************** function _LCD_Clear *****************
   794 ;; Defined at:
   795 ;;		line 154 in file "lcd.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;		None               void
   802 ;; Registers used:
   803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   809 ;;      Params:         0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    4
   816 ;; This function calls:
   817 ;;		_LCD_CmdWrite
   818 ;;		_LCD_GoToLine
   819 ;; This function is called by:
   820 ;;		_LCD_Init
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           
   825                           ;psect for function _LCD_Clear
   826  0585                     _LCD_Clear:	
   827                           
   828                           ;lcd.c: 156: LCD_CmdWrite(0x01u);
   829                           
   830                           ;incstack = 0
   831                           ; Regs used in _LCD_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   832  0585  3001               	movlw	1
   833  0586  120A  118A  2680  120A  118A  	fcall	_LCD_CmdWrite
   834                           
   835                           ;lcd.c: 157: LCD_GoToLine(mENUM_LcdLineOne);
   836  058B  3001               	movlw	1
   837  058C  120A  118A  25A4   	fcall	_LCD_GoToLine
   838  058F  0008               	return
   839  0590                     __end_of_LCD_Clear:	
   840                           
   841                           	psect	text5
   842  05A4                     __ptext5:	
   843 ;; *************** function _LCD_GoToLine *****************
   844 ;; Defined at:
   845 ;;		line 181 in file "lcd.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  var_lineNumb    1    wreg     unsigned char 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  var_lineNumb    1    7[COMMON] unsigned char 
   850 ;; Return value:  Size  Location     Type
   851 ;;		None               void
   852 ;; Registers used:
   853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   859 ;;      Params:         0       0       0       0       0
   860 ;;      Locals:         1       0       0       0       0
   861 ;;      Temps:          1       0       0       0       0
   862 ;;      Totals:         2       0       0       0       0
   863 ;;Total ram usage:        2 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    3
   866 ;; This function calls:
   867 ;;		_LCD_CmdWrite
   868 ;; This function is called by:
   869 ;;		_main
   870 ;;		_LCD_Clear
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           
   875                           ;psect for function _LCD_GoToLine
   876  05A4                     _LCD_GoToLine:	
   877                           
   878                           ;incstack = 0
   879                           ; Regs used in _LCD_GoToLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   880                           ;LCD_GoToLine@var_lineNumber_u8 stored from wreg
   881  05A4  00F7               	movwf	LCD_GoToLine@var_lineNumber_u8
   882                           
   883                           ;lcd.c: 183: if(var_lineNumber_u8 <= STK_LCDConfig.mvar_MaxSupportedLines_U8)
   884  05A5  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
   885  05A6  1283               	bcf	3,5	;RP0=0, select bank0
   886  05A7  1303               	bcf	3,6	;RP1=0, select bank0
   887  05A8  0225               	subwf	_STK_LCDConfig,w
   888  05A9  1C03               	skipc
   889  05AA  0008               	return
   890                           
   891                           ;lcd.c: 184: {
   892                           ;lcd.c: 187: VAR_LcdTrackCursorPos_U8 = 0x00;
   893  05AB  01A8               	clrf	_VAR_LcdTrackCursorPos_U8
   894                           
   895                           ;lcd.c: 188: VAR_LcdTrackLineNum_U8 = var_lineNumber_u8;
   896  05AC  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
   897  05AD  00F6               	movwf	??_LCD_GoToLine
   898  05AE  0876               	movf	??_LCD_GoToLine,w
   899  05AF  00A9               	movwf	_VAR_LcdTrackLineNum_U8
   900                           
   901                           ;lcd.c: 189: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[var_lineNumber_u8]);
   902  05B0  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
   903  05B1  3E20               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
   904  05B2  0084               	movwf	4
   905  05B3  1383               	bcf	3,7	;select IRP bank0
   906  05B4  0800               	movf	0,w
   907  05B5  120A  118A  2680   	fcall	_LCD_CmdWrite
   908  05B8  0008               	return
   909  05B9                     __end_of_LCD_GoToLine:	
   910                           
   911                           	psect	text6
   912  05FE                     __ptext6:	
   913 ;; *************** function _LCD_DisplayString *****************
   914 ;; Defined at:
   915 ;;		line 344 in file "lcd.c"
   916 ;; Parameters:    Size  Location     Type
   917 ;;  ptr_stringPo    1    wreg     PTR unsigned char 
   918 ;;		 -> STR_2(13), STR_1(13), 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  ptr_stringPo    1   10[COMMON] PTR unsigned char 
   921 ;;		 -> STR_2(13), STR_1(13), 
   922 ;; Return value:  Size  Location     Type
   923 ;;		None               void
   924 ;; Registers used:
   925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   931 ;;      Params:         0       0       0       0       0
   932 ;;      Locals:         1       0       0       0       0
   933 ;;      Temps:          1       0       0       0       0
   934 ;;      Totals:         2       0       0       0       0
   935 ;;Total ram usage:        2 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    5
   938 ;; This function calls:
   939 ;;		_LCD_DisplayChar
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _LCD_DisplayString
   947  05FE                     _LCD_DisplayString:	
   948                           
   949                           ;incstack = 0
   950                           ; Regs used in _LCD_DisplayString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   951                           ;LCD_DisplayString@ptr_stringPointer_u8 stored from wreg
   952  05FE  00FA               	movwf	LCD_DisplayString@ptr_stringPointer_u8
   953  05FF                     l974:	
   954                           ;lcd.c: 346: while((*ptr_stringPointer_u8)!=0)
   955                           
   956  05FF  087A               	movf	LCD_DisplayString@ptr_stringPointer_u8,w
   957  0600  0084               	movwf	4
   958  0601  120A  118A  2003  120A  118A  	fcall	stringdir
   959  0606  3800               	iorlw	0
   960  0607  1903               	btfsc	3,2
   961  0608  0008               	return
   962                           
   963                           ;lcd.c: 347: LCD_DisplayChar(*ptr_stringPointer_u8++);
   964  0609  087A               	movf	LCD_DisplayString@ptr_stringPointer_u8,w
   965  060A  0084               	movwf	4
   966  060B  120A  118A  2003  120A  118A  	fcall	stringdir
   967  0610  120A  118A  261A  120A  118A  	fcall	_LCD_DisplayChar
   968  0615  3001               	movlw	1
   969  0616  00F9               	movwf	??_LCD_DisplayString
   970  0617  0879               	movf	??_LCD_DisplayString,w
   971  0618  07FA               	addwf	LCD_DisplayString@ptr_stringPointer_u8,f
   972  0619  2DFF               	goto	l974
   973  061A                     __end_of_LCD_DisplayString:	
   974                           
   975                           	psect	text7
   976  061A                     __ptext7:	
   977 ;; *************** function _LCD_DisplayChar *****************
   978 ;; Defined at:
   979 ;;		line 309 in file "lcd.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  var_lcdData_    1    wreg     unsigned char 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  var_lcdData_    1    8[COMMON] unsigned char 
   984 ;; Return value:  Size  Location     Type
   985 ;;		None               void
   986 ;; Registers used:
   987 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   993 ;;      Params:         0       0       0       0       0
   994 ;;      Locals:         1       0       0       0       0
   995 ;;      Temps:          1       0       0       0       0
   996 ;;      Totals:         2       0       0       0       0
   997 ;;Total ram usage:        2 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    4
  1000 ;; This function calls:
  1001 ;;		_LCD_GoToNextLine
  1002 ;;		_lcd_DataWrite
  1003 ;; This function is called by:
  1004 ;;		_LCD_DisplayString
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _LCD_DisplayChar
  1010  061A                     _LCD_DisplayChar:	
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in _LCD_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1014                           ;LCD_DisplayChar@var_lcdData_u8 stored from wreg
  1015  061A  00F8               	movwf	LCD_DisplayChar@var_lcdData_u8
  1016                           
  1017                           ;lcd.c: 311: if((VAR_LcdTrackCursorPos_U8>=STK_LCDConfig.mvar_MaxSupportedChars_U8) || (
      +                          var_lcdData_u8=='\n'))
  1018  061B  1283               	bcf	3,5	;RP0=0, select bank0
  1019  061C  1303               	bcf	3,6	;RP1=0, select bank0
  1020  061D  0826               	movf	_STK_LCDConfig+1,w
  1021  061E  0228               	subwf	_VAR_LcdTrackCursorPos_U8,w
  1022  061F  1803               	skipnc
  1023  0620  2E25               	goto	l936
  1024  0621  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1025  0622  3A0A               	xorlw	10
  1026  0623  1D03               	skipz
  1027  0624  2E2A               	goto	l938
  1028  0625                     l936:	
  1029                           
  1030                           ;lcd.c: 312: {
  1031                           ;lcd.c: 315: LCD_GoToNextLine();
  1032  0625  120A  118A  25B9  120A  118A  	fcall	_LCD_GoToNextLine
  1033  062A                     l938:	
  1034                           
  1035                           ;lcd.c: 316: }
  1036                           ;lcd.c: 317: if(var_lcdData_u8!='\n')
  1037  062A  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1038  062B  3A0A               	xorlw	10
  1039  062C  1903               	skipnz
  1040  062D  0008               	return
  1041                           
  1042                           ;lcd.c: 318: {
  1043                           ;lcd.c: 320: lcd_DataWrite(var_lcdData_u8);
  1044  062E  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1045  062F  120A  118A  26B6   	fcall	_lcd_DataWrite
  1046                           
  1047                           ;lcd.c: 321: VAR_LcdTrackCursorPos_U8++;
  1048  0632  3001               	movlw	1
  1049  0633  00F7               	movwf	??_LCD_DisplayChar
  1050  0634  0877               	movf	??_LCD_DisplayChar,w
  1051  0635  1283               	bcf	3,5	;RP0=0, select bank0
  1052  0636  1303               	bcf	3,6	;RP1=0, select bank0
  1053  0637  07A8               	addwf	_VAR_LcdTrackCursorPos_U8,f
  1054  0638  0008               	return
  1055  0639                     __end_of_LCD_DisplayChar:	
  1056                           
  1057                           	psect	text8
  1058  06B6                     __ptext8:	
  1059 ;; *************** function _lcd_DataWrite *****************
  1060 ;; Defined at:
  1061 ;;		line 839 in file "lcd.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  dat             1    wreg     unsigned char 
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;  dat             1    5[COMMON] unsigned char 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;		None               void
  1068 ;; Registers used:
  1069 ;;		wreg, status,2, status,0, pclath, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1075 ;;      Params:         0       0       0       0       0
  1076 ;;      Locals:         1       0       0       0       0
  1077 ;;      Temps:          1       0       0       0       0
  1078 ;;      Totals:         2       0       0       0       0
  1079 ;;Total ram usage:        2 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; Hardware stack levels required when called:    2
  1082 ;; This function calls:
  1083 ;;		_lcd_BusyCheck
  1084 ;;		_lcd_SendDataSignals
  1085 ;;		_lcd_SendNibble
  1086 ;; This function is called by:
  1087 ;;		_LCD_DisplayChar
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           
  1092                           ;psect for function _lcd_DataWrite
  1093  06B6                     _lcd_DataWrite:	
  1094                           
  1095                           ;incstack = 0
  1096                           ; Regs used in _lcd_DataWrite: [wreg+status,2+status,0+pclath+cstack]
  1097                           ;lcd_DataWrite@dat stored from wreg
  1098  06B6  00F5               	movwf	lcd_DataWrite@dat
  1099                           
  1100                           ;lcd.c: 841: lcd_BusyCheck();
  1101  06B7  120A  118A  278A  120A  118A  	fcall	_lcd_BusyCheck
  1102                           
  1103                           ;lcd.c: 842: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  1104  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  1105  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  1106  06BE  0827               	movf	_STK_LCDConfig+2,w
  1107  06BF  3A08               	xorlw	8
  1108  06C0  1D03               	skipz
  1109  06C1  2EC8               	goto	l922
  1110                           
  1111                           ;lcd.c: 843: {
  1112                           ;lcd.c: 844: PORTB = dat;
  1113  06C2  0875               	movf	lcd_DataWrite@dat,w
  1114  06C3  0086               	movwf	6	;volatile
  1115                           
  1116                           ;lcd.c: 845: lcd_SendDataSignals();
  1117  06C4  120A  118A  25CF   	fcall	_lcd_SendDataSignals
  1118                           
  1119                           ;lcd.c: 846: }
  1120  06C7  0008               	return
  1121  06C8                     l922:	
  1122                           
  1123                           ;lcd.c: 847: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  1124  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  1125  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  1126  06CA  0827               	movf	_STK_LCDConfig+2,w
  1127  06CB  3A04               	xorlw	4
  1128  06CC  1D03               	skipz
  1129  06CD  0008               	return
  1130                           
  1131                           ;lcd.c: 848: {
  1132                           ;lcd.c: 849: lcd_SendNibble(dat);
  1133  06CE  0875               	movf	lcd_DataWrite@dat,w
  1134  06CF  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
  1135                           
  1136                           ;lcd.c: 850: lcd_SendDataSignals();
  1137  06D4  120A  118A  25CF  120A  118A  	fcall	_lcd_SendDataSignals
  1138                           
  1139                           ;lcd.c: 852: lcd_SendNibble(dat << 4);
  1140  06D9  0875               	movf	lcd_DataWrite@dat,w
  1141  06DA  00F4               	movwf	??_lcd_DataWrite
  1142  06DB  3003               	movlw	3
  1143  06DC                     u405:	
  1144  06DC  1003               	clrc
  1145  06DD  0DF4               	rlf	??_lcd_DataWrite,f
  1146  06DE  3EFF               	addlw	-1
  1147  06DF  1D03               	skipz
  1148  06E0  2EDC               	goto	u405
  1149  06E1  1003               	clrc
  1150  06E2  0D74               	rlf	??_lcd_DataWrite,w
  1151  06E3  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
  1152                           
  1153                           ;lcd.c: 853: lcd_SendDataSignals();
  1154  06E8  120A  118A  25CF   	fcall	_lcd_SendDataSignals
  1155  06EB  0008               	return
  1156  06EC                     __end_of_lcd_DataWrite:	
  1157                           
  1158                           	psect	text9
  1159  05CF                     __ptext9:	
  1160 ;; *************** function _lcd_SendDataSignals *****************
  1161 ;; Defined at:
  1162 ;;		line 994 in file "lcd.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;		None
  1167 ;; Return value:  Size  Location     Type
  1168 ;;		None               void
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0, pclath, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1176 ;;      Params:         0       0       0       0       0
  1177 ;;      Locals:         0       0       0       0       0
  1178 ;;      Temps:          1       0       0       0       0
  1179 ;;      Totals:         1       0       0       0       0
  1180 ;;Total ram usage:        1 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    1
  1183 ;; This function calls:
  1184 ;;		_DELAY_us
  1185 ;; This function is called by:
  1186 ;;		_lcd_DataWrite
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           
  1191                           ;psect for function _lcd_SendDataSignals
  1192  05CF                     _lcd_SendDataSignals:	
  1193                           
  1194                           ;lcd.c: 996: (((PORTD)) |= (1<<((0))));
  1195                           
  1196                           ;incstack = 0
  1197                           ; Regs used in _lcd_SendDataSignals: [wreg+status,2+status,0+pclath+cstack]
  1198  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  1199  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  1200  05D1  1408               	bsf	8,0	;volatile
  1201                           
  1202                           ;lcd.c: 998: (((PORTD)) &= ~(1<<((1))));
  1203  05D2  30FD               	movlw	253
  1204  05D3  00F2               	movwf	??_lcd_SendDataSignals
  1205  05D4  0872               	movf	??_lcd_SendDataSignals,w
  1206  05D5  0588               	andwf	8,f	;volatile
  1207                           
  1208                           ;lcd.c: 1000: (((PORTD)) |= (1<<((2))));
  1209  05D6  1508               	bsf	8,2	;volatile
  1210                           
  1211                           ;lcd.c: 1001: DELAY_us(10);
  1212  05D7  300A               	movlw	10
  1213  05D8  00F0               	movwf	DELAY_us@us_count
  1214  05D9  3000               	movlw	0
  1215  05DA  00F1               	movwf	DELAY_us@us_count+1
  1216  05DB  120A  118A  257A   	fcall	_DELAY_us
  1217                           
  1218                           ;lcd.c: 1002: (((PORTD)) &= ~(1<<((2))));
  1219  05DE  30FB               	movlw	251
  1220  05DF  00F2               	movwf	??_lcd_SendDataSignals
  1221  05E0  0872               	movf	??_lcd_SendDataSignals,w
  1222  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  1223  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  1224  05E3  0588               	andwf	8,f	;volatile
  1225  05E4  0008               	return
  1226  05E5                     __end_of_lcd_SendDataSignals:	
  1227                           
  1228                           	psect	text10
  1229  05B9                     __ptext10:	
  1230 ;; *************** function _LCD_GoToNextLine *****************
  1231 ;; Defined at:
  1232 ;;		line 208 in file "lcd.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;		None
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;		None               void
  1239 ;; Registers used:
  1240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1246 ;;      Params:         0       0       0       0       0
  1247 ;;      Locals:         0       0       0       0       0
  1248 ;;      Temps:          1       0       0       0       0
  1249 ;;      Totals:         1       0       0       0       0
  1250 ;;Total ram usage:        1 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    3
  1253 ;; This function calls:
  1254 ;;		_LCD_CmdWrite
  1255 ;; This function is called by:
  1256 ;;		_LCD_DisplayChar
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           
  1261                           ;psect for function _LCD_GoToNextLine
  1262  05B9                     _LCD_GoToNextLine:	
  1263                           
  1264                           ;lcd.c: 212: VAR_LcdTrackLineNum_U8++;
  1265                           
  1266                           ;incstack = 0
  1267                           ; Regs used in _LCD_GoToNextLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1268  05B9  3001               	movlw	1
  1269  05BA  00F6               	movwf	??_LCD_GoToNextLine
  1270  05BB  0876               	movf	??_LCD_GoToNextLine,w
  1271  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1272  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1273  05BE  07A9               	addwf	_VAR_LcdTrackLineNum_U8,f
  1274                           
  1275                           ;lcd.c: 213: VAR_LcdTrackCursorPos_U8 = 0x00;
  1276  05BF  01A8               	clrf	_VAR_LcdTrackCursorPos_U8
  1277                           
  1278                           ;lcd.c: 214: if(VAR_LcdTrackLineNum_U8 > STK_LCDConfig.mvar_MaxSupportedLines_U8)
  1279  05C0  0829               	movf	_VAR_LcdTrackLineNum_U8,w
  1280  05C1  0225               	subwf	_STK_LCDConfig,w
  1281  05C2  1803               	skipnc
  1282  05C3  2DC6               	goto	l912
  1283                           
  1284                           ;lcd.c: 215: VAR_LcdTrackLineNum_U8 = 0x01;
  1285  05C4  01A9               	clrf	_VAR_LcdTrackLineNum_U8
  1286  05C5  0AA9               	incf	_VAR_LcdTrackLineNum_U8,f
  1287  05C6                     l912:	
  1288                           
  1289                           ;lcd.c: 216: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[VAR_LcdTrackLineNum_U8]);
  1290  05C6  0829               	movf	_VAR_LcdTrackLineNum_U8,w
  1291  05C7  3E20               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
  1292  05C8  0084               	movwf	4
  1293  05C9  1383               	bcf	3,7	;select IRP bank0
  1294  05CA  0800               	movf	0,w
  1295  05CB  120A  118A  2680   	fcall	_LCD_CmdWrite
  1296  05CE  0008               	return
  1297  05CF                     __end_of_LCD_GoToNextLine:	
  1298                           
  1299                           	psect	text11
  1300  0680                     __ptext11:	
  1301 ;; *************** function _LCD_CmdWrite *****************
  1302 ;; Defined at:
  1303 ;;		line 274 in file "lcd.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  var_lcdCmd_u    1    wreg     unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  var_lcdCmd_u    1    5[COMMON] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;		None               void
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0, pclath, cstack
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1317 ;;      Params:         0       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0
  1319 ;;      Temps:          1       0       0       0       0
  1320 ;;      Totals:         2       0       0       0       0
  1321 ;;Total ram usage:        2 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    2
  1324 ;; This function calls:
  1325 ;;		_lcd_BusyCheck
  1326 ;;		_lcd_SendCmdSignals
  1327 ;;		_lcd_SendNibble
  1328 ;; This function is called by:
  1329 ;;		_LCD_Init
  1330 ;;		_LCD_Clear
  1331 ;;		_LCD_GoToLine
  1332 ;;		_LCD_GoToNextLine
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           
  1337                           ;psect for function _LCD_CmdWrite
  1338  0680                     _LCD_CmdWrite:	
  1339                           
  1340                           ;incstack = 0
  1341                           ; Regs used in _LCD_CmdWrite: [wreg+status,2+status,0+pclath+cstack]
  1342                           ;LCD_CmdWrite@var_lcdCmd_u8 stored from wreg
  1343  0680  00F5               	movwf	LCD_CmdWrite@var_lcdCmd_u8
  1344                           
  1345                           ;lcd.c: 276: lcd_BusyCheck();
  1346  0681  120A  118A  278A  120A  118A  	fcall	_lcd_BusyCheck
  1347                           
  1348                           ;lcd.c: 277: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  1349  0686  1283               	bcf	3,5	;RP0=0, select bank0
  1350  0687  1303               	bcf	3,6	;RP1=0, select bank0
  1351  0688  0827               	movf	_STK_LCDConfig+2,w
  1352  0689  3A08               	xorlw	8
  1353  068A  1D03               	skipz
  1354  068B  2E92               	goto	l874
  1355                           
  1356                           ;lcd.c: 278: {
  1357                           ;lcd.c: 280: PORTB = var_lcdCmd_u8;
  1358  068C  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  1359  068D  0086               	movwf	6	;volatile
  1360                           
  1361                           ;lcd.c: 281: lcd_SendCmdSignals();
  1362  068E  120A  118A  25E5   	fcall	_lcd_SendCmdSignals
  1363                           
  1364                           ;lcd.c: 282: }
  1365  0691  0008               	return
  1366  0692                     l874:	
  1367                           
  1368                           ;lcd.c: 283: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  1369  0692  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0693  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0694  0827               	movf	_STK_LCDConfig+2,w
  1372  0695  3A04               	xorlw	4
  1373  0696  1D03               	skipz
  1374  0697  0008               	return
  1375                           
  1376                           ;lcd.c: 284: {
  1377                           ;lcd.c: 285: lcd_SendNibble(var_lcdCmd_u8);
  1378  0698  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  1379  0699  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
  1380                           
  1381                           ;lcd.c: 286: lcd_SendCmdSignals();
  1382  069E  120A  118A  25E5  120A  118A  	fcall	_lcd_SendCmdSignals
  1383                           
  1384                           ;lcd.c: 288: lcd_SendNibble(var_lcdCmd_u8 << 4);
  1385  06A3  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  1386  06A4  00F4               	movwf	??_LCD_CmdWrite
  1387  06A5  3003               	movlw	3
  1388  06A6                     u345:	
  1389  06A6  1003               	clrc
  1390  06A7  0DF4               	rlf	??_LCD_CmdWrite,f
  1391  06A8  3EFF               	addlw	-1
  1392  06A9  1D03               	skipz
  1393  06AA  2EA6               	goto	u345
  1394  06AB  1003               	clrc
  1395  06AC  0D74               	rlf	??_LCD_CmdWrite,w
  1396  06AD  120A  118A  265A  120A  118A  	fcall	_lcd_SendNibble
  1397                           
  1398                           ;lcd.c: 289: lcd_SendCmdSignals();
  1399  06B2  120A  118A  25E5   	fcall	_lcd_SendCmdSignals
  1400  06B5  0008               	return
  1401  06B6                     __end_of_LCD_CmdWrite:	
  1402                           
  1403                           	psect	text12
  1404  065A                     __ptext12:	
  1405 ;; *************** function _lcd_SendNibble *****************
  1406 ;; Defined at:
  1407 ;;		line 953 in file "lcd.c"
  1408 ;; Parameters:    Size  Location     Type
  1409 ;;  var             1    wreg     unsigned char 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;  var             1    1[COMMON] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;		None               void
  1414 ;; Registers used:
  1415 ;;		wreg, status,2, status,0
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1421 ;;      Params:         0       0       0       0       0
  1422 ;;      Locals:         1       0       0       0       0
  1423 ;;      Temps:          1       0       0       0       0
  1424 ;;      Totals:         2       0       0       0       0
  1425 ;;Total ram usage:        2 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_LCD_CmdWrite
  1431 ;;		_lcd_DataWrite
  1432 ;;		_lcd_Reset
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           
  1437                           ;psect for function _lcd_SendNibble
  1438  065A                     _lcd_SendNibble:	
  1439                           
  1440                           ;incstack = 0
  1441                           ; Regs used in _lcd_SendNibble: [wreg+status,2+status,0]
  1442                           ;lcd_SendNibble@var stored from wreg
  1443  065A  00F1               	movwf	lcd_SendNibble@var
  1444                           
  1445                           ;lcd.c: 955: (((((var)&((1<<(4))))!=0u))? ((PORTB) |= (1<<(4))): ((PORTB) &= ~(1<<(4))))
      +                          ;
  1446  065B  1E71               	btfss	lcd_SendNibble@var,4
  1447  065C  2E61               	goto	l846
  1448  065D  1283               	bcf	3,5	;RP0=0, select bank0
  1449  065E  1303               	bcf	3,6	;RP1=0, select bank0
  1450  065F  1606               	bsf	6,4	;volatile
  1451  0660  2E67               	goto	l848
  1452  0661                     l846:	
  1453  0661  30EF               	movlw	239
  1454  0662  00F0               	movwf	??_lcd_SendNibble
  1455  0663  0870               	movf	??_lcd_SendNibble,w
  1456  0664  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0665  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0666  0586               	andwf	6,f	;volatile
  1459  0667                     l848:	
  1460                           
  1461                           ;lcd.c: 956: (((((var)&((1<<(5))))!=0u))? ((PORTB) |= (1<<(5))): ((PORTB) &= ~(1<<(5))))
      +                          ;
  1462  0667  1EF1               	btfss	lcd_SendNibble@var,5
  1463  0668  2E6B               	goto	l852
  1464  0669  1686               	bsf	6,5	;volatile
  1465  066A  2E6F               	goto	l854
  1466  066B                     l852:	
  1467  066B  30DF               	movlw	223
  1468  066C  00F0               	movwf	??_lcd_SendNibble
  1469  066D  0870               	movf	??_lcd_SendNibble,w
  1470  066E  0586               	andwf	6,f	;volatile
  1471  066F                     l854:	
  1472                           
  1473                           ;lcd.c: 957: (((((var)&((1<<(6))))!=0u))? ((PORTB) |= (1<<(6))): ((PORTB) &= ~(1<<(6))))
      +                          ;
  1474  066F  1F71               	btfss	lcd_SendNibble@var,6
  1475  0670  2E73               	goto	l858
  1476  0671  1706               	bsf	6,6	;volatile
  1477  0672  2E77               	goto	l860
  1478  0673                     l858:	
  1479  0673  30BF               	movlw	191
  1480  0674  00F0               	movwf	??_lcd_SendNibble
  1481  0675  0870               	movf	??_lcd_SendNibble,w
  1482  0676  0586               	andwf	6,f	;volatile
  1483  0677                     l860:	
  1484                           
  1485                           ;lcd.c: 958: (((((var)&((1<<(7))))!=0u))? ((PORTB) |= (1<<(7))): ((PORTB) &= ~(1<<(7))))
      +                          ;
  1486  0677  1FF1               	btfss	lcd_SendNibble@var,7
  1487  0678  2E7B               	goto	l864
  1488  0679  1786               	bsf	6,7	;volatile
  1489  067A  0008               	return
  1490  067B                     l864:	
  1491  067B  307F               	movlw	127
  1492  067C  00F0               	movwf	??_lcd_SendNibble
  1493  067D  0870               	movf	??_lcd_SendNibble,w
  1494  067E  0586               	andwf	6,f	;volatile
  1495  067F  0008               	return
  1496  0680                     __end_of_lcd_SendNibble:	
  1497                           
  1498                           	psect	text13
  1499  05E5                     __ptext13:	
  1500 ;; *************** function _lcd_SendCmdSignals *****************
  1501 ;; Defined at:
  1502 ;;		line 972 in file "lcd.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;		None
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;		None
  1507 ;; Return value:  Size  Location     Type
  1508 ;;		None               void
  1509 ;; Registers used:
  1510 ;;		wreg, status,2, status,0, pclath, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1516 ;;      Params:         0       0       0       0       0
  1517 ;;      Locals:         0       0       0       0       0
  1518 ;;      Temps:          1       0       0       0       0
  1519 ;;      Totals:         1       0       0       0       0
  1520 ;;Total ram usage:        1 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    1
  1523 ;; This function calls:
  1524 ;;		_DELAY_us
  1525 ;; This function is called by:
  1526 ;;		_LCD_CmdWrite
  1527 ;;		_lcd_Reset
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           
  1532                           ;psect for function _lcd_SendCmdSignals
  1533  05E5                     _lcd_SendCmdSignals:	
  1534                           
  1535                           ;lcd.c: 974: (((PORTD)) &= ~(1<<((0))));
  1536                           
  1537                           ;incstack = 0
  1538                           ; Regs used in _lcd_SendCmdSignals: [wreg+status,2+status,0+pclath+cstack]
  1539  05E5  30FE               	movlw	254
  1540  05E6  00F2               	movwf	??_lcd_SendCmdSignals
  1541  05E7  0872               	movf	??_lcd_SendCmdSignals,w
  1542  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  1543  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  1544  05EA  0588               	andwf	8,f	;volatile
  1545                           
  1546                           ;lcd.c: 976: (((PORTD)) &= ~(1<<((1))));
  1547  05EB  30FD               	movlw	253
  1548  05EC  00F2               	movwf	??_lcd_SendCmdSignals
  1549  05ED  0872               	movf	??_lcd_SendCmdSignals,w
  1550  05EE  0588               	andwf	8,f	;volatile
  1551                           
  1552                           ;lcd.c: 978: (((PORTD)) |= (1<<((2))));
  1553  05EF  1508               	bsf	8,2	;volatile
  1554                           
  1555                           ;lcd.c: 979: DELAY_us(10);
  1556  05F0  300A               	movlw	10
  1557  05F1  00F0               	movwf	DELAY_us@us_count
  1558  05F2  3000               	movlw	0
  1559  05F3  00F1               	movwf	DELAY_us@us_count+1
  1560  05F4  120A  118A  257A   	fcall	_DELAY_us
  1561                           
  1562                           ;lcd.c: 980: (((PORTD)) &= ~(1<<((2))));
  1563  05F7  30FB               	movlw	251
  1564  05F8  00F2               	movwf	??_lcd_SendCmdSignals
  1565  05F9  0872               	movf	??_lcd_SendCmdSignals,w
  1566  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  1567  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  1568  05FC  0588               	andwf	8,f	;volatile
  1569  05FD  0008               	return
  1570  05FE                     __end_of_lcd_SendCmdSignals:	
  1571                           
  1572                           	psect	text14
  1573  078A                     __ptext14:	
  1574 ;; *************** function _lcd_BusyCheck *****************
  1575 ;; Defined at:
  1576 ;;		line 873 in file "lcd.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  busyflag        1    3[COMMON] unsigned char 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;		None               void
  1583 ;; Registers used:
  1584 ;;		wreg, status,2, status,0, pclath, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1590 ;;      Params:         0       0       0       0       0
  1591 ;;      Locals:         1       0       0       0       0
  1592 ;;      Temps:          1       0       0       0       0
  1593 ;;      Totals:         2       0       0       0       0
  1594 ;;Total ram usage:        2 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    1
  1597 ;; This function calls:
  1598 ;;		_DELAY_us
  1599 ;; This function is called by:
  1600 ;;		_LCD_CmdWrite
  1601 ;;		_lcd_DataWrite
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           
  1606                           ;psect for function _lcd_BusyCheck
  1607  078A                     _lcd_BusyCheck:	
  1608                           
  1609                           ;incstack = 0
  1610                           ; Regs used in _lcd_BusyCheck: [wreg+status,2+status,0+pclath+cstack]
  1611  078A  1683               	bsf	3,5	;RP0=1, select bank1
  1612  078B  1303               	bcf	3,6	;RP1=0, select bank1
  1613  078C  1786               	bsf	6,7	;volatile
  1614                           
  1615                           ;lcd.c: 879: (((PORTD)) &= ~(1<<((0))));
  1616  078D  30FE               	movlw	254
  1617  078E  00F2               	movwf	??_lcd_BusyCheck
  1618  078F  0872               	movf	??_lcd_BusyCheck,w
  1619  0790  1283               	bcf	3,5	;RP0=0, select bank0
  1620  0791  1303               	bcf	3,6	;RP1=0, select bank0
  1621  0792  0588               	andwf	8,f	;volatile
  1622                           
  1623                           ;lcd.c: 880: (((PORTD)) |= (1<<((1))));
  1624  0793  1488               	bsf	8,1	;volatile
  1625  0794                     l118:	
  1626                           ;lcd.c: 881: do
  1627                           
  1628                           
  1629                           ;lcd.c: 882: {
  1630                           ;lcd.c: 884: (((PORTD)) &= ~(1<<((2))));
  1631  0794  30FB               	movlw	251
  1632  0795  00F2               	movwf	??_lcd_BusyCheck
  1633  0796  0872               	movf	??_lcd_BusyCheck,w
  1634  0797  1283               	bcf	3,5	;RP0=0, select bank0
  1635  0798  1303               	bcf	3,6	;RP1=0, select bank0
  1636  0799  0588               	andwf	8,f	;volatile
  1637                           
  1638                           ;lcd.c: 885: DELAY_us(10);
  1639  079A  300A               	movlw	10
  1640  079B  00F0               	movwf	DELAY_us@us_count
  1641  079C  3000               	movlw	0
  1642  079D  00F1               	movwf	DELAY_us@us_count+1
  1643  079E  120A  118A  257A  120A  118A  	fcall	_DELAY_us
  1644                           
  1645                           ;lcd.c: 886: (((PORTD)) |= (1<<((2))));
  1646  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  1647  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  1648  07A5  1508               	bsf	8,2	;volatile
  1649                           
  1650                           ;lcd.c: 887: DELAY_us(10);
  1651  07A6  300A               	movlw	10
  1652  07A7  00F0               	movwf	DELAY_us@us_count
  1653  07A8  3000               	movlw	0
  1654  07A9  00F1               	movwf	DELAY_us@us_count+1
  1655  07AA  120A  118A  257A  120A  118A  	fcall	_DELAY_us
  1656                           
  1657                           ;lcd.c: 888: busyflag = (((PORTB)&((1<<(7))))!=0u);
  1658  07AF  3000               	movlw	0
  1659  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  1660  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  1661  07B2  1B86               	btfsc	6,7	;volatile
  1662  07B3  3001               	movlw	1
  1663  07B4  00F2               	movwf	??_lcd_BusyCheck
  1664  07B5  0872               	movf	??_lcd_BusyCheck,w
  1665  07B6  00F3               	movwf	lcd_BusyCheck@busyflag
  1666                           
  1667                           ;lcd.c: 891: if(STK_LCDConfig.mvar_LcdMode_U8 == 4)
  1668  07B7  0827               	movf	_STK_LCDConfig+2,w
  1669  07B8  3A04               	xorlw	4
  1670  07B9  1D03               	skipz
  1671  07BA  2FD4               	goto	l828
  1672                           
  1673                           ;lcd.c: 892: {
  1674                           ;lcd.c: 894: (((PORTD)) &= ~(1<<((2))));
  1675  07BB  30FB               	movlw	251
  1676  07BC  00F2               	movwf	??_lcd_BusyCheck
  1677  07BD  0872               	movf	??_lcd_BusyCheck,w
  1678  07BE  0588               	andwf	8,f	;volatile
  1679                           
  1680                           ;lcd.c: 895: DELAY_us(10);
  1681  07BF  300A               	movlw	10
  1682  07C0  00F0               	movwf	DELAY_us@us_count
  1683  07C1  3000               	movlw	0
  1684  07C2  00F1               	movwf	DELAY_us@us_count+1
  1685  07C3  120A  118A  257A  120A  118A  	fcall	_DELAY_us
  1686                           
  1687                           ;lcd.c: 896: (((PORTD)) |= (1<<((2))));
  1688  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  1689  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  1690  07CA  1508               	bsf	8,2	;volatile
  1691                           
  1692                           ;lcd.c: 897: DELAY_us(10);
  1693  07CB  300A               	movlw	10
  1694  07CC  00F0               	movwf	DELAY_us@us_count
  1695  07CD  3000               	movlw	0
  1696  07CE  00F1               	movwf	DELAY_us@us_count+1
  1697  07CF  120A  118A  257A  120A  118A  	fcall	_DELAY_us
  1698  07D4                     l828:	
  1699                           
  1700                           ;lcd.c: 898: }
  1701                           ;lcd.c: 899: }while(busyflag);
  1702  07D4  08F3               	movf	lcd_BusyCheck@busyflag,f
  1703  07D5  1D03               	skipz
  1704  07D6  2F94               	goto	l118
  1705                           
  1706                           ;lcd.c: 901: ((0x00u)? ((TRISB) |= (1<<(7))): ((TRISB) &= ~(1<<(7))));
  1707  07D7  307F               	movlw	127
  1708  07D8  00F2               	movwf	??_lcd_BusyCheck
  1709  07D9  0872               	movf	??_lcd_BusyCheck,w
  1710  07DA  1683               	bsf	3,5	;RP0=1, select bank1
  1711  07DB  1303               	bcf	3,6	;RP1=0, select bank1
  1712  07DC  0586               	andwf	6,f	;volatile
  1713  07DD  0008               	return
  1714  07DE                     __end_of_lcd_BusyCheck:	
  1715                           
  1716                           	psect	text15
  1717  057A                     __ptext15:	
  1718 ;; *************** function _DELAY_us *****************
  1719 ;; Defined at:
  1720 ;;		line 55 in file "delay.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;  us_count        2    0[COMMON] unsigned int 
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;		None               void
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1734 ;;      Params:         2       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0
  1737 ;;      Totals:         2       0       0       0       0
  1738 ;;Total ram usage:        2 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_DELAY_ms
  1744 ;;		_lcd_BusyCheck
  1745 ;;		_lcd_Reset
  1746 ;;		_lcd_SendCmdSignals
  1747 ;;		_lcd_SendDataSignals
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750                           
  1751                           
  1752                           ;psect for function _DELAY_us
  1753  057A                     _DELAY_us:	
  1754  057A                     l802:	
  1755                           ;delay.c: 57: while(us_count!=0)
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  1759                           
  1760  057A  0871               	movf	DELAY_us@us_count+1,w
  1761  057B  0470               	iorwf	DELAY_us@us_count,w
  1762  057C  1903               	btfsc	3,2
  1763  057D  0008               	return
  1764                           
  1765                           ;delay.c: 58: {
  1766                           ;delay.c: 59: us_count--;
  1767  057E  3001               	movlw	1
  1768  057F  02F0               	subwf	DELAY_us@us_count,f
  1769  0580  3000               	movlw	0
  1770  0581  1C03               	skipc
  1771  0582  03F1               	decf	DELAY_us@us_count+1,f
  1772  0583  02F1               	subwf	DELAY_us@us_count+1,f
  1773  0584  2D7A               	goto	l802
  1774  0585                     __end_of_DELAY_us:	
  1775  007E                     btemp	set	126	;btemp
  1776  007E                     wtemp	set	126
  1777  007E                     wtemp0	set	126
  1778  0080                     wtemp1	set	128
  1779  0082                     wtemp2	set	130
  1780  0084                     wtemp3	set	132
  1781  0086                     wtemp4	set	134
  1782  0088                     wtemp5	set	136
  1783  007F                     wtemp6	set	127
  1784  007E                     ttemp	set	126
  1785  007E                     ttemp0	set	126
  1786  0081                     ttemp1	set	129
  1787  0084                     ttemp2	set	132
  1788  0087                     ttemp3	set	135
  1789  007F                     ttemp4	set	127
  1790  007E                     ltemp	set	126
  1791  007E                     ltemp0	set	126
  1792  0082                     ltemp1	set	130
  1793  0086                     ltemp2	set	134
  1794  0080                     ltemp3	set	128


Data Sizes:
    Strings     26
    Constant    0
    Data        5
    BSS         2
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_DisplayString@ptr_stringPointer_u8	PTR unsigned char  size(1) Largest target is 13
		 -> STR_2(CODE[13]), STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _lcd_Reset->_DELAY_ms
    _DELAY_ms->_DELAY_us
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_DisplayString->_LCD_DisplayChar
    _LCD_DisplayChar->_LCD_GoToNextLine
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_SendDataSignals->_DELAY_us
    _LCD_GoToNextLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _lcd_SendCmdSignals->_DELAY_us
    _lcd_BusyCheck->_DELAY_us

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10897
                                             12 COMMON     2     2      0
                  _LCD_DisplayString
                       _LCD_GoToLine
                           _LCD_Init
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     2      2    6817
                                              8 COMMON     4     2      2
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    1929
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (3) _DELAY_ms                                             2     0      2     735
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0    2632
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToLine                                         2     2      0    1349
                                              6 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_DisplayString                                    2     2      0    2731
                                              9 COMMON     2     2      0
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayChar                                      2     2      0    2632
                                              7 COMMON     2     2      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (3) _lcd_DataWrite                                        2     2      0    1283
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (4) _lcd_SendDataSignals                                  1     1      0     553
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToNextLine                                     1     1      0    1283
                                              6 COMMON     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (2) _LCD_CmdWrite                                         2     2      0    1283
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (3) _lcd_SendNibble                                       2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_SendCmdSignals                                   1     1      0     553
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (3) _lcd_BusyCheck                                        2     2      0     576
                                              2 COMMON     2     2      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (4) _DELAY_us                                             2     0      2     553
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_DisplayString
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendCmdSignals
             _DELAY_us
           _lcd_SendNibble
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendDataSignals
           _DELAY_us
         _lcd_SendNibble
   _LCD_GoToLine
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
         _lcd_SendNibble
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendCmdSignals
             _DELAY_us
           _lcd_SendNibble
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       A       5       12.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      18      12        0.0%
ABS                  0      0      18       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Feb 18 17:36:06 2015

                                    l9 0659                                      pc 0002  
                          __CFG_CP$OFF 0000                          ?_LCD_CmdWrite 0070  
                                   l73 0780                                     fsr 0004  
                        ?_LCD_GoToLine 0070                            __CFG_LVP$ON 0000  
                                  l118 0794                                    l802 057A  
                                  l902 0590                                    l912 05C6  
                                  l922 06C8                                    l828 07D4  
                                  l860 0677                                    l852 066B  
                                  l854 066F                                    l846 0661  
                                  l864 067B                                    l848 0667  
                                  l936 0625                                    l858 0673  
                                  l874 0692                                    l938 062A  
                                  l962 076F                                    l956 075E  
                                  l974 05FF                                    u405 06DC  
                                  u345 06A6                           __CFG_CPD$OFF 0000  
                                  fsr0 0004                                    indf 0000  
                        _STK_LCDConfig 0025                           __CFG_FOSC$HS 0000  
              __end_of_LCD_DisplayChar 0639                                   STR_1 0009  
                                 STR_2 0016                           __CFG_WRT$OFF 0000  
                                 _main 0639                     __size_of_LCD_Clear 000B  
                                 btemp 007E                                   ltemp 007E  
                                 start 0000                                   ttemp 007E  
                                 wtemp 007E                       __end_of_DELAY_ms 05A4  
                     __end_of_DELAY_us 0585                         ??_LCD_CmdWrite 0074  
                       ??_LCD_GoToLine 0076                       __end_of_LCD_Init 078A  
                     lcd_DataWrite@dat 0075                                  ?_main 0070  
                        __CFG_WDTE$OFF 0000                                  _PORTB 0006  
                                _PORTD 0008                                  _TRISB 0086  
                                _TRISD 0088  LCD_DisplayString@ptr_stringPointer_u8 007A  
                       __CFG_BOREN$OFF 0000                                  pclath 000A  
                                ltemp0 007E                                  ltemp1 0082  
                                ltemp2 0086                                  ltemp3 0080  
                                ttemp0 007E                                  ttemp1 0081  
                                ttemp2 0084                                  ttemp3 0087  
                                ttemp4 007F                                  status 0003  
                                wtemp0 007E                                  wtemp1 0080  
                                wtemp2 0082                                  wtemp3 0084  
                                wtemp4 0086                                  wtemp5 0088  
                                wtemp6 007F                        __initialization 07DE  
                         __end_of_main 065A              LCD_CmdWrite@var_lcdCmd_u8 0075  
                               ??_main 007C            __size_of_lcd_SendCmdSignals 0019  
                    __end_of_LCD_Clear 0590                       ?_LCD_DisplayChar 0070  
                    lcd_SendNibble@var 0071                  lcd_BusyCheck@busyflag 0073  
                       __CFG_PWRTE$OFF 0000                       DELAY_ms@ms_count 0072  
                    ?_LCD_GoToNextLine 0070                              ?_DELAY_ms 0072  
                            ?_DELAY_us 0070                     ??_LCD_GoToNextLine 0076  
                 __end_of_LCD_CmdWrite 06B6                   __end_of_LCD_GoToLine 05B9  
              __end_of__initialization 07FC                              ?_LCD_Init 0078  
                       __pcstackCOMMON 0070                           __pidataBANK0 0575  
                __end_of_lcd_DataWrite 06EC                     __size_of_lcd_Reset 004F  
         __size_of_lcd_SendDataSignals 0016                             ??_DELAY_ms 0074  
                           ??_DELAY_us 0072          LCD_DisplayChar@var_lcdData_u8 0078  
                           __pbssBANK0 0028                  __end_of_lcd_BusyCheck 07DE  
                           ??_LCD_Init 007A                             __pmaintext 0639  
                     DELAY_us@us_count 0070                             __stringtab 0003  
                    __end_of_lcd_Reset 073B                __size_of_lcd_SendNibble 0026  
                              __ptext1 073B                                __ptext2 06EC  
                              __ptext3 0590                                __ptext4 0585  
                              __ptext5 05A4                                __ptext6 05FE  
                              __ptext7 061A                                __ptext8 06B6  
                              __ptext9 05CF                  __size_of_LCD_CmdWrite 0036  
                __size_of_LCD_GoToLine 0015                              _LCD_Clear 0585  
                 end_of_initialization 07FC             __end_of_lcd_SendCmdSignals 05FE  
                         _LCD_CmdWrite 0680                           _LCD_GoToLine 05A4  
                           ?_LCD_Clear 0070          LCD_GoToLine@var_lineNumber_u8 0077  
                    __size_of_DELAY_ms 0014                      __size_of_DELAY_us 000B  
             __size_of_LCD_DisplayChar 001F                      __size_of_LCD_Init 004F  
            __size_of_LCD_GoToNextLine 0016                    _lcd_SendDataSignals 05CF  
       LCD_Init@var_MaxCharsPerLine_u8 0079               _ARR_LcdLineNumAddress_U8 0020  
                  start_initialization 07DE                   ?_lcd_SendDataSignals 0070  
             _VAR_LcdTrackCursorPos_U8 0028                            __pdataBANK0 0020  
                       _lcd_SendNibble 065A            LCD_Init@var_lcdNoOfLines_u8 0078  
                ??_lcd_SendDataSignals 0072                              ___latbits 0002  
                          ??_LCD_Clear 0078                    __end_of__stringdata 0023  
               LCD_Init@var_lcdMode_u8 007B                 __size_of_lcd_DataWrite 0036  
                            __pnvBANK0 0025                 __end_of_lcd_SendNibble 0680  
                            _lcd_Reset 06EC                      ??_LCD_DisplayChar 0077  
                            __pstrings 0003                 __size_of_lcd_BusyCheck 0054  
                    _LCD_DisplayString 05FE                               _DELAY_ms 0590  
                             _DELAY_us 057A                     ?_LCD_DisplayString 0070  
                             _LCD_Init 073B                    ??_LCD_DisplayString 0079  
                     _LCD_GoToNextLine 05B9                        ?_lcd_SendNibble 0070  
                           ?_lcd_Reset 0070                          _lcd_DataWrite 06B6  
                          __stringbase 0008                            __stringdata 0009  
            __end_of_LCD_DisplayString 061A                     _lcd_SendCmdSignals 05E5  
                        _lcd_BusyCheck 078A                    ?_lcd_SendCmdSignals 0070  
                       ?_lcd_DataWrite 0070                     __end_of__stringtab 0009  
                 ??_lcd_SendCmdSignals 0072                               __ptext10 05B9  
                             __ptext11 0680                               __ptext12 065A  
                             __ptext13 05E5                               __ptext14 078A  
                             __ptext15 057A                         ?_lcd_BusyCheck 0070  
                        __size_of_main 0021                            ??_lcd_Reset 0074  
               _VAR_LcdTrackLineNum_U8 0029             __size_of_LCD_DisplayString 001C  
                      _LCD_DisplayChar 061A                              stringcode 0003  
                      ??_lcd_DataWrite 0074            __end_of_lcd_SendDataSignals 05E5  
             __end_of_LCD_GoToNextLine 05CF                               stringdir 0003  
                             stringtab 0003                        ??_lcd_BusyCheck 0072  
                     ??_lcd_SendNibble 0070  
