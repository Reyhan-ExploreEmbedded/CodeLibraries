

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Feb 18 17:52:43 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	text28,local,class=CODE,merge=1,delta=2
    41                           	psect	text29,local,class=CODE,merge=1,delta=2
    42                           	psect	text30,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     	;# 
    45  0001                     	;# 
    46  0002                     	;# 
    47  0003                     	;# 
    48  0004                     	;# 
    49  0005                     	;# 
    50  0006                     	;# 
    51  0007                     	;# 
    52  0008                     	;# 
    53  0009                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001B                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001D                     	;# 
    77  001E                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  0087                     	;# 
    83  0088                     	;# 
    84  0089                     	;# 
    85  008C                     	;# 
    86  008D                     	;# 
    87  008E                     	;# 
    88  0091                     	;# 
    89  0092                     	;# 
    90  0093                     	;# 
    91  0094                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  010F                     	;# 
   102  018C                     	;# 
   103  018D                     	;# 
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0098                     	;# 
   213  0099                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  0091                     	;# 
   269  0092                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009C                     	;# 
   275  009D                     	;# 
   276  009E                     	;# 
   277  009F                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284                           
   285                           	psect	idataBANK0
   286  01DC                     __pidataBANK0:	
   287                           
   288                           ;initializer for _ARR_LcdLineNumAddress_U8
   289  01DC  3480               	retlw	128
   290  01DD  3480               	retlw	128
   291  01DE  34C0               	retlw	192
   292  01DF  3490               	retlw	144
   293  01E0  34D0               	retlw	208
   294                           
   295                           	psect	nvBANK0
   296  005F                     __pnvBANK0:	
   297  005F                     _STK_LCDConfig:	
   298  005F                     	ds	3
   299  0006                     _PORTB	set	6
   300  0008                     _PORTD	set	8
   301  0013                     _SSPBUF	set	19
   302  0014                     _SSPCON	set	20
   303  0093                     _SSPADD	set	147
   304  0094                     _SSPSTAT	set	148
   305  0086                     _TRISB	set	134
   306  0088                     _TRISD	set	136
   307  048D                     _ACKDT	set	1165
   308  048C                     _ACKEN	set	1164
   309  04A0                     _BF	set	1184
   310  048A                     _PEN	set	1162
   311  048B                     _RCEN	set	1163
   312  0489                     _RSEN	set	1161
   313  04A2                     _R_W	set	1186
   314  0488                     _SEN	set	1160
   315  043B                     _TRISC3	set	1083
   316  043C                     _TRISC4	set	1084
   317                           
   318                           	psect	strings
   319  0003                     __pstrings:	
   320  0003                     stringtab:	
   321  0003                     __stringtab:	
   322  0003                     stringcode:	
   323                           ;	String table - string pointers are 1 byte each
   324                           
   325  0003                     stringdir:	
   326  0003  3000               	movlw	high stringdir
   327  0004  008A               	movwf	10
   328  0005  0804               	movf	4,w
   329  0006  0A84               	incf	4,f
   330  0007  0782               	addwf	2,f
   331  0008                     __stringbase:	
   332  0008  3400               	retlw	0
   333  0009                     __end_of__stringtab:	
   334  0009                     __stringdata:	
   335  0009                     STR_2:	
   336  0009  340A               	retlw	10
   337  000A  3444               	retlw	68	;'D'
   338  000B  3461               	retlw	97	;'a'
   339  000C  3474               	retlw	116	;'t'
   340  000D  3465               	retlw	101	;'e'
   341  000E  343A               	retlw	58	;':'
   342  000F  3425               	retlw	37	;'%'
   343  0010  3432               	retlw	50	;'2'
   344  0011  3478               	retlw	120	;'x'
   345  0012  342F               	retlw	47	;'/'
   346  0013  3425               	retlw	37	;'%'
   347  0014  3432               	retlw	50	;'2'
   348  0015  3478               	retlw	120	;'x'
   349  0016  342F               	retlw	47	;'/'
   350  0017  3425               	retlw	37	;'%'
   351  0018  3432               	retlw	50	;'2'
   352  0019  3478               	retlw	120	;'x'
   353  001A  3400               	retlw	0
   354  001B                     STR_1:	
   355  001B  3474               	retlw	116	;'t'
   356  001C  3469               	retlw	105	;'i'
   357  001D  346D               	retlw	109	;'m'
   358  001E  3465               	retlw	101	;'e'
   359  001F  343A               	retlw	58	;':'
   360  0020  3425               	retlw	37	;'%'
   361  0021  3432               	retlw	50	;'2'
   362  0022  3478               	retlw	120	;'x'
   363  0023  343A               	retlw	58	;':'
   364  0024  3425               	retlw	37	;'%'
   365  0025  3432               	retlw	50	;'2'
   366  0026  3478               	retlw	120	;'x'
   367  0027  343A               	retlw	58	;':'
   368  0028  3425               	retlw	37	;'%'
   369  0029  3432               	retlw	50	;'2'
   370  002A  3478               	retlw	120	;'x'
   371  002B  3400               	retlw	0
   372  002C                     __end_of__stringdata:	
   373                           
   374                           ; #config settings
   375  0000                     
   376                           	psect	cinit
   377  07DE                     start_initialization:	
   378  07DE                     __initialization:	
   379                           
   380                           ; Clear objects allocated to BANK0
   381  07DE  01E2               	clrf	__pbssBANK0& (0+127)
   382  07DF  01E3               	clrf	(__pbssBANK0+1)& (0+127)
   383                           
   384                           ; Initialize objects allocated to BANK0
   385  07E0  120A  118A  21DC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   386  07E5  00DA               	movwf	__pdataBANK0& (0+127)
   387  07E6  120A  118A  21DD  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   388  07EB  00DB               	movwf	(__pdataBANK0+1)& (0+127)
   389  07EC  120A  118A  21DE  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   390  07F1  00DC               	movwf	(__pdataBANK0+2)& (0+127)
   391  07F2  120A  118A  21DF  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   392  07F7  00DD               	movwf	(__pdataBANK0+3)& (0+127)
   393  07F8  120A  118A  21E0   	fcall	__pidataBANK0+4	;fetch initializer
   394  07FB  00DE               	movwf	(__pdataBANK0+4)& (0+127)
   395  07FC                     end_of_initialization:	
   396                           ;End of C runtime variable initialization code
   397                           
   398  07FC                     __end_of__initialization:	
   399  07FC  0183               	clrf	3
   400  07FD  120A  118A  2E03   	ljmp	_main	;jump to C main() function
   401                           
   402                           	psect	bssBANK0
   403  0062                     __pbssBANK0:	
   404  0062                     _VAR_LcdTrackCursorPos_U8:	
   405  0062                     	ds	1
   406  0063                     _VAR_LcdTrackLineNum_U8:	
   407  0063                     	ds	1
   408                           
   409                           	psect	dataBANK0
   410  005A                     __pdataBANK0:	
   411  005A                     _ARR_LcdLineNumAddress_U8:	
   412  005A                     	ds	5
   413                           
   414                           	psect	cstackCOMMON
   415  0070                     __pcstackCOMMON:	
   416  0070                     ?_RTC_Init:	
   417  0070                     ?_LCD_GoToLine:	
   418                           ; 0 bytes @ 0x0
   419                           
   420  0070                     ?_i2c_WaitForIdle:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ??_i2c_WaitForIdle:	
   424                           ; 0 bytes @ 0x0
   425                           
   426  0070                     ?_i2c_Ack:	
   427                           ; 0 bytes @ 0x0
   428                           
   429  0070                     ??_i2c_Ack:	
   430                           ; 0 bytes @ 0x0
   431                           
   432  0070                     ?_i2c_NoAck:	
   433                           ; 0 bytes @ 0x0
   434                           
   435  0070                     ??_i2c_NoAck:	
   436                           ; 0 bytes @ 0x0
   437                           
   438  0070                     ?_LCD_CmdWrite:	
   439                           ; 0 bytes @ 0x0
   440                           
   441  0070                     ?_lcd_Reset:	
   442                           ; 0 bytes @ 0x0
   443                           
   444  0070                     ?_LCD_Clear:	
   445                           ; 0 bytes @ 0x0
   446                           
   447  0070                     ?_lcd_BusyCheck:	
   448                           ; 0 bytes @ 0x0
   449                           
   450  0070                     ?_lcd_SendCmdSignals:	
   451                           ; 0 bytes @ 0x0
   452                           
   453  0070                     ?_lcd_SendNibble:	
   454                           ; 0 bytes @ 0x0
   455                           
   456  0070                     ??_lcd_SendNibble:	
   457                           ; 0 bytes @ 0x0
   458                           
   459  0070                     ?_lcd_DataWrite:	
   460                           ; 0 bytes @ 0x0
   461                           
   462  0070                     ?_lcd_SendDataSignals:	
   463                           ; 0 bytes @ 0x0
   464                           
   465  0070                     ?_main:	
   466                           ; 0 bytes @ 0x0
   467                           
   468  0070                     ?_DELAY_us:	
   469                           ; 0 bytes @ 0x0
   470                           
   471  0070                     ?_I2C_Init:	
   472                           ; 0 bytes @ 0x0
   473                           
   474  0070                     ??_I2C_Init:	
   475                           ; 0 bytes @ 0x0
   476                           
   477  0070                     ?_I2C_Start:	
   478                           ; 0 bytes @ 0x0
   479                           
   480  0070                     ??_I2C_Start:	
   481                           ; 0 bytes @ 0x0
   482                           
   483  0070                     ?_I2C_Stop:	
   484                           ; 0 bytes @ 0x0
   485                           
   486  0070                     ??_I2C_Stop:	
   487                           ; 0 bytes @ 0x0
   488                           
   489  0070                     ?_I2C_Write:	
   490                           ; 0 bytes @ 0x0
   491                           
   492  0070                     ??_I2C_Write:	
   493                           ; 0 bytes @ 0x0
   494                           
   495  0070                     ??_I2C_Read:	
   496                           ; 0 bytes @ 0x0
   497                           
   498  0070                     ?_LCD_GoToNextLine:	
   499                           ; 0 bytes @ 0x0
   500                           
   501  0070                     ?_LCD_DisplayChar:	
   502                           ; 0 bytes @ 0x0
   503                           
   504  0070                     ?_I2C_Read:	
   505                           ; 0 bytes @ 0x0
   506                           
   507  0070                     ?___bmul:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     I2C_Write@var_i2cData_u8:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ___bmul@multiplicand:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     DELAY_us@us_count:	
   517                           ; 1 bytes @ 0x0
   518                           
   519                           
   520                           ; 2 bytes @ 0x0
   521  0070                     	ds	1
   522  0071                     ??_RTC_Init:	
   523  0071                     ?_RTC_SetTime:	
   524                           ; 0 bytes @ 0x1
   525                           
   526  0071                     ?_RTC_SetDate:	
   527                           ; 0 bytes @ 0x1
   528                           
   529  0071                     ??___bmul:	
   530                           ; 0 bytes @ 0x1
   531                           
   532  0071                     I2C_Read@var_ackOption_u8:	
   533                           ; 0 bytes @ 0x1
   534                           
   535  0071                     lcd_SendNibble@var:	
   536                           ; 1 bytes @ 0x1
   537                           
   538  0071                     RTC_SetTime@var_min_u8:	
   539                           ; 1 bytes @ 0x1
   540                           
   541  0071                     RTC_SetDate@var_month_u8:	
   542                           ; 1 bytes @ 0x1
   543                           
   544                           
   545                           ; 1 bytes @ 0x1
   546  0071                     	ds	1
   547  0072                     ??_lcd_BusyCheck:	
   548  0072                     ??_lcd_SendCmdSignals:	
   549                           ; 0 bytes @ 0x2
   550                           
   551  0072                     ??_lcd_SendDataSignals:	
   552                           ; 0 bytes @ 0x2
   553                           
   554  0072                     ??_DELAY_us:	
   555                           ; 0 bytes @ 0x2
   556                           
   557  0072                     ?_DELAY_ms:	
   558                           ; 0 bytes @ 0x2
   559                           
   560  0072                     I2C_Read@var_i2cData_u8:	
   561                           ; 0 bytes @ 0x2
   562                           
   563  0072                     RTC_SetTime@var_sec_u8:	
   564                           ; 1 bytes @ 0x2
   565                           
   566  0072                     RTC_SetDate@var_year_u8:	
   567                           ; 1 bytes @ 0x2
   568                           
   569  0072                     ___bmul@product:	
   570                           ; 1 bytes @ 0x2
   571                           
   572  0072                     DELAY_ms@ms_count:	
   573                           ; 1 bytes @ 0x2
   574                           
   575                           
   576                           ; 2 bytes @ 0x2
   577  0072                     	ds	1
   578  0073                     ??_RTC_SetTime:	
   579  0073                     ??_RTC_SetDate:	
   580                           ; 0 bytes @ 0x3
   581                           
   582  0073                     ?_RTC_GetTime:	
   583                           ; 0 bytes @ 0x3
   584                           
   585  0073                     ?_RTC_GetDate:	
   586                           ; 0 bytes @ 0x3
   587                           
   588  0073                     lcd_BusyCheck@busyflag:	
   589                           ; 0 bytes @ 0x3
   590                           
   591  0073                     RTC_SetTime@var_hour_u8:	
   592                           ; 1 bytes @ 0x3
   593                           
   594  0073                     RTC_SetDate@var_day_u8:	
   595                           ; 1 bytes @ 0x3
   596                           
   597  0073                     RTC_GetTime@ptr_min_u8:	
   598                           ; 1 bytes @ 0x3
   599                           
   600  0073                     RTC_GetDate@ptr_month_u8:	
   601                           ; 1 bytes @ 0x3
   602                           
   603  0073                     ___bmul@multiplier:	
   604                           ; 1 bytes @ 0x3
   605                           
   606                           
   607                           ; 1 bytes @ 0x3
   608  0073                     	ds	1
   609  0074                     ??_LCD_CmdWrite:	
   610  0074                     ??_lcd_Reset:	
   611                           ; 0 bytes @ 0x4
   612                           
   613  0074                     ??_lcd_DataWrite:	
   614                           ; 0 bytes @ 0x4
   615                           
   616  0074                     ??_DELAY_ms:	
   617                           ; 0 bytes @ 0x4
   618                           
   619  0074                     RTC_GetTime@ptr_sec_u8:	
   620                           ; 0 bytes @ 0x4
   621                           
   622  0074                     RTC_GetDate@ptr_year_u8:	
   623                           ; 1 bytes @ 0x4
   624                           
   625                           
   626                           ; 1 bytes @ 0x4
   627  0074                     	ds	1
   628  0075                     ??_RTC_GetTime:	
   629  0075                     ??_RTC_GetDate:	
   630                           ; 0 bytes @ 0x5
   631                           
   632  0075                     LCD_CmdWrite@var_lcdCmd_u8:	
   633                           ; 0 bytes @ 0x5
   634                           
   635  0075                     lcd_DataWrite@dat:	
   636                           ; 1 bytes @ 0x5
   637                           
   638                           
   639                           ; 1 bytes @ 0x5
   640  0075                     	ds	1
   641  0076                     ??_LCD_GoToLine:	
   642  0076                     ??_LCD_GoToNextLine:	
   643                           ; 0 bytes @ 0x6
   644                           
   645  0076                     RTC_GetTime@ptr_hour_u8:	
   646                           ; 0 bytes @ 0x6
   647                           
   648  0076                     RTC_GetDate@ptr_day_u8:	
   649                           ; 1 bytes @ 0x6
   650                           
   651                           
   652                           ; 1 bytes @ 0x6
   653  0076                     	ds	1
   654  0077                     ??_LCD_DisplayChar:	
   655  0077                     LCD_GoToLine@var_lineNumber_u8:	
   656                           ; 0 bytes @ 0x7
   657                           
   658                           
   659                           ; 1 bytes @ 0x7
   660  0077                     	ds	1
   661  0078                     ?_LCD_Init:	
   662  0078                     ??_LCD_Clear:	
   663                           ; 0 bytes @ 0x8
   664                           
   665  0078                     LCD_Init@var_lcdNoOfLines_u8:	
   666                           ; 0 bytes @ 0x8
   667                           
   668  0078                     LCD_DisplayChar@var_lcdData_u8:	
   669                           ; 1 bytes @ 0x8
   670                           
   671                           
   672                           ; 1 bytes @ 0x8
   673  0078                     	ds	1
   674  0079                     ?_LCD_DisplayHexNumber:	
   675  0079                     LCD_Init@var_MaxCharsPerLine_u8:	
   676                           ; 0 bytes @ 0x9
   677                           
   678  0079                     LCD_DisplayHexNumber@var_hexNumber_u32:	
   679                           ; 1 bytes @ 0x9
   680                           
   681                           
   682                           ; 4 bytes @ 0x9
   683  0079                     	ds	1
   684  007A                     ??_LCD_Init:	
   685                           
   686                           ; 0 bytes @ 0xA
   687  007A                     	ds	1
   688  007B                     LCD_Init@var_lcdMode_u8:	
   689                           
   690                           ; 1 bytes @ 0xB
   691  007B                     	ds	2
   692  007D                     LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8:	
   693                           
   694                           ; 1 bytes @ 0xD
   695  007D                     	ds	1
   696                           
   697                           	psect	cstackBANK0
   698  0020                     __pcstackBANK0:	
   699  0020                     ??_LCD_DisplayHexNumber:	
   700                           
   701                           ; 0 bytes @ 0x0
   702  0020                     	ds	4
   703  0024                     LCD_DisplayHexNumber@a:	
   704                           
   705                           ; 10 bytes @ 0x4
   706  0024                     	ds	10
   707  002E                     _LCD_DisplayHexNumber$211:	
   708                           
   709                           ; 2 bytes @ 0xE
   710  002E                     	ds	2
   711  0030                     LCD_DisplayHexNumber@i:	
   712                           
   713                           ; 1 bytes @ 0x10
   714  0030                     	ds	1
   715  0031                     ?_LCD_Printf:	
   716                           
   717                           ; 0 bytes @ 0x11
   718  0031                     	ds	6
   719  0037                     ??_LCD_Printf:	
   720                           
   721                           ; 0 bytes @ 0x17
   722  0037                     	ds	2
   723  0039                     LCD_Printf@var_num_s32:	
   724                           
   725                           ; 4 bytes @ 0x19
   726  0039                     	ds	4
   727  003D                     LCD_Printf@var_floatNum_f32:	
   728                           
   729                           ; 3 bytes @ 0x1D
   730  003D                     	ds	3
   731  0040                     LCD_Printf@var_num_s16:	
   732                           
   733                           ; 2 bytes @ 0x20
   734  0040                     	ds	2
   735  0042                     LCD_Printf@str:	
   736                           
   737                           ; 1 bytes @ 0x22
   738  0042                     	ds	1
   739  0043                     LCD_Printf@var_num_u32:	
   740                           
   741                           ; 4 bytes @ 0x23
   742  0043                     	ds	4
   743  0047                     LCD_Printf@var_num_u16:	
   744                           
   745                           ; 2 bytes @ 0x27
   746  0047                     	ds	2
   747  0049                     LCD_Printf@argList:	
   748                           
   749                           ; 1 bytes @ 0x29
   750  0049                     	ds	1
   751  004A                     LCD_Printf@var_numOfDigitsToDisp_u8:	
   752                           
   753                           ; 1 bytes @ 0x2A
   754  004A                     	ds	1
   755  004B                     LCD_Printf@ptr:	
   756                           
   757                           ; 1 bytes @ 0x2B
   758  004B                     	ds	1
   759  004C                     LCD_Printf@ch:	
   760                           
   761                           ; 1 bytes @ 0x2C
   762  004C                     	ds	1
   763  004D                     LCD_Printf@argp:	
   764                           
   765                           ; 1 bytes @ 0x2D
   766  004D                     	ds	1
   767  004E                     ??_main:	
   768                           
   769                           ; 0 bytes @ 0x2E
   770  004E                     	ds	6
   771  0054                     main@sec:	
   772                           
   773                           ; 1 bytes @ 0x34
   774  0054                     	ds	1
   775  0055                     main@min:	
   776                           
   777                           ; 1 bytes @ 0x35
   778  0055                     	ds	1
   779  0056                     main@hour:	
   780                           
   781                           ; 1 bytes @ 0x36
   782  0056                     	ds	1
   783  0057                     main@day:	
   784                           
   785                           ; 1 bytes @ 0x37
   786  0057                     	ds	1
   787  0058                     main@month:	
   788                           
   789                           ; 1 bytes @ 0x38
   790  0058                     	ds	1
   791  0059                     main@year:	
   792                           
   793                           ; 1 bytes @ 0x39
   794  0059                     	ds	1
   795                           
   796                           	psect	maintext
   797  0603                     __pmaintext:	
   798 ;;
   799 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   800 ;;
   801 ;; *************** function _main *****************
   802 ;; Defined at:
   803 ;;		line 16 in file "RTC_LCD.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;  year            1   57[BANK0 ] unsigned char 
   808 ;;  month           1   56[BANK0 ] unsigned char 
   809 ;;  day             1   55[BANK0 ] unsigned char 
   810 ;;  hour            1   54[BANK0 ] unsigned char 
   811 ;;  min             1   53[BANK0 ] unsigned char 
   812 ;;  sec             1   52[BANK0 ] unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;		None               void
   815 ;; Registers used:
   816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 17F/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   822 ;;      Params:         0       0       0       0       0
   823 ;;      Locals:         0       6       0       0       0
   824 ;;      Temps:          0       6       0       0       0
   825 ;;      Totals:         0      12       0       0       0
   826 ;;Total ram usage:       12 bytes
   827 ;; Hardware stack levels required when called:    7
   828 ;; This function calls:
   829 ;;		_LCD_GoToLine
   830 ;;		_LCD_Init
   831 ;;		_LCD_Printf
   832 ;;		_RTC_GetDate
   833 ;;		_RTC_GetTime
   834 ;;		_RTC_Init
   835 ;;		_RTC_SetDate
   836 ;;		_RTC_SetTime
   837 ;; This function is called by:
   838 ;;		Startup code after reset
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           
   843                           ;psect for function _main
   844  0603                     _main:	
   845                           
   846                           ;RTC_LCD.c: 18: unsigned char sec,min,hour,day,month,year;
   847                           ;RTC_LCD.c: 21: LCD_Init(8,2,16);
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   851  0603  3002               	movlw	2
   852  0604  1283               	bcf	3,5	;RP0=0, select bank0
   853  0605  1303               	bcf	3,6	;RP1=0, select bank0
   854  0606  00CE               	movwf	??_main
   855  0607  084E               	movf	??_main,w
   856  0608  00F8               	movwf	LCD_Init@var_lcdNoOfLines_u8
   857  0609  3010               	movlw	16
   858  060A  00CF               	movwf	??_main+1
   859  060B  084F               	movf	??_main+1,w
   860  060C  00F9               	movwf	LCD_Init@var_MaxCharsPerLine_u8
   861  060D  3008               	movlw	8
   862  060E  120A  118A  24DB  120A  118A  	fcall	_LCD_Init
   863                           
   864                           ;RTC_LCD.c: 24: RTC_Init();
   865  0613  120A  118A  22D5  120A  118A  	fcall	_RTC_Init
   866                           
   867                           ;RTC_LCD.c: 29: RTC_SetTime(0x10,0x40,0x20);
   868  0618  3040               	movlw	64
   869  0619  1283               	bcf	3,5	;RP0=0, select bank0
   870  061A  1303               	bcf	3,6	;RP1=0, select bank0
   871  061B  00CE               	movwf	??_main
   872  061C  084E               	movf	??_main,w
   873  061D  00F1               	movwf	RTC_SetTime@var_min_u8
   874  061E  3020               	movlw	32
   875  061F  00CF               	movwf	??_main+1
   876  0620  084F               	movf	??_main+1,w
   877  0621  00F2               	movwf	RTC_SetTime@var_sec_u8
   878  0622  3010               	movlw	16
   879  0623  120A  118A  2364  120A  118A  	fcall	_RTC_SetTime
   880                           
   881                           ;RTC_LCD.c: 30: RTC_SetDate(0x01,0x01,0x15);
   882  0628  01F1               	clrf	RTC_SetDate@var_month_u8
   883  0629  0AF1               	incf	RTC_SetDate@var_month_u8,f
   884  062A  3015               	movlw	21
   885  062B  1283               	bcf	3,5	;RP0=0, select bank0
   886  062C  1303               	bcf	3,6	;RP1=0, select bank0
   887  062D  00CE               	movwf	??_main
   888  062E  084E               	movf	??_main,w
   889  062F  00F2               	movwf	RTC_SetDate@var_year_u8
   890  0630  3001               	movlw	1
   891  0631  120A  118A  233C  120A  118A  	fcall	_RTC_SetDate
   892  0636                     l1696:	
   893                           ;RTC_LCD.c: 35: while(1)
   894                           
   895                           
   896                           ;RTC_LCD.c: 36: {
   897                           ;RTC_LCD.c: 37: LCD_GoToLine(1);
   898  0636  3001               	movlw	1
   899  0637  120A  118A  225C  120A  118A  	fcall	_LCD_GoToLine
   900                           
   901                           ;RTC_LCD.c: 40: RTC_GetTime(&hour,&min,&sec);
   902  063C  3055               	movlw	main@min& (0+255)
   903  063D  1283               	bcf	3,5	;RP0=0, select bank0
   904  063E  1303               	bcf	3,6	;RP1=0, select bank0
   905  063F  00CE               	movwf	??_main
   906  0640  084E               	movf	??_main,w
   907  0641  00F3               	movwf	RTC_GetTime@ptr_min_u8
   908  0642  3054               	movlw	main@sec& (0+255)
   909  0643  00CF               	movwf	??_main+1
   910  0644  084F               	movf	??_main+1,w
   911  0645  00F4               	movwf	RTC_GetTime@ptr_sec_u8
   912  0646  3056               	movlw	main@hour& (0+255)
   913  0647  120A  118A  2442  120A  118A  	fcall	_RTC_GetTime
   914                           
   915                           ;RTC_LCD.c: 41: LCD_Printf("time:%2x:%2x:%2x",hour,min,sec);
   916  064C  1283               	bcf	3,5	;RP0=0, select bank0
   917  064D  1303               	bcf	3,6	;RP1=0, select bank0
   918  064E  0856               	movf	main@hour,w
   919  064F  00CE               	movwf	??_main
   920  0650  01CF               	clrf	??_main+1
   921  0651  084E               	movf	??_main,w
   922  0652  00B1               	movwf	?_LCD_Printf
   923  0653  084F               	movf	??_main+1,w
   924  0654  00B2               	movwf	?_LCD_Printf+1
   925  0655  0855               	movf	main@min,w
   926  0656  00D0               	movwf	??_main+2
   927  0657  01D1               	clrf	??_main+3
   928  0658  0850               	movf	??_main+2,w
   929  0659  00B3               	movwf	?_LCD_Printf+2
   930  065A  0851               	movf	??_main+3,w
   931  065B  00B4               	movwf	?_LCD_Printf+3
   932  065C  0854               	movf	main@sec,w
   933  065D  00D2               	movwf	??_main+4
   934  065E  01D3               	clrf	??_main+5
   935  065F  0852               	movf	??_main+4,w
   936  0660  00B5               	movwf	?_LCD_Printf+4
   937  0661  0853               	movf	??_main+5,w
   938  0662  00B6               	movwf	?_LCD_Printf+5
   939  0663  3013               	movlw	(STR_1-__stringbase)& (0+255)
   940  0664  120A  118A  2697  120A  118A  	fcall	_LCD_Printf
   941                           
   942                           ;RTC_LCD.c: 45: RTC_GetDate(&day,&month,&year);
   943  0669  3058               	movlw	main@month& (0+255)
   944  066A  1283               	bcf	3,5	;RP0=0, select bank0
   945  066B  1303               	bcf	3,6	;RP1=0, select bank0
   946  066C  00CE               	movwf	??_main
   947  066D  084E               	movf	??_main,w
   948  066E  00F3               	movwf	RTC_GetDate@ptr_month_u8
   949  066F  3059               	movlw	main@year& (0+255)
   950  0670  00CF               	movwf	??_main+1
   951  0671  084F               	movf	??_main+1,w
   952  0672  00F4               	movwf	RTC_GetDate@ptr_year_u8
   953  0673  3057               	movlw	main@day& (0+255)
   954  0674  120A  118A  23F8  120A  118A  	fcall	_RTC_GetDate
   955                           
   956                           ;RTC_LCD.c: 47: LCD_Printf("\nDate:%2x/%2x/%2x",day,month,year);
   957  0679  1283               	bcf	3,5	;RP0=0, select bank0
   958  067A  1303               	bcf	3,6	;RP1=0, select bank0
   959  067B  0857               	movf	main@day,w
   960  067C  00CE               	movwf	??_main
   961  067D  01CF               	clrf	??_main+1
   962  067E  084E               	movf	??_main,w
   963  067F  00B1               	movwf	?_LCD_Printf
   964  0680  084F               	movf	??_main+1,w
   965  0681  00B2               	movwf	?_LCD_Printf+1
   966  0682  0858               	movf	main@month,w
   967  0683  00D0               	movwf	??_main+2
   968  0684  01D1               	clrf	??_main+3
   969  0685  0850               	movf	??_main+2,w
   970  0686  00B3               	movwf	?_LCD_Printf+2
   971  0687  0851               	movf	??_main+3,w
   972  0688  00B4               	movwf	?_LCD_Printf+3
   973  0689  0859               	movf	main@year,w
   974  068A  00D2               	movwf	??_main+4
   975  068B  01D3               	clrf	??_main+5
   976  068C  0852               	movf	??_main+4,w
   977  068D  00B5               	movwf	?_LCD_Printf+4
   978  068E  0853               	movf	??_main+5,w
   979  068F  00B6               	movwf	?_LCD_Printf+5
   980  0690  3001               	movlw	(STR_2-__stringbase)& (0+255)
   981  0691  120A  118A  2697  120A  118A  	fcall	_LCD_Printf
   982  0696  2E36               	goto	l1696
   983  0697                     __end_of_main:	
   984                           
   985                           	psect	text1
   986  0364                     __ptext1:	
   987 ;; *************** function _RTC_SetTime *****************
   988 ;; Defined at:
   989 ;;		line 86 in file "rtc.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  var_hour_u8     1    wreg     unsigned char 
   992 ;;  var_min_u8      1    1[COMMON] unsigned char 
   993 ;;  var_sec_u8      1    2[COMMON] unsigned char 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  var_hour_u8     1    3[COMMON] unsigned char 
   996 ;; Return value:  Size  Location     Type
   997 ;;		None               void
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0, pclath, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1005 ;;      Params:         2       0       0       0       0
  1006 ;;      Locals:         1       0       0       0       0
  1007 ;;      Temps:          0       0       0       0       0
  1008 ;;      Totals:         3       0       0       0       0
  1009 ;;Total ram usage:        3 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; Hardware stack levels required when called:    2
  1012 ;; This function calls:
  1013 ;;		_I2C_Start
  1014 ;;		_I2C_Stop
  1015 ;;		_I2C_Write
  1016 ;; This function is called by:
  1017 ;;		_main
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           
  1022                           ;psect for function _RTC_SetTime
  1023  0364                     _RTC_SetTime:	
  1024                           
  1025                           ;incstack = 0
  1026                           ; Regs used in _RTC_SetTime: [wreg+status,2+status,0+pclath+cstack]
  1027                           ;RTC_SetTime@var_hour_u8 stored from wreg
  1028  0364  00F3               	movwf	RTC_SetTime@var_hour_u8
  1029                           
  1030                           ;rtc.c: 88: I2C_Start();
  1031  0365  120A  118A  21E1  120A  118A  	fcall	_I2C_Start
  1032                           
  1033                           ;rtc.c: 90: I2C_Write(0xD0u);
  1034  036A  30D0               	movlw	208
  1035  036B  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1036                           
  1037                           ;rtc.c: 91: I2C_Write(0x00u);
  1038  0370  3000               	movlw	0
  1039  0371  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1040                           
  1041                           ;rtc.c: 93: I2C_Write(var_sec_u8);
  1042  0376  0872               	movf	RTC_SetTime@var_sec_u8,w
  1043  0377  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1044                           
  1045                           ;rtc.c: 94: I2C_Write(var_min_u8);
  1046  037C  0871               	movf	RTC_SetTime@var_min_u8,w
  1047  037D  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1048                           
  1049                           ;rtc.c: 95: I2C_Write(var_hour_u8);
  1050  0382  0873               	movf	RTC_SetTime@var_hour_u8,w
  1051  0383  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1052                           
  1053                           ;rtc.c: 97: I2C_Stop();
  1054  0388  120A  118A  21E7   	fcall	_I2C_Stop
  1055  038B  0008               	return
  1056  038C                     __end_of_RTC_SetTime:	
  1057                           
  1058                           	psect	text2
  1059  033C                     __ptext2:	
  1060 ;; *************** function _RTC_SetDate *****************
  1061 ;; Defined at:
  1062 ;;		line 117 in file "rtc.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;  var_day_u8      1    wreg     unsigned char 
  1065 ;;  var_month_u8    1    1[COMMON] unsigned char 
  1066 ;;  var_year_u8     1    2[COMMON] unsigned char 
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  var_day_u8      1    3[COMMON] unsigned char 
  1069 ;; Return value:  Size  Location     Type
  1070 ;;		None               void
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0, pclath, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 0/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1078 ;;      Params:         2       0       0       0       0
  1079 ;;      Locals:         1       0       0       0       0
  1080 ;;      Temps:          0       0       0       0       0
  1081 ;;      Totals:         3       0       0       0       0
  1082 ;;Total ram usage:        3 bytes
  1083 ;; Hardware stack levels used:    1
  1084 ;; Hardware stack levels required when called:    2
  1085 ;; This function calls:
  1086 ;;		_I2C_Start
  1087 ;;		_I2C_Stop
  1088 ;;		_I2C_Write
  1089 ;; This function is called by:
  1090 ;;		_main
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           
  1095                           ;psect for function _RTC_SetDate
  1096  033C                     _RTC_SetDate:	
  1097                           
  1098                           ;incstack = 0
  1099                           ; Regs used in _RTC_SetDate: [wreg+status,2+status,0+pclath+cstack]
  1100                           ;RTC_SetDate@var_day_u8 stored from wreg
  1101  033C  00F3               	movwf	RTC_SetDate@var_day_u8
  1102                           
  1103                           ;rtc.c: 119: I2C_Start();
  1104  033D  120A  118A  21E1  120A  118A  	fcall	_I2C_Start
  1105                           
  1106                           ;rtc.c: 121: I2C_Write(0xD0u);
  1107  0342  30D0               	movlw	208
  1108  0343  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1109                           
  1110                           ;rtc.c: 122: I2C_Write(0x04u);
  1111  0348  3004               	movlw	4
  1112  0349  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1113                           
  1114                           ;rtc.c: 124: I2C_Write(var_day_u8);
  1115  034E  0873               	movf	RTC_SetDate@var_day_u8,w
  1116  034F  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1117                           
  1118                           ;rtc.c: 125: I2C_Write(var_month_u8);
  1119  0354  0871               	movf	RTC_SetDate@var_month_u8,w
  1120  0355  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1121                           
  1122                           ;rtc.c: 126: I2C_Write(var_year_u8);
  1123  035A  0872               	movf	RTC_SetDate@var_year_u8,w
  1124  035B  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1125                           
  1126                           ;rtc.c: 128: I2C_Stop();
  1127  0360  120A  118A  21E7   	fcall	_I2C_Stop
  1128  0363  0008               	return
  1129  0364                     __end_of_RTC_SetDate:	
  1130                           
  1131                           	psect	text3
  1132  02D5                     __ptext3:	
  1133 ;; *************** function _RTC_Init *****************
  1134 ;; Defined at:
  1135 ;;		line 57 in file "rtc.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;		None               void
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0, pclath, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1149 ;;      Params:         0       0       0       0       0
  1150 ;;      Locals:         0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0
  1152 ;;      Totals:         0       0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    2
  1156 ;; This function calls:
  1157 ;;		_I2C_Init
  1158 ;;		_I2C_Start
  1159 ;;		_I2C_Stop
  1160 ;;		_I2C_Write
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _RTC_Init
  1168  02D5                     _RTC_Init:	
  1169                           
  1170                           ;rtc.c: 59: I2C_Init();
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _RTC_Init: [wreg+status,2+status,0+pclath+cstack]
  1174  02D5  120A  118A  2229  120A  118A  	fcall	_I2C_Init
  1175                           
  1176                           ;rtc.c: 60: I2C_Start();
  1177  02DA  120A  118A  21E1  120A  118A  	fcall	_I2C_Start
  1178                           
  1179                           ;rtc.c: 62: I2C_Write(0xD0u);
  1180  02DF  30D0               	movlw	208
  1181  02E0  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1182                           
  1183                           ;rtc.c: 63: I2C_Write(0x07u);
  1184  02E5  3007               	movlw	7
  1185  02E6  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1186                           
  1187                           ;rtc.c: 65: I2C_Write(0x00);
  1188  02EB  3000               	movlw	0
  1189  02EC  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1190                           
  1191                           ;rtc.c: 67: I2C_Stop();
  1192  02F1  120A  118A  21E7   	fcall	_I2C_Stop
  1193  02F4  0008               	return
  1194  02F5                     __end_of_RTC_Init:	
  1195                           
  1196                           	psect	text4
  1197  0229                     __ptext4:	
  1198 ;; *************** function _I2C_Init *****************
  1199 ;; Defined at:
  1200 ;;		line 87 in file "i2c.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;		None
  1205 ;; Return value:  Size  Location     Type
  1206 ;;		None               void
  1207 ;; Registers used:
  1208 ;;		wreg
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1214 ;;      Params:         0       0       0       0       0
  1215 ;;      Locals:         0       0       0       0       0
  1216 ;;      Temps:          0       0       0       0       0
  1217 ;;      Totals:         0       0       0       0       0
  1218 ;;Total ram usage:        0 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_RTC_Init
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function _I2C_Init
  1229  0229                     _I2C_Init:	
  1230                           
  1231                           ;i2c.c: 89: TRISC3 = 0x01u;
  1232                           
  1233                           ;incstack = 0
  1234                           ; Regs used in _I2C_Init: [wreg]
  1235  0229  1683               	bsf	3,5	;RP0=1, select bank1
  1236  022A  1303               	bcf	3,6	;RP1=0, select bank1
  1237  022B  1587               	bsf	7,3	;volatile
  1238                           
  1239                           ;i2c.c: 90: TRISC4 = 0x01u;
  1240  022C  1607               	bsf	7,4	;volatile
  1241                           
  1242                           ;i2c.c: 92: SSPSTAT |= 0x80;
  1243  022D  1794               	bsf	20,7	;volatile
  1244                           
  1245                           ;i2c.c: 93: SSPCON = 0x28;
  1246  022E  3028               	movlw	40
  1247  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1248  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1249  0231  0094               	movwf	20	;volatile
  1250                           
  1251                           ;i2c.c: 94: SSPADD = 50;
  1252  0232  3032               	movlw	50
  1253  0233  1683               	bsf	3,5	;RP0=1, select bank1
  1254  0234  1303               	bcf	3,6	;RP1=0, select bank1
  1255  0235  0093               	movwf	19	;volatile
  1256  0236  0008               	return
  1257  0237                     __end_of_I2C_Init:	
  1258                           
  1259                           	psect	text5
  1260  0442                     __ptext5:	
  1261 ;; *************** function _RTC_GetTime *****************
  1262 ;; Defined at:
  1263 ;;		line 147 in file "rtc.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  ptr_hour_u8     1    wreg     PTR unsigned char 
  1266 ;;		 -> main@hour(1), 
  1267 ;;  ptr_min_u8      1    3[COMMON] PTR unsigned char 
  1268 ;;		 -> main@min(1), 
  1269 ;;  ptr_sec_u8      1    4[COMMON] PTR unsigned char 
  1270 ;;		 -> main@sec(1), 
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;  ptr_hour_u8     1    6[COMMON] PTR unsigned char 
  1273 ;;		 -> main@hour(1), 
  1274 ;; Return value:  Size  Location     Type
  1275 ;;		None               void
  1276 ;; Registers used:
  1277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1283 ;;      Params:         2       0       0       0       0
  1284 ;;      Locals:         1       0       0       0       0
  1285 ;;      Temps:          1       0       0       0       0
  1286 ;;      Totals:         4       0       0       0       0
  1287 ;;Total ram usage:        4 bytes
  1288 ;; Hardware stack levels used:    1
  1289 ;; Hardware stack levels required when called:    2
  1290 ;; This function calls:
  1291 ;;		_I2C_Read
  1292 ;;		_I2C_Start
  1293 ;;		_I2C_Stop
  1294 ;;		_I2C_Write
  1295 ;; This function is called by:
  1296 ;;		_main
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function _RTC_GetTime
  1302  0442                     _RTC_GetTime:	
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in _RTC_GetTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1306                           ;RTC_GetTime@ptr_hour_u8 stored from wreg
  1307  0442  00F6               	movwf	RTC_GetTime@ptr_hour_u8
  1308                           
  1309                           ;rtc.c: 149: I2C_Start();
  1310  0443  120A  118A  21E1  120A  118A  	fcall	_I2C_Start
  1311                           
  1312                           ;rtc.c: 151: I2C_Write(0xD0u);
  1313  0448  30D0               	movlw	208
  1314  0449  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1315                           
  1316                           ;rtc.c: 152: I2C_Write(0x00u);
  1317  044E  3000               	movlw	0
  1318  044F  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1319                           
  1320                           ;rtc.c: 154: I2C_Stop();
  1321  0454  120A  118A  21E7  120A  118A  	fcall	_I2C_Stop
  1322                           
  1323                           ;rtc.c: 156: I2C_Start();
  1324  0459  120A  118A  21E1  120A  118A  	fcall	_I2C_Start
  1325                           
  1326                           ;rtc.c: 157: I2C_Write(0xD1u);
  1327  045E  30D1               	movlw	209
  1328  045F  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1329                           
  1330                           ;rtc.c: 159: *ptr_sec_u8 = I2C_Read(1);
  1331  0464  3001               	movlw	1
  1332  0465  120A  118A  22F5  120A  118A  	fcall	_I2C_Read
  1333  046A  00F5               	movwf	??_RTC_GetTime
  1334  046B  0874               	movf	RTC_GetTime@ptr_sec_u8,w
  1335  046C  0084               	movwf	4
  1336  046D  0875               	movf	??_RTC_GetTime,w
  1337  046E  1383               	bcf	3,7	;select IRP bank0
  1338  046F  0080               	movwf	0
  1339                           
  1340                           ;rtc.c: 160: *ptr_min_u8 = I2C_Read(1);
  1341  0470  3001               	movlw	1
  1342  0471  120A  118A  22F5  120A  118A  	fcall	_I2C_Read
  1343  0476  00F5               	movwf	??_RTC_GetTime
  1344  0477  0873               	movf	RTC_GetTime@ptr_min_u8,w
  1345  0478  0084               	movwf	4
  1346  0479  0875               	movf	??_RTC_GetTime,w
  1347  047A  1383               	bcf	3,7	;select IRP bank0
  1348  047B  0080               	movwf	0
  1349                           
  1350                           ;rtc.c: 161: *ptr_hour_u8 = I2C_Read(0);
  1351  047C  3000               	movlw	0
  1352  047D  120A  118A  22F5  120A  118A  	fcall	_I2C_Read
  1353  0482  00F5               	movwf	??_RTC_GetTime
  1354  0483  0876               	movf	RTC_GetTime@ptr_hour_u8,w
  1355  0484  0084               	movwf	4
  1356  0485  0875               	movf	??_RTC_GetTime,w
  1357  0486  1383               	bcf	3,7	;select IRP bank0
  1358  0487  0080               	movwf	0
  1359                           
  1360                           ;rtc.c: 163: I2C_Stop();
  1361  0488  120A  118A  21E7   	fcall	_I2C_Stop
  1362  048B  0008               	return
  1363  048C                     __end_of_RTC_GetTime:	
  1364                           
  1365                           	psect	text6
  1366  03F8                     __ptext6:	
  1367 ;; *************** function _RTC_GetDate *****************
  1368 ;; Defined at:
  1369 ;;		line 183 in file "rtc.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  ptr_day_u8      1    wreg     PTR unsigned char 
  1372 ;;		 -> main@day(1), 
  1373 ;;  ptr_month_u8    1    3[COMMON] PTR unsigned char 
  1374 ;;		 -> main@month(1), 
  1375 ;;  ptr_year_u8     1    4[COMMON] PTR unsigned char 
  1376 ;;		 -> main@year(1), 
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;  ptr_day_u8      1    6[COMMON] PTR unsigned char 
  1379 ;;		 -> main@day(1), 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;		None               void
  1382 ;; Registers used:
  1383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1389 ;;      Params:         2       0       0       0       0
  1390 ;;      Locals:         1       0       0       0       0
  1391 ;;      Temps:          1       0       0       0       0
  1392 ;;      Totals:         4       0       0       0       0
  1393 ;;Total ram usage:        4 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    2
  1396 ;; This function calls:
  1397 ;;		_I2C_Read
  1398 ;;		_I2C_Start
  1399 ;;		_I2C_Stop
  1400 ;;		_I2C_Write
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           
  1407                           ;psect for function _RTC_GetDate
  1408  03F8                     _RTC_GetDate:	
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in _RTC_GetDate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1412                           ;RTC_GetDate@ptr_day_u8 stored from wreg
  1413  03F8  00F6               	movwf	RTC_GetDate@ptr_day_u8
  1414                           
  1415                           ;rtc.c: 185: I2C_Start();
  1416  03F9  120A  118A  21E1  120A  118A  	fcall	_I2C_Start
  1417                           
  1418                           ;rtc.c: 187: I2C_Write(0xD0u);
  1419  03FE  30D0               	movlw	208
  1420  03FF  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1421                           
  1422                           ;rtc.c: 188: I2C_Write(0x04u);
  1423  0404  3004               	movlw	4
  1424  0405  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1425                           
  1426                           ;rtc.c: 190: I2C_Stop();
  1427  040A  120A  118A  21E7  120A  118A  	fcall	_I2C_Stop
  1428                           
  1429                           ;rtc.c: 193: I2C_Start();
  1430  040F  120A  118A  21E1  120A  118A  	fcall	_I2C_Start
  1431                           
  1432                           ;rtc.c: 194: I2C_Write(0xD1u);
  1433  0414  30D1               	movlw	209
  1434  0415  120A  118A  221C  120A  118A  	fcall	_I2C_Write
  1435                           
  1436                           ;rtc.c: 196: *ptr_day_u8 = I2C_Read(1);
  1437  041A  3001               	movlw	1
  1438  041B  120A  118A  22F5  120A  118A  	fcall	_I2C_Read
  1439  0420  00F5               	movwf	??_RTC_GetDate
  1440  0421  0876               	movf	RTC_GetDate@ptr_day_u8,w
  1441  0422  0084               	movwf	4
  1442  0423  0875               	movf	??_RTC_GetDate,w
  1443  0424  1383               	bcf	3,7	;select IRP bank0
  1444  0425  0080               	movwf	0
  1445                           
  1446                           ;rtc.c: 197: *ptr_month_u8 = I2C_Read(1);
  1447  0426  3001               	movlw	1
  1448  0427  120A  118A  22F5  120A  118A  	fcall	_I2C_Read
  1449  042C  00F5               	movwf	??_RTC_GetDate
  1450  042D  0873               	movf	RTC_GetDate@ptr_month_u8,w
  1451  042E  0084               	movwf	4
  1452  042F  0875               	movf	??_RTC_GetDate,w
  1453  0430  1383               	bcf	3,7	;select IRP bank0
  1454  0431  0080               	movwf	0
  1455                           
  1456                           ;rtc.c: 198: *ptr_year_u8 = I2C_Read(0);
  1457  0432  3000               	movlw	0
  1458  0433  120A  118A  22F5  120A  118A  	fcall	_I2C_Read
  1459  0438  00F5               	movwf	??_RTC_GetDate
  1460  0439  0874               	movf	RTC_GetDate@ptr_year_u8,w
  1461  043A  0084               	movwf	4
  1462  043B  0875               	movf	??_RTC_GetDate,w
  1463  043C  1383               	bcf	3,7	;select IRP bank0
  1464  043D  0080               	movwf	0
  1465                           
  1466                           ;rtc.c: 200: I2C_Stop();
  1467  043E  120A  118A  21E7   	fcall	_I2C_Stop
  1468  0441  0008               	return
  1469  0442                     __end_of_RTC_GetDate:	
  1470                           
  1471                           	psect	text7
  1472  021C                     __ptext7:	
  1473 ;; *************** function _I2C_Write *****************
  1474 ;; Defined at:
  1475 ;;		line 179 in file "i2c.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  var_i2cData_    1    wreg     unsigned char 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  var_i2cData_    1    0[COMMON] unsigned char 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;		None               void
  1482 ;; Registers used:
  1483 ;;		wreg, status,2, status,0, pclath, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1489 ;;      Params:         0       0       0       0       0
  1490 ;;      Locals:         1       0       0       0       0
  1491 ;;      Temps:          0       0       0       0       0
  1492 ;;      Totals:         1       0       0       0       0
  1493 ;;Total ram usage:        1 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    1
  1496 ;; This function calls:
  1497 ;;		_i2c_WaitForIdle
  1498 ;; This function is called by:
  1499 ;;		_RTC_Init
  1500 ;;		_RTC_SetTime
  1501 ;;		_RTC_SetDate
  1502 ;;		_RTC_GetTime
  1503 ;;		_RTC_GetDate
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           
  1508                           ;psect for function _I2C_Write
  1509  021C                     _I2C_Write:	
  1510                           
  1511                           ;incstack = 0
  1512                           ; Regs used in _I2C_Write: [wreg+status,2+status,0+pclath+cstack]
  1513                           ;I2C_Write@var_i2cData_u8 stored from wreg
  1514  021C  00F0               	movwf	I2C_Write@var_i2cData_u8
  1515                           
  1516                           ;i2c.c: 183: SSPBUF = var_i2cData_u8;
  1517  021D  0870               	movf	I2C_Write@var_i2cData_u8,w
  1518  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1519  021F  1303               	bcf	3,6	;RP1=0, select bank0
  1520  0220  0093               	movwf	19	;volatile
  1521  0221                     l98:	
  1522                           ;i2c.c: 184: while(BF==1);
  1523                           
  1524  0221  1683               	bsf	3,5	;RP0=1, select bank1
  1525  0222  1303               	bcf	3,6	;RP1=0, select bank1
  1526  0223  1814               	btfsc	20,0	;volatile
  1527  0224  2A21               	goto	l98
  1528                           
  1529                           ;i2c.c: 185: i2c_WaitForIdle();
  1530  0225  120A  118A  2211   	fcall	_i2c_WaitForIdle
  1531  0228  0008               	return
  1532  0229                     __end_of_I2C_Write:	
  1533                           
  1534                           	psect	text8
  1535  01E7                     __ptext8:	
  1536 ;; *************** function _I2C_Stop *****************
  1537 ;; Defined at:
  1538 ;;		line 147 in file "i2c.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;		None
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;		None               void
  1545 ;; Registers used:
  1546 ;;		None
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1552 ;;      Params:         0       0       0       0       0
  1553 ;;      Locals:         0       0       0       0       0
  1554 ;;      Temps:          0       0       0       0       0
  1555 ;;      Totals:         0       0       0       0       0
  1556 ;;Total ram usage:        0 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; This function calls:
  1559 ;;		Nothing
  1560 ;; This function is called by:
  1561 ;;		_RTC_Init
  1562 ;;		_RTC_SetTime
  1563 ;;		_RTC_SetDate
  1564 ;;		_RTC_GetTime
  1565 ;;		_RTC_GetDate
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           
  1570                           ;psect for function _I2C_Stop
  1571  01E7                     _I2C_Stop:	
  1572                           
  1573                           ;i2c.c: 149: PEN = 1;
  1574                           
  1575                           ;incstack = 0
  1576                           ; Regs used in _I2C_Stop: []
  1577  01E7  1683               	bsf	3,5	;RP0=1, select bank1
  1578  01E8  1303               	bcf	3,6	;RP1=0, select bank1
  1579  01E9  1511               	bsf	17,2	;volatile
  1580  01EA                     l92:	
  1581                           ;i2c.c: 150: while(PEN == 1);
  1582                           
  1583  01EA  1D11               	btfss	17,2	;volatile
  1584  01EB  0008               	return
  1585  01EC  29EA               	goto	l92
  1586  01ED                     __end_of_I2C_Stop:	
  1587                           
  1588                           	psect	text9
  1589  01E1                     __ptext9:	
  1590 ;; *************** function _I2C_Start *****************
  1591 ;; Defined at:
  1592 ;;		line 118 in file "i2c.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;		None
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;		None
  1597 ;; Return value:  Size  Location     Type
  1598 ;;		None               void
  1599 ;; Registers used:
  1600 ;;		None
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1606 ;;      Params:         0       0       0       0       0
  1607 ;;      Locals:         0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0
  1609 ;;      Totals:         0       0       0       0       0
  1610 ;;Total ram usage:        0 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; This function calls:
  1613 ;;		Nothing
  1614 ;; This function is called by:
  1615 ;;		_RTC_Init
  1616 ;;		_RTC_SetTime
  1617 ;;		_RTC_SetDate
  1618 ;;		_RTC_GetTime
  1619 ;;		_RTC_GetDate
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function _I2C_Start
  1625  01E1                     _I2C_Start:	
  1626                           
  1627                           ;i2c.c: 120: SEN = 1;
  1628                           
  1629                           ;incstack = 0
  1630                           ; Regs used in _I2C_Start: []
  1631  01E1  1683               	bsf	3,5	;RP0=1, select bank1
  1632  01E2  1303               	bcf	3,6	;RP1=0, select bank1
  1633  01E3  1411               	bsf	17,0	;volatile
  1634  01E4                     l86:	
  1635                           ;i2c.c: 121: while(SEN == 1);
  1636                           
  1637  01E4  1C11               	btfss	17,0	;volatile
  1638  01E5  0008               	return
  1639  01E6  29E4               	goto	l86
  1640  01E7                     __end_of_I2C_Start:	
  1641                           
  1642                           	psect	text10
  1643  02F5                     __ptext10:	
  1644 ;; *************** function _I2C_Read *****************
  1645 ;; Defined at:
  1646 ;;		line 214 in file "i2c.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  var_ackOptio    1    wreg     unsigned char 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  var_ackOptio    1    1[COMMON] unsigned char 
  1651 ;;  var_i2cData_    1    2[COMMON] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      unsigned char 
  1654 ;; Registers used:
  1655 ;;		wreg, status,2, status,0, pclath, cstack
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1661 ;;      Params:         0       0       0       0       0
  1662 ;;      Locals:         2       0       0       0       0
  1663 ;;      Temps:          1       0       0       0       0
  1664 ;;      Totals:         3       0       0       0       0
  1665 ;;Total ram usage:        3 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    1
  1668 ;; This function calls:
  1669 ;;		_i2c_Ack
  1670 ;;		_i2c_NoAck
  1671 ;;		_i2c_WaitForIdle
  1672 ;; This function is called by:
  1673 ;;		_RTC_GetTime
  1674 ;;		_RTC_GetDate
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           
  1679                           ;psect for function _I2C_Read
  1680  02F5                     _I2C_Read:	
  1681                           
  1682                           ;incstack = 0
  1683                           ; Regs used in _I2C_Read: [wreg+status,2+status,0+pclath+cstack]
  1684                           ;I2C_Read@var_ackOption_u8 stored from wreg
  1685  02F5  00F1               	movwf	I2C_Read@var_ackOption_u8
  1686                           
  1687                           ;i2c.c: 216: uint8_t var_i2cData_u8=0x00;
  1688  02F6  01F2               	clrf	I2C_Read@var_i2cData_u8
  1689                           
  1690                           ;i2c.c: 218: RCEN = 1;
  1691  02F7  1683               	bsf	3,5	;RP0=1, select bank1
  1692  02F8  1303               	bcf	3,6	;RP1=0, select bank1
  1693  02F9  1591               	bsf	17,3	;volatile
  1694  02FA                     l104:	
  1695                           ;i2c.c: 219: while(BF==0);
  1696                           
  1697  02FA  1C14               	btfss	20,0	;volatile
  1698  02FB  2AFA               	goto	l104
  1699                           
  1700                           ;i2c.c: 220: var_i2cData_u8 = SSPBUF;
  1701  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1702  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1703  02FE  0813               	movf	19,w	;volatile
  1704  02FF  00F0               	movwf	??_I2C_Read
  1705  0300  0870               	movf	??_I2C_Read,w
  1706  0301  00F2               	movwf	I2C_Read@var_i2cData_u8
  1707                           
  1708                           ;i2c.c: 221: i2c_WaitForIdle();
  1709  0302  120A  118A  2211  120A  118A  	fcall	_i2c_WaitForIdle
  1710                           
  1711                           ;i2c.c: 223: if(var_ackOption_u8==1)
  1712  0307  0871               	movf	I2C_Read@var_ackOption_u8,w
  1713  0308  3A01               	xorlw	1
  1714  0309  1D03               	skipz
  1715  030A  2B11               	goto	l1430
  1716                           
  1717                           ;i2c.c: 224: {
  1718                           ;i2c.c: 225: i2c_Ack();
  1719  030B  120A  118A  21ED  120A  118A  	fcall	_i2c_Ack
  1720                           
  1721                           ;i2c.c: 226: }
  1722  0310  2B14               	goto	l1432
  1723  0311                     l1430:	
  1724                           
  1725                           ;i2c.c: 227: else
  1726                           ;i2c.c: 228: {
  1727                           ;i2c.c: 229: i2c_NoAck();
  1728  0311  120A  118A  21F4   	fcall	_i2c_NoAck
  1729  0314                     l1432:	
  1730                           
  1731                           ;i2c.c: 230: }
  1732                           ;i2c.c: 232: return var_i2cData_u8;
  1733  0314  0872               	movf	I2C_Read@var_i2cData_u8,w
  1734  0315  0008               	return
  1735  0316                     __end_of_I2C_Read:	
  1736                           
  1737                           	psect	text11
  1738  0211                     __ptext11:	
  1739 ;; *************** function _i2c_WaitForIdle *****************
  1740 ;; Defined at:
  1741 ;;		line 258 in file "i2c.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;		None               void
  1748 ;; Registers used:
  1749 ;;		None
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1755 ;;      Params:         0       0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0
  1757 ;;      Temps:          0       0       0       0       0
  1758 ;;      Totals:         0       0       0       0       0
  1759 ;;Total ram usage:        0 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_I2C_Write
  1765 ;;		_I2C_Read
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           
  1770                           ;psect for function _i2c_WaitForIdle
  1771  0211                     _i2c_WaitForIdle:	
  1772  0211                     l112:	
  1773                           ;i2c.c: 260: while ( (SEN == 1) || (RSEN == 1) || (PEN == 1) || (RCEN == 1) || (R_W == 1
      +                          ) );
  1774                           
  1775                           ;incstack = 0
  1776                           ; Regs used in _i2c_WaitForIdle: []
  1777                           
  1778  0211  1683               	bsf	3,5	;RP0=1, select bank1
  1779  0212  1303               	bcf	3,6	;RP1=0, select bank1
  1780  0213  1C11               	btfss	17,0	;volatile
  1781  0214  1891               	btfsc	17,1	;volatile
  1782  0215  2A11               	goto	l112
  1783  0216  1D11               	btfss	17,2	;volatile
  1784  0217  1991               	btfsc	17,3	;volatile
  1785  0218  2A11               	goto	l112
  1786  0219  1D14               	btfss	20,2	;volatile
  1787  021A  0008               	return
  1788  021B  2A11               	goto	l112
  1789  021C                     __end_of_i2c_WaitForIdle:	
  1790                           
  1791                           	psect	text12
  1792  01F4                     __ptext12:	
  1793 ;; *************** function _i2c_NoAck *****************
  1794 ;; Defined at:
  1795 ;;		line 299 in file "i2c.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;		None               void
  1802 ;; Registers used:
  1803 ;;		None
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1809 ;;      Params:         0       0       0       0       0
  1810 ;;      Locals:         0       0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0
  1812 ;;      Totals:         0       0       0       0       0
  1813 ;;Total ram usage:        0 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; This function calls:
  1816 ;;		Nothing
  1817 ;; This function is called by:
  1818 ;;		_I2C_Read
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           
  1823                           ;psect for function _i2c_NoAck
  1824  01F4                     _i2c_NoAck:	
  1825                           
  1826                           ;i2c.c: 301: ACKDT = 1;
  1827                           
  1828                           ;incstack = 0
  1829                           ; Regs used in _i2c_NoAck: []
  1830  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  1831  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  1832  01F6  1691               	bsf	17,5	;volatile
  1833                           
  1834                           ;i2c.c: 302: ACKEN = 1;
  1835  01F7  1611               	bsf	17,4	;volatile
  1836  01F8                     l124:	
  1837                           ;i2c.c: 303: while(ACKEN == 1);
  1838                           
  1839  01F8  1E11               	btfss	17,4	;volatile
  1840  01F9  0008               	return
  1841  01FA  29F8               	goto	l124
  1842  01FB                     __end_of_i2c_NoAck:	
  1843                           
  1844                           	psect	text13
  1845  01ED                     __ptext13:	
  1846 ;; *************** function _i2c_Ack *****************
  1847 ;; Defined at:
  1848 ;;		line 279 in file "i2c.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;		None
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;		None
  1853 ;; Return value:  Size  Location     Type
  1854 ;;		None               void
  1855 ;; Registers used:
  1856 ;;		None
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1862 ;;      Params:         0       0       0       0       0
  1863 ;;      Locals:         0       0       0       0       0
  1864 ;;      Temps:          0       0       0       0       0
  1865 ;;      Totals:         0       0       0       0       0
  1866 ;;Total ram usage:        0 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_I2C_Read
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           
  1876                           ;psect for function _i2c_Ack
  1877  01ED                     _i2c_Ack:	
  1878                           
  1879                           ;i2c.c: 281: ACKDT = 0;
  1880                           
  1881                           ;incstack = 0
  1882                           ; Regs used in _i2c_Ack: []
  1883  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  1884  01EE  1303               	bcf	3,6	;RP1=0, select bank1
  1885  01EF  1291               	bcf	17,5	;volatile
  1886                           
  1887                           ;i2c.c: 282: ACKEN = 1;
  1888  01F0  1611               	bsf	17,4	;volatile
  1889  01F1                     l118:	
  1890                           ;i2c.c: 283: while(ACKEN == 1);
  1891                           
  1892  01F1  1E11               	btfss	17,4	;volatile
  1893  01F2  0008               	return
  1894  01F3  29F1               	goto	l118
  1895  01F4                     __end_of_i2c_Ack:	
  1896                           
  1897                           	psect	text14
  1898  0697                     __ptext14:	
  1899 ;; *************** function _LCD_Printf *****************
  1900 ;; Defined at:
  1901 ;;		line 673 in file "lcd.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  argList         1    wreg     PTR const unsigned char 
  1904 ;;		 -> STR_2(18), STR_1(17), 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  argList         1   41[BANK0 ] PTR const unsigned char 
  1907 ;;		 -> STR_2(18), STR_1(17), 
  1908 ;;  var_num_u32     4   35[BANK0 ] unsigned long 
  1909 ;;  var_num_s32     4   25[BANK0 ] long 
  1910 ;;  var_floatNum    3   29[BANK0 ] long 
  1911 ;;  var_num_u16     2   39[BANK0 ] unsigned int 
  1912 ;;  var_num_s16     2   32[BANK0 ] int 
  1913 ;;  argp            1   45[BANK0 ] PTR void [1]
  1914 ;;		 -> ?_LCD_Printf(0), 
  1915 ;;  ch              1   44[BANK0 ] unsigned char 
  1916 ;;  ptr             1   43[BANK0 ] PTR const unsigned char 
  1917 ;;		 -> STR_2(18), STR_1(17), 
  1918 ;;  var_numOfDig    1   42[BANK0 ] unsigned char 
  1919 ;;  str             1   34[BANK0 ] PTR unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;		None               void
  1922 ;; Registers used:
  1923 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1929 ;;      Params:         0       6       0       0       0
  1930 ;;      Locals:         0      21       0       0       0
  1931 ;;      Temps:          0       2       0       0       0
  1932 ;;      Totals:         0      29       0       0       0
  1933 ;;Total ram usage:       29 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    6
  1936 ;; This function calls:
  1937 ;;		_LCD_DisplayChar
  1938 ;;		_LCD_DisplayHexNumber
  1939 ;;		___bmul
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           
  1946                           ;psect for function _LCD_Printf
  1947  0697                     _LCD_Printf:	
  1948                           
  1949                           ;incstack = 0
  1950                           ; Regs used in _LCD_Printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1951                           ;LCD_Printf@argList stored from wreg
  1952  0697  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0698  1303               	bcf	3,6	;RP1=0, select bank0
  1954  0699  00C9               	movwf	LCD_Printf@argList
  1955                           
  1956                           ;lcd.c: 675: const char *ptr;
  1957                           ;lcd.c: 676: double var_floatNum_f32;
  1958                           ;lcd.c: 677: va_list argp;
  1959                           ;lcd.c: 678: sint16_t var_num_s16;
  1960                           ;lcd.c: 679: sint32_t var_num_s32;
  1961                           ;lcd.c: 680: uint16_t var_num_u16;
  1962                           ;lcd.c: 681: uint32_t var_num_u32;
  1963                           ;lcd.c: 682: char *str;
  1964                           ;lcd.c: 683: char ch;
  1965                           ;lcd.c: 684: uint8_t var_numOfDigitsToDisp_u8;
  1966                           ;lcd.c: 686: *argp = __va_start();
  1967  069A  3031               	movlw	?_LCD_Printf& (0+255)
  1968  069B  00B7               	movwf	??_LCD_Printf
  1969  069C  0837               	movf	??_LCD_Printf,w
  1970  069D  00CD               	movwf	LCD_Printf@argp
  1971                           
  1972                           ;lcd.c: 689: for(ptr = argList; *ptr != '\0'; ptr++)
  1973  069E  0849               	movf	LCD_Printf@argList,w
  1974  069F  00B7               	movwf	??_LCD_Printf
  1975  06A0  0837               	movf	??_LCD_Printf,w
  1976  06A1  00CB               	movwf	LCD_Printf@ptr
  1977  06A2                     l1670:	
  1978  06A2  084B               	movf	LCD_Printf@ptr,w
  1979  06A3  0084               	movwf	4
  1980  06A4  120A  118A  2003  120A  118A  	fcall	stringdir
  1981  06A9  3800               	iorlw	0
  1982  06AA  1903               	btfsc	3,2
  1983  06AB  0008               	return
  1984                           
  1985                           ;lcd.c: 690: {
  1986                           ;lcd.c: 692: ch= *ptr;
  1987  06AC  084B               	movf	LCD_Printf@ptr,w
  1988  06AD  0084               	movwf	4
  1989  06AE  120A  118A  2003  120A  118A  	fcall	stringdir
  1990  06B3  00B7               	movwf	??_LCD_Printf
  1991  06B4  0837               	movf	??_LCD_Printf,w
  1992  06B5  00CC               	movwf	LCD_Printf@ch
  1993                           
  1994                           ;lcd.c: 693: if(ch == '%')
  1995  06B6  084C               	movf	LCD_Printf@ch,w
  1996  06B7  3A25               	xorlw	37
  1997  06B8  1D03               	skipz
  1998  06B9  2FD1               	goto	l1666
  1999                           
  2000                           ;lcd.c: 694: {
  2001                           ;lcd.c: 695: ptr++;
  2002  06BA  3001               	movlw	1
  2003  06BB  00B7               	movwf	??_LCD_Printf
  2004  06BC  0837               	movf	??_LCD_Printf,w
  2005  06BD  07CB               	addwf	LCD_Printf@ptr,f
  2006                           
  2007                           ;lcd.c: 696: ch = *ptr;
  2008  06BE  084B               	movf	LCD_Printf@ptr,w
  2009  06BF  0084               	movwf	4
  2010  06C0  120A  118A  2003  120A  118A  	fcall	stringdir
  2011  06C5  00B7               	movwf	??_LCD_Printf
  2012  06C6  0837               	movf	??_LCD_Printf,w
  2013  06C7  00CC               	movwf	LCD_Printf@ch
  2014                           
  2015                           ;lcd.c: 697: if((ch>=0x30) && (ch<=0x39))
  2016  06C8  3030               	movlw	48
  2017  06C9  024C               	subwf	LCD_Printf@ch,w
  2018  06CA  1C03               	skipc
  2019  06CB  2EF9               	goto	l1608
  2020  06CC  303A               	movlw	58
  2021  06CD  024C               	subwf	LCD_Printf@ch,w
  2022  06CE  1803               	skipnc
  2023  06CF  2EF9               	goto	l1608
  2024                           
  2025                           ;lcd.c: 698: {
  2026                           ;lcd.c: 699: var_numOfDigitsToDisp_u8 = 0;
  2027  06D0  01CA               	clrf	LCD_Printf@var_numOfDigitsToDisp_u8
  2028  06D1                     l1604:	
  2029                           ;lcd.c: 700: while((ch>=0x30) && (ch<=0x39))
  2030                           
  2031  06D1  3030               	movlw	48
  2032  06D2  024C               	subwf	LCD_Printf@ch,w
  2033  06D3  1C03               	skipc
  2034  06D4  2F9F               	goto	l1664
  2035  06D5  303A               	movlw	58
  2036  06D6  024C               	subwf	LCD_Printf@ch,w
  2037  06D7  1803               	btfsc	3,0
  2038  06D8  2F9F               	goto	l1664
  2039                           
  2040                           ;lcd.c: 701: {
  2041                           ;lcd.c: 702: var_numOfDigitsToDisp_u8 = (var_numOfDigitsToDisp_u8 * 10) + (ch-0x30);
  2042  06D9  300A               	movlw	10
  2043  06DA  00B7               	movwf	??_LCD_Printf
  2044  06DB  0837               	movf	??_LCD_Printf,w
  2045  06DC  00F0               	movwf	___bmul@multiplicand
  2046  06DD  084A               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
  2047  06DE  120A  118A  2237  120A  118A  	fcall	___bmul
  2048  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  2049  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  2050  06E5  074C               	addwf	LCD_Printf@ch,w
  2051  06E6  3ED0               	addlw	208
  2052  06E7  00B8               	movwf	??_LCD_Printf+1
  2053  06E8  0838               	movf	??_LCD_Printf+1,w
  2054  06E9  00CA               	movwf	LCD_Printf@var_numOfDigitsToDisp_u8
  2055                           
  2056                           ;lcd.c: 703: ptr++;
  2057  06EA  3001               	movlw	1
  2058  06EB  00B7               	movwf	??_LCD_Printf
  2059  06EC  0837               	movf	??_LCD_Printf,w
  2060  06ED  07CB               	addwf	LCD_Printf@ptr,f
  2061                           
  2062                           ;lcd.c: 704: ch = *ptr;
  2063  06EE  084B               	movf	LCD_Printf@ptr,w
  2064  06EF  0084               	movwf	4
  2065  06F0  120A  118A  2003  120A  118A  	fcall	stringdir
  2066  06F5  00B7               	movwf	??_LCD_Printf
  2067  06F6  0837               	movf	??_LCD_Printf,w
  2068  06F7  00CC               	movwf	LCD_Printf@ch
  2069  06F8  2ED1               	goto	l1604
  2070  06F9                     l1608:	
  2071                           ;lcd.c: 705: }
  2072                           ;lcd.c: 706: }
  2073                           
  2074                           
  2075                           ;lcd.c: 707: else
  2076                           ;lcd.c: 708: {
  2077                           ;lcd.c: 709: var_numOfDigitsToDisp_u8 = 0xffu;
  2078  06F9  30FF               	movlw	255
  2079  06FA  00B7               	movwf	??_LCD_Printf
  2080  06FB  0837               	movf	??_LCD_Printf,w
  2081  06FC  00CA               	movwf	LCD_Printf@var_numOfDigitsToDisp_u8
  2082                           
  2083                           ;lcd.c: 710: }
  2084                           ;lcd.c: 713: switch(ch)
  2085  06FD  2F9F               	goto	l1664
  2086  06FE                     l1610:	
  2087                           ;lcd.c: 714: {
  2088                           ;lcd.c: 715: case 'C':
  2089                           
  2090                           
  2091                           ;lcd.c: 716: case 'c':
  2092                           ;lcd.c: 717: ch = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  2093  06FE  084D               	movf	LCD_Printf@argp,w
  2094  06FF  0084               	movwf	4
  2095  0700  1383               	bcf	3,7	;select IRP bank0
  2096  0701  0800               	movf	0,w
  2097  0702  00B7               	movwf	??_LCD_Printf
  2098  0703  0837               	movf	??_LCD_Printf,w
  2099  0704  00CC               	movwf	LCD_Printf@ch
  2100  0705  3002               	movlw	2
  2101  0706  00B7               	movwf	??_LCD_Printf
  2102  0707  0837               	movf	??_LCD_Printf,w
  2103  0708  07CD               	addwf	LCD_Printf@argp,f
  2104  0709  2FD1               	goto	l1666
  2105  070A                     l1616:	
  2106                           ;lcd.c: 721: case 'd':
  2107                           
  2108                           ;lcd.c: 719: break;
  2109                           
  2110                           ;lcd.c: 718: LCD_DisplayChar(ch);
  2111                           
  2112                           
  2113                           ;lcd.c: 722: var_num_s16 = (*(sint16_t *)__va_arg((*(sint16_t **)argp), (sint16_t)0));
  2114  070A  1283               	bcf	3,5	;RP0=0, select bank0
  2115  070B  1303               	bcf	3,6	;RP1=0, select bank0
  2116  070C  084D               	movf	LCD_Printf@argp,w
  2117  070D  0084               	movwf	4
  2118  070E  1383               	bcf	3,7	;select IRP bank0
  2119  070F  0800               	movf	0,w
  2120  0710  00C0               	movwf	LCD_Printf@var_num_s16
  2121  0711  0A84               	incf	4,f
  2122  0712  0800               	movf	0,w
  2123  0713  00C1               	movwf	LCD_Printf@var_num_s16+1
  2124  0714  2F72               	goto	L11
  2125  0715                     l1620:	
  2126                           ;lcd.c: 733: case 'D':
  2127                           
  2128                           ;lcd.c: 731: break;
  2129                           
  2130                           
  2131                           ;lcd.c: 734: var_num_s32 = (*(sint32_t *)__va_arg((*(sint32_t **)argp), (sint32_t)0));
  2132  0715  084D               	movf	LCD_Printf@argp,w
  2133  0716  0084               	movwf	4
  2134  0717  1383               	bcf	3,7	;select IRP bank0
  2135  0718  0800               	movf	0,w
  2136  0719  00B9               	movwf	LCD_Printf@var_num_s32
  2137  071A  0A84               	incf	4,f
  2138  071B  0800               	movf	0,w
  2139  071C  00BA               	movwf	LCD_Printf@var_num_s32+1
  2140  071D  0A84               	incf	4,f
  2141  071E  0800               	movf	0,w
  2142  071F  00BB               	movwf	LCD_Printf@var_num_s32+2
  2143  0720  0A84               	incf	4,f
  2144  0721  0800               	movf	0,w
  2145  0722  00BC               	movwf	LCD_Printf@var_num_s32+3
  2146  0723  2F82               	goto	L10
  2147  0724                     l1624:	
  2148                           ;lcd.c: 745: case 'u':
  2149                           
  2150                           ;lcd.c: 743: break;
  2151                           
  2152  0724  2F6A               	goto	L12
  2153  0725                     l1628:	
  2154                           ;lcd.c: 752: case 'U':
  2155                           
  2156                           ;lcd.c: 750: break;
  2157                           
  2158                           ;lcd.c: 746: var_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  2159                           
  2160  0725  2F74               	goto	l1648
  2161  0726                     l1632:	
  2162                           ;lcd.c: 759: case 'x':
  2163                           
  2164                           ;lcd.c: 757: break;
  2165                           
  2166                           ;lcd.c: 753: var_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  2167                           
  2168                           
  2169                           ;lcd.c: 760: var_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  2170  0726  084D               	movf	LCD_Printf@argp,w
  2171  0727  0084               	movwf	4
  2172  0728  1383               	bcf	3,7	;select IRP bank0
  2173  0729  0800               	movf	0,w
  2174  072A  00C7               	movwf	LCD_Printf@var_num_u16
  2175  072B  0A84               	incf	4,f
  2176  072C  0800               	movf	0,w
  2177  072D  00C8               	movwf	LCD_Printf@var_num_u16+1
  2178  072E  3002               	movlw	2
  2179  072F  00B7               	movwf	??_LCD_Printf
  2180  0730  0837               	movf	??_LCD_Printf,w
  2181  0731  07CD               	addwf	LCD_Printf@argp,f
  2182                           
  2183                           ;lcd.c: 762: LCD_DisplayHexNumber(var_num_u16,var_numOfDigitsToDisp_u8);
  2184  0732  0847               	movf	LCD_Printf@var_num_u16,w
  2185  0733  00F9               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32
  2186  0734  0848               	movf	LCD_Printf@var_num_u16+1,w
  2187  0735  00FA               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32+1
  2188  0736  01FB               	clrf	LCD_DisplayHexNumber@var_hexNumber_u32+2
  2189  0737  01FC               	clrf	LCD_DisplayHexNumber@var_hexNumber_u32+3
  2190  0738  084A               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
  2191  0739  00B7               	movwf	??_LCD_Printf
  2192  073A  0837               	movf	??_LCD_Printf,w
  2193  073B  00FD               	movwf	LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8
  2194  073C  120A  118A  257E  120A  118A  	fcall	_LCD_DisplayHexNumber
  2195                           
  2196                           ;lcd.c: 764: break;
  2197  0741  2FD7               	goto	l1668
  2198  0742                     l1638:	
  2199                           ;lcd.c: 766: case 'X':
  2200                           
  2201                           
  2202                           ;lcd.c: 767: var_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  2203  0742  1283               	bcf	3,5	;RP0=0, select bank0
  2204  0743  1303               	bcf	3,6	;RP1=0, select bank0
  2205  0744  084D               	movf	LCD_Printf@argp,w
  2206  0745  0084               	movwf	4
  2207  0746  1383               	bcf	3,7	;select IRP bank0
  2208  0747  0800               	movf	0,w
  2209  0748  00C3               	movwf	LCD_Printf@var_num_u32
  2210  0749  0A84               	incf	4,f
  2211  074A  0800               	movf	0,w
  2212  074B  00C4               	movwf	LCD_Printf@var_num_u32+1
  2213  074C  0A84               	incf	4,f
  2214  074D  0800               	movf	0,w
  2215  074E  00C5               	movwf	LCD_Printf@var_num_u32+2
  2216  074F  0A84               	incf	4,f
  2217  0750  0800               	movf	0,w
  2218  0751  00C6               	movwf	LCD_Printf@var_num_u32+3
  2219  0752  3004               	movlw	4
  2220  0753  00B7               	movwf	??_LCD_Printf
  2221  0754  0837               	movf	??_LCD_Printf,w
  2222  0755  07CD               	addwf	LCD_Printf@argp,f
  2223                           
  2224                           ;lcd.c: 769: LCD_DisplayHexNumber(var_num_u32,var_numOfDigitsToDisp_u8);
  2225  0756  0846               	movf	LCD_Printf@var_num_u32+3,w
  2226  0757  00FC               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32+3
  2227  0758  0845               	movf	LCD_Printf@var_num_u32+2,w
  2228  0759  00FB               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32+2
  2229  075A  0844               	movf	LCD_Printf@var_num_u32+1,w
  2230  075B  00FA               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32+1
  2231  075C  0843               	movf	LCD_Printf@var_num_u32,w
  2232  075D  00F9               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32
  2233  075E  084A               	movf	LCD_Printf@var_numOfDigitsToDisp_u8,w
  2234  075F  00B7               	movwf	??_LCD_Printf
  2235  0760  0837               	movf	??_LCD_Printf,w
  2236  0761  00FD               	movwf	LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8
  2237  0762  120A  118A  257E  120A  118A  	fcall	_LCD_DisplayHexNumber
  2238                           
  2239                           ;lcd.c: 771: break;
  2240  0767  2FD7               	goto	l1668
  2241  0768                     l1644:	
  2242                           ;lcd.c: 774: case 'b':
  2243                           
  2244                           
  2245                           ;lcd.c: 775: var_num_u16 = (*(uint16_t *)__va_arg((*(uint16_t **)argp), (uint16_t)0));
  2246  0768  1283               	bcf	3,5	;RP0=0, select bank0
  2247  0769  1303               	bcf	3,6	;RP1=0, select bank0
  2248  076A                     L12:	
  2249  076A  084D               	movf	LCD_Printf@argp,w
  2250  076B  0084               	movwf	4
  2251  076C  1383               	bcf	3,7	;select IRP bank0
  2252  076D  0800               	movf	0,w
  2253  076E  00C7               	movwf	LCD_Printf@var_num_u16
  2254  076F  0A84               	incf	4,f
  2255  0770  0800               	movf	0,w
  2256  0771  00C8               	movwf	LCD_Printf@var_num_u16+1
  2257  0772                     L11:	
  2258  0772  3002               	movlw	2
  2259  0773  2F99               	goto	L7
  2260  0774                     l1648:	
  2261                           ;lcd.c: 783: case 'B':
  2262                           
  2263                           ;lcd.c: 781: break;
  2264                           
  2265                           
  2266                           ;lcd.c: 784: var_num_u32 = (*(uint32_t *)__va_arg((*(uint32_t **)argp), (uint32_t)0));
  2267  0774  084D               	movf	LCD_Printf@argp,w
  2268  0775  0084               	movwf	4
  2269  0776  1383               	bcf	3,7	;select IRP bank0
  2270  0777  0800               	movf	0,w
  2271  0778  00C3               	movwf	LCD_Printf@var_num_u32
  2272  0779  0A84               	incf	4,f
  2273  077A  0800               	movf	0,w
  2274  077B  00C4               	movwf	LCD_Printf@var_num_u32+1
  2275  077C  0A84               	incf	4,f
  2276  077D  0800               	movf	0,w
  2277  077E  00C5               	movwf	LCD_Printf@var_num_u32+2
  2278  077F  0A84               	incf	4,f
  2279  0780  0800               	movf	0,w
  2280  0781  00C6               	movwf	LCD_Printf@var_num_u32+3
  2281  0782                     L10:	
  2282  0782  3004               	movlw	4
  2283  0783  2F99               	goto	L7
  2284  0784                     l1652:	
  2285                           ;lcd.c: 793: case 'F':
  2286                           
  2287                           ;lcd.c: 790: break;
  2288                           
  2289                           
  2290                           ;lcd.c: 794: case 'f':
  2291                           ;lcd.c: 795: var_floatNum_f32 = (*(double *)__va_arg((*(double **)argp), (double)0));
  2292  0784  084D               	movf	LCD_Printf@argp,w
  2293  0785  0084               	movwf	4
  2294  0786  1383               	bcf	3,7	;select IRP bank0
  2295  0787  0800               	movf	0,w
  2296  0788  00BD               	movwf	LCD_Printf@var_floatNum_f32
  2297  0789  0A84               	incf	4,f
  2298  078A  0800               	movf	0,w
  2299  078B  00BE               	movwf	LCD_Printf@var_floatNum_f32+1
  2300  078C  0A84               	incf	4,f
  2301  078D  0800               	movf	0,w
  2302  078E  00BF               	movwf	LCD_Printf@var_floatNum_f32+2
  2303  078F  3003               	movlw	3
  2304  0790  2F99               	goto	L7
  2305  0791                     l1656:	
  2306                           ;lcd.c: 802: case 'S':
  2307                           
  2308                           ;lcd.c: 799: break;
  2309                           
  2310                           
  2311                           ;lcd.c: 803: case 's':
  2312                           ;lcd.c: 804: str = (*(char * *)__va_arg((*(char * **)argp), (char *)0));
  2313  0791  084D               	movf	LCD_Printf@argp,w
  2314  0792  0084               	movwf	4
  2315  0793  1383               	bcf	3,7	;select IRP bank0
  2316  0794  0800               	movf	0,w
  2317  0795  00B7               	movwf	??_LCD_Printf
  2318  0796  0837               	movf	??_LCD_Printf,w
  2319  0797  00C2               	movwf	LCD_Printf@str
  2320  0798  3001               	movlw	1
  2321  0799                     L7:	
  2322  0799  00B7               	movwf	??_LCD_Printf
  2323  079A  0837               	movf	??_LCD_Printf,w
  2324  079B  07CD               	addwf	LCD_Printf@argp,f
  2325                           
  2326                           ;lcd.c: 808: break;
  2327  079C  2FD7               	goto	l1668
  2328  079D                     l1660:	
  2329                           ;lcd.c: 810: case '%':
  2330                           
  2331                           
  2332                           ;lcd.c: 811: LCD_DisplayChar('%');
  2333  079D  3025               	movlw	37
  2334  079E  2FD2               	goto	L8
  2335  079F                     l1664:	
  2336                           ;lcd.c: 813: }
  2337                           
  2338                           ;lcd.c: 812: break;
  2339                           
  2340  079F  1283               	bcf	3,5	;RP0=0, select bank0
  2341  07A0  1303               	bcf	3,6	;RP1=0, select bank0
  2342  07A1  084C               	movf	LCD_Printf@ch,w
  2343                           
  2344                           ; Switch size 1, requested type "space"
  2345                           ; Number of cases is 15, Range of values is 37 to 120
  2346                           ; switch strategies available:
  2347                           ; Name         Instructions Cycles
  2348                           ; simple_byte           46    24 (average)
  2349                           ; direct_byte          263    11 (fixed)
  2350                           ; jumptable            263     9 (fixed)
  2351                           ;	Chosen strategy is simple_byte
  2352  07A2  3A25               	xorlw	37	; case 37
  2353  07A3  1903               	skipnz
  2354  07A4  2F9D               	goto	l1660
  2355  07A5  3A67               	xorlw	103	; case 66
  2356  07A6  1903               	skipnz
  2357  07A7  2F74               	goto	l1648
  2358  07A8  3A01               	xorlw	1	; case 67
  2359  07A9  1903               	skipnz
  2360  07AA  2EFE               	goto	l1610
  2361  07AB  3A07               	xorlw	7	; case 68
  2362  07AC  1903               	skipnz
  2363  07AD  2F15               	goto	l1620
  2364  07AE  3A02               	xorlw	2	; case 70
  2365  07AF  1903               	skipnz
  2366  07B0  2F84               	goto	l1652
  2367  07B1  3A15               	xorlw	21	; case 83
  2368  07B2  1903               	skipnz
  2369  07B3  2F91               	goto	l1656
  2370  07B4  3A06               	xorlw	6	; case 85
  2371  07B5  1903               	skipnz
  2372  07B6  2F25               	goto	l1628
  2373  07B7  3A0D               	xorlw	13	; case 88
  2374  07B8  1903               	skipnz
  2375  07B9  2F42               	goto	l1638
  2376  07BA  3A3A               	xorlw	58	; case 98
  2377  07BB  1903               	skipnz
  2378  07BC  2F68               	goto	l1644
  2379  07BD  3A01               	xorlw	1	; case 99
  2380  07BE  1903               	skipnz
  2381  07BF  2EFE               	goto	l1610
  2382  07C0  3A07               	xorlw	7	; case 100
  2383  07C1  1903               	skipnz
  2384  07C2  2F0A               	goto	l1616
  2385  07C3  3A02               	xorlw	2	; case 102
  2386  07C4  1903               	skipnz
  2387  07C5  2F84               	goto	l1652
  2388  07C6  3A15               	xorlw	21	; case 115
  2389  07C7  1903               	skipnz
  2390  07C8  2F91               	goto	l1656
  2391  07C9  3A06               	xorlw	6	; case 117
  2392  07CA  1903               	skipnz
  2393  07CB  2F24               	goto	l1624
  2394  07CC  3A0D               	xorlw	13	; case 120
  2395  07CD  1903               	skipnz
  2396  07CE  2F26               	goto	l1632
  2397  07CF  2FD7               	goto	l1668
  2398                           
  2399                           ;lcd.c: 814: }
  2400  07D0  2FD7               	goto	l1668
  2401  07D1                     l1666:	
  2402                           
  2403                           ;lcd.c: 815: else
  2404                           ;lcd.c: 816: {
  2405                           ;lcd.c: 818: LCD_DisplayChar(ch);
  2406  07D1  084C               	movf	LCD_Printf@ch,w
  2407  07D2                     L8:	
  2408  07D2  120A  118A  22B6  120A  118A  	fcall	_LCD_DisplayChar
  2409  07D7                     l1668:	
  2410  07D7  3001               	movlw	1
  2411  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  2412  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  2413  07DA  00B7               	movwf	??_LCD_Printf
  2414  07DB  0837               	movf	??_LCD_Printf,w
  2415  07DC  07CB               	addwf	LCD_Printf@ptr,f
  2416  07DD  2EA2               	goto	l1670
  2417  07DE                     __end_of_LCD_Printf:	
  2418                           
  2419                           	psect	text15
  2420  0237                     __ptext15:	
  2421 ;; *************** function ___bmul *****************
  2422 ;; Defined at:
  2423 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul8.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  multiplier      1    wreg     unsigned char 
  2426 ;;  multiplicand    1    0[COMMON] unsigned char 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  multiplier      1    3[COMMON] unsigned char 
  2429 ;;  product         1    2[COMMON] unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      unsigned char 
  2432 ;; Registers used:
  2433 ;;		wreg, status,2, status,0
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2439 ;;      Params:         1       0       0       0       0
  2440 ;;      Locals:         2       0       0       0       0
  2441 ;;      Temps:          1       0       0       0       0
  2442 ;;      Totals:         4       0       0       0       0
  2443 ;;Total ram usage:        4 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_LCD_Printf
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           
  2453                           ;psect for function ___bmul
  2454  0237                     ___bmul:	
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2458                           ;___bmul@multiplier stored from wreg
  2459  0237  00F3               	movwf	___bmul@multiplier
  2460  0238  01F2               	clrf	___bmul@product
  2461  0239                     l1490:	
  2462  0239  1C73               	btfss	___bmul@multiplier,0
  2463  023A  2A3F               	goto	l1494
  2464  023B  0870               	movf	___bmul@multiplicand,w
  2465  023C  00F1               	movwf	??___bmul
  2466  023D  0871               	movf	??___bmul,w
  2467  023E  07F2               	addwf	___bmul@product,f
  2468  023F                     l1494:	
  2469  023F  1003               	clrc
  2470  0240  0DF0               	rlf	___bmul@multiplicand,f
  2471  0241  1003               	clrc
  2472  0242  0CF3               	rrf	___bmul@multiplier,f
  2473  0243  08F3               	movf	___bmul@multiplier,f
  2474  0244  1D03               	skipz
  2475  0245  2A39               	goto	l1490
  2476  0246  0872               	movf	___bmul@product,w
  2477  0247  0008               	return
  2478  0248                     __end_of___bmul:	
  2479                           
  2480                           	psect	text16
  2481  057E                     __ptext16:	
  2482 ;; *************** function _LCD_DisplayHexNumber *****************
  2483 ;; Defined at:
  2484 ;;		line 503 in file "lcd.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  var_hexNumbe    4    9[COMMON] unsigned long 
  2487 ;;  var_numOfDig    1   13[COMMON] unsigned char 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  a              10    4[BANK0 ] unsigned char [10]
  2490 ;;  i               1   16[BANK0 ] unsigned char 
  2491 ;; Return value:  Size  Location     Type
  2492 ;;		None               void
  2493 ;; Registers used:
  2494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2500 ;;      Params:         5       0       0       0       0
  2501 ;;      Locals:         0      13       0       0       0
  2502 ;;      Temps:          0       4       0       0       0
  2503 ;;      Totals:         5      17       0       0       0
  2504 ;;Total ram usage:       22 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    5
  2507 ;; This function calls:
  2508 ;;		_LCD_DisplayChar
  2509 ;; This function is called by:
  2510 ;;		_LCD_Printf
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           
  2515                           ;psect for function _LCD_DisplayHexNumber
  2516  057E                     _LCD_DisplayHexNumber:	
  2517                           
  2518                           ;lcd.c: 505: uint8_t i=0,a[10];
  2519                           
  2520                           ;incstack = 0
  2521                           ; Regs used in _LCD_DisplayHexNumber: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2522  057E  1283               	bcf	3,5	;RP0=0, select bank0
  2523  057F  1303               	bcf	3,6	;RP1=0, select bank0
  2524  0580  01B0               	clrf	LCD_DisplayHexNumber@i
  2525                           
  2526                           ;lcd.c: 507: if(var_hexNumber_u32==0)
  2527  0581  087C               	movf	LCD_DisplayHexNumber@var_hexNumber_u32+3,w
  2528  0582  047B               	iorwf	LCD_DisplayHexNumber@var_hexNumber_u32+2,w
  2529  0583  047A               	iorwf	LCD_DisplayHexNumber@var_hexNumber_u32+1,w
  2530  0584  0479               	iorwf	LCD_DisplayHexNumber@var_hexNumber_u32,w
  2531  0585  1D03               	skipz
  2532  0586  2D9A               	goto	l1456
  2533                           
  2534                           ;lcd.c: 508: {
  2535                           ;lcd.c: 510: for(i=0;((i<var_numOfDigitsToDisplay_u8) && (i<10u));i++)
  2536  0587  01B0               	clrf	LCD_DisplayHexNumber@i
  2537  0588                     l1452:	
  2538  0588  087D               	movf	LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8,w
  2539  0589  0230               	subwf	LCD_DisplayHexNumber@i,w
  2540  058A  1803               	skipnc
  2541  058B  2DFF               	goto	l1486
  2542  058C  300A               	movlw	10
  2543  058D  0230               	subwf	LCD_DisplayHexNumber@i,w
  2544  058E  1803               	btfsc	3,0
  2545  058F  2DFF               	goto	l1486
  2546                           
  2547                           ;lcd.c: 511: a[i] = 0x00;
  2548  0590  0830               	movf	LCD_DisplayHexNumber@i,w
  2549  0591  3E24               	addlw	LCD_DisplayHexNumber@a& (0+255)
  2550  0592  0084               	movwf	4
  2551  0593  1383               	bcf	3,7	;select IRP bank0
  2552  0594  0180               	clrf	0
  2553  0595  3001               	movlw	1
  2554  0596  00A0               	movwf	??_LCD_DisplayHexNumber
  2555  0597  0820               	movf	??_LCD_DisplayHexNumber,w
  2556  0598  07B0               	addwf	LCD_DisplayHexNumber@i,f
  2557  0599  2D88               	goto	l1452
  2558  059A                     l1456:	
  2559                           ;lcd.c: 512: }
  2560                           
  2561                           
  2562                           ;lcd.c: 513: else
  2563                           ;lcd.c: 514: {
  2564                           ;lcd.c: 515: for(i=0;i<var_numOfDigitsToDisplay_u8;i++)
  2565  059A  01B0               	clrf	LCD_DisplayHexNumber@i
  2566  059B                     l1474:	
  2567  059B  087D               	movf	LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8,w
  2568  059C  0230               	subwf	LCD_DisplayHexNumber@i,w
  2569  059D  1803               	btfsc	3,0
  2570  059E  2DFF               	goto	l1486
  2571                           
  2572                           ;lcd.c: 516: {
  2573                           ;lcd.c: 519: if(var_hexNumber_u32!=0)
  2574  059F  087C               	movf	LCD_DisplayHexNumber@var_hexNumber_u32+3,w
  2575  05A0  047B               	iorwf	LCD_DisplayHexNumber@var_hexNumber_u32+2,w
  2576  05A1  047A               	iorwf	LCD_DisplayHexNumber@var_hexNumber_u32+1,w
  2577  05A2  0479               	iorwf	LCD_DisplayHexNumber@var_hexNumber_u32,w
  2578  05A3  1903               	skipnz
  2579  05A4  2DC8               	goto	l1464
  2580                           
  2581                           ;lcd.c: 520: {
  2582                           ;lcd.c: 525: a[i]=(uint8_t)(var_hexNumber_u32 & 0x0f);
  2583  05A5  0879               	movf	LCD_DisplayHexNumber@var_hexNumber_u32,w
  2584  05A6  390F               	andlw	15
  2585  05A7  00A0               	movwf	??_LCD_DisplayHexNumber
  2586  05A8  0830               	movf	LCD_DisplayHexNumber@i,w
  2587  05A9  3E24               	addlw	LCD_DisplayHexNumber@a& (0+255)
  2588  05AA  0084               	movwf	4
  2589  05AB  0820               	movf	??_LCD_DisplayHexNumber,w
  2590  05AC  1383               	bcf	3,7	;select IRP bank0
  2591  05AD  0080               	movwf	0
  2592                           
  2593                           ;lcd.c: 526: var_hexNumber_u32=var_hexNumber_u32 >> 4;
  2594  05AE  0879               	movf	LCD_DisplayHexNumber@var_hexNumber_u32,w
  2595  05AF  00A0               	movwf	??_LCD_DisplayHexNumber
  2596  05B0  087A               	movf	LCD_DisplayHexNumber@var_hexNumber_u32+1,w
  2597  05B1  00A1               	movwf	??_LCD_DisplayHexNumber+1
  2598  05B2  087B               	movf	LCD_DisplayHexNumber@var_hexNumber_u32+2,w
  2599  05B3  00A2               	movwf	??_LCD_DisplayHexNumber+2
  2600  05B4  087C               	movf	LCD_DisplayHexNumber@var_hexNumber_u32+3,w
  2601  05B5  00A3               	movwf	??_LCD_DisplayHexNumber+3
  2602  05B6  3004               	movlw	4
  2603  05B7                     u905:	
  2604  05B7  1003               	clrc
  2605  05B8  0CA3               	rrf	??_LCD_DisplayHexNumber+3,f
  2606  05B9  0CA2               	rrf	??_LCD_DisplayHexNumber+2,f
  2607  05BA  0CA1               	rrf	??_LCD_DisplayHexNumber+1,f
  2608  05BB  0CA0               	rrf	??_LCD_DisplayHexNumber,f
  2609  05BC  3EFF               	addlw	-1
  2610  05BD  1D03               	skipz
  2611  05BE  2DB7               	goto	u905
  2612  05BF  0823               	movf	??_LCD_DisplayHexNumber+3,w
  2613  05C0  00FC               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32+3
  2614  05C1  0822               	movf	??_LCD_DisplayHexNumber+2,w
  2615  05C2  00FB               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32+2
  2616  05C3  0821               	movf	??_LCD_DisplayHexNumber+1,w
  2617  05C4  00FA               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32+1
  2618  05C5  0820               	movf	??_LCD_DisplayHexNumber,w
  2619  05C6  00F9               	movwf	LCD_DisplayHexNumber@var_hexNumber_u32
  2620                           
  2621                           ;lcd.c: 527: }
  2622  05C7  2DD5               	goto	l1472
  2623  05C8                     l1464:	
  2624                           
  2625                           ;lcd.c: 528: else if( (var_numOfDigitsToDisplay_u8 == 0xffu) ||
  2626                           ;lcd.c: 529: (var_numOfDigitsToDisplay_u8 > 10u))
  2627  05C8  087D               	movf	LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8,w
  2628  05C9  3AFF               	xorlw	255
  2629  05CA  1903               	skipnz
  2630  05CB  2DFF               	goto	l1486
  2631  05CC  300B               	movlw	11
  2632  05CD  027D               	subwf	LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8,w
  2633  05CE  1803               	btfsc	3,0
  2634  05CF  2DFF               	goto	l1486
  2635                           
  2636                           ;lcd.c: 535: else
  2637                           ;lcd.c: 536: {
  2638                           ;lcd.c: 540: a[i]=0x00;
  2639                           
  2640                           ;lcd.c: 534: }
  2641                           
  2642                           ;lcd.c: 530: {
  2643                           ;lcd.c: 533: break;
  2644  05D0  0830               	movf	LCD_DisplayHexNumber@i,w
  2645  05D1  3E24               	addlw	LCD_DisplayHexNumber@a& (0+255)
  2646  05D2  0084               	movwf	4
  2647  05D3  1383               	bcf	3,7	;select IRP bank0
  2648  05D4  0180               	clrf	0
  2649  05D5                     l1472:	
  2650  05D5  3001               	movlw	1
  2651  05D6  00A0               	movwf	??_LCD_DisplayHexNumber
  2652  05D7  0820               	movf	??_LCD_DisplayHexNumber,w
  2653  05D8  07B0               	addwf	LCD_DisplayHexNumber@i,f
  2654  05D9  2D9B               	goto	l1474
  2655  05DA                     l1476:	
  2656                           ;lcd.c: 541: }
  2657                           ;lcd.c: 542: }
  2658                           ;lcd.c: 543: }
  2659                           ;lcd.c: 545: while(i!=0)
  2660                           
  2661                           
  2662                           ;lcd.c: 546: {
  2663                           ;lcd.c: 548: LCD_DisplayChar((((a[i-1])>0x09) ? ((a[i-1]) + 0x37): ((a[i-1]) + 0x30)));
  2664  05DA  0830               	movf	LCD_DisplayHexNumber@i,w
  2665  05DB  3EFF               	addlw	255
  2666  05DC  3E24               	addlw	LCD_DisplayHexNumber@a& (0+255)
  2667  05DD  0084               	movwf	4
  2668  05DE  300A               	movlw	10
  2669  05DF  1383               	bcf	3,7	;select IRP bank0
  2670  05E0  0200               	subwf	0,w
  2671  05E1  1803               	skipnc
  2672  05E2  2DEA               	goto	l1480
  2673  05E3  0830               	movf	LCD_DisplayHexNumber@i,w
  2674  05E4  3EFF               	addlw	255
  2675  05E5  3E24               	addlw	LCD_DisplayHexNumber@a& (0+255)
  2676  05E6  0084               	movwf	4
  2677  05E7  0800               	movf	0,w
  2678  05E8  3E30               	addlw	48
  2679  05E9  2DF0               	goto	L13
  2680  05EA                     l1480:	
  2681  05EA  0830               	movf	LCD_DisplayHexNumber@i,w
  2682  05EB  3EFF               	addlw	255
  2683  05EC  3E24               	addlw	LCD_DisplayHexNumber@a& (0+255)
  2684  05ED  0084               	movwf	4
  2685  05EE  0800               	movf	0,w
  2686  05EF  3E37               	addlw	55
  2687  05F0                     L13:	
  2688  05F0  00AE               	movwf	_LCD_DisplayHexNumber$211
  2689  05F1  3000               	movlw	0
  2690  05F2  1803               	skipnc
  2691  05F3  3001               	movlw	1
  2692  05F4  00AF               	movwf	_LCD_DisplayHexNumber$211+1
  2693  05F5  082E               	movf	_LCD_DisplayHexNumber$211,w
  2694  05F6  120A  118A  22B6  120A  118A  	fcall	_LCD_DisplayChar
  2695                           
  2696                           ;lcd.c: 549: i--;
  2697  05FB  3001               	movlw	1
  2698  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  2699  05FD  1303               	bcf	3,6	;RP1=0, select bank0
  2700  05FE  02B0               	subwf	LCD_DisplayHexNumber@i,f
  2701  05FF                     l1486:	
  2702  05FF  08B0               	movf	LCD_DisplayHexNumber@i,f
  2703  0600  1903               	btfsc	3,2
  2704  0601  0008               	return
  2705  0602  2DDA               	goto	l1476
  2706  0603                     __end_of_LCD_DisplayHexNumber:	
  2707                           
  2708                           	psect	text17
  2709  02B6                     __ptext17:	
  2710 ;; *************** function _LCD_DisplayChar *****************
  2711 ;; Defined at:
  2712 ;;		line 309 in file "lcd.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  var_lcdData_    1    wreg     unsigned char 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  var_lcdData_    1    8[COMMON] unsigned char 
  2717 ;; Return value:  Size  Location     Type
  2718 ;;		None               void
  2719 ;; Registers used:
  2720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : 0/0
  2723 ;;		On exit  : 0/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2726 ;;      Params:         0       0       0       0       0
  2727 ;;      Locals:         1       0       0       0       0
  2728 ;;      Temps:          1       0       0       0       0
  2729 ;;      Totals:         2       0       0       0       0
  2730 ;;Total ram usage:        2 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    4
  2733 ;; This function calls:
  2734 ;;		_LCD_GoToNextLine
  2735 ;;		_lcd_DataWrite
  2736 ;; This function is called by:
  2737 ;;		_LCD_DisplayHexNumber
  2738 ;;		_LCD_Printf
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           
  2743                           ;psect for function _LCD_DisplayChar
  2744  02B6                     _LCD_DisplayChar:	
  2745                           
  2746                           ;incstack = 0
  2747                           ; Regs used in _LCD_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2748                           ;LCD_DisplayChar@var_lcdData_u8 stored from wreg
  2749  02B6  00F8               	movwf	LCD_DisplayChar@var_lcdData_u8
  2750                           
  2751                           ;lcd.c: 311: if((VAR_LcdTrackCursorPos_U8>=STK_LCDConfig.mvar_MaxSupportedChars_U8) || (
      +                          var_lcdData_u8=='\n'))
  2752  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2753  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  2754  02B9  0860               	movf	_STK_LCDConfig+1,w
  2755  02BA  0262               	subwf	_VAR_LcdTrackCursorPos_U8,w
  2756  02BB  1803               	skipnc
  2757  02BC  2AC1               	goto	l1398
  2758  02BD  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  2759  02BE  3A0A               	xorlw	10
  2760  02BF  1D03               	skipz
  2761  02C0  2AC6               	goto	l1400
  2762  02C1                     l1398:	
  2763                           
  2764                           ;lcd.c: 312: {
  2765                           ;lcd.c: 315: LCD_GoToNextLine();
  2766  02C1  120A  118A  2271  120A  118A  	fcall	_LCD_GoToNextLine
  2767  02C6                     l1400:	
  2768                           
  2769                           ;lcd.c: 316: }
  2770                           ;lcd.c: 317: if(var_lcdData_u8!='\n')
  2771  02C6  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  2772  02C7  3A0A               	xorlw	10
  2773  02C8  1903               	skipnz
  2774  02C9  0008               	return
  2775                           
  2776                           ;lcd.c: 318: {
  2777                           ;lcd.c: 320: lcd_DataWrite(var_lcdData_u8);
  2778  02CA  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  2779  02CB  120A  118A  23C2   	fcall	_lcd_DataWrite
  2780                           
  2781                           ;lcd.c: 321: VAR_LcdTrackCursorPos_U8++;
  2782  02CE  3001               	movlw	1
  2783  02CF  00F7               	movwf	??_LCD_DisplayChar
  2784  02D0  0877               	movf	??_LCD_DisplayChar,w
  2785  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2786  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  2787  02D3  07E2               	addwf	_VAR_LcdTrackCursorPos_U8,f
  2788  02D4  0008               	return
  2789  02D5                     __end_of_LCD_DisplayChar:	
  2790                           
  2791                           	psect	text18
  2792  03C2                     __ptext18:	
  2793 ;; *************** function _lcd_DataWrite *****************
  2794 ;; Defined at:
  2795 ;;		line 839 in file "lcd.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  dat             1    wreg     unsigned char 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  dat             1    5[COMMON] unsigned char 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;		None               void
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0, pclath, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2809 ;;      Params:         0       0       0       0       0
  2810 ;;      Locals:         1       0       0       0       0
  2811 ;;      Temps:          1       0       0       0       0
  2812 ;;      Totals:         2       0       0       0       0
  2813 ;;Total ram usage:        2 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    2
  2816 ;; This function calls:
  2817 ;;		_lcd_BusyCheck
  2818 ;;		_lcd_SendDataSignals
  2819 ;;		_lcd_SendNibble
  2820 ;; This function is called by:
  2821 ;;		_LCD_DisplayChar
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           
  2826                           ;psect for function _lcd_DataWrite
  2827  03C2                     _lcd_DataWrite:	
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in _lcd_DataWrite: [wreg+status,2+status,0+pclath+cstack]
  2831                           ;lcd_DataWrite@dat stored from wreg
  2832  03C2  00F5               	movwf	lcd_DataWrite@dat
  2833                           
  2834                           ;lcd.c: 841: lcd_BusyCheck();
  2835  03C3  120A  118A  252A  120A  118A  	fcall	_lcd_BusyCheck
  2836                           
  2837                           ;lcd.c: 842: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  2838  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  2839  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  2840  03CA  0861               	movf	_STK_LCDConfig+2,w
  2841  03CB  3A08               	xorlw	8
  2842  03CC  1D03               	skipz
  2843  03CD  2BD4               	goto	l1360
  2844                           
  2845                           ;lcd.c: 843: {
  2846                           ;lcd.c: 844: PORTB = dat;
  2847  03CE  0875               	movf	lcd_DataWrite@dat,w
  2848  03CF  0086               	movwf	6	;volatile
  2849                           
  2850                           ;lcd.c: 845: lcd_SendDataSignals();
  2851  03D0  120A  118A  2287   	fcall	_lcd_SendDataSignals
  2852                           
  2853                           ;lcd.c: 846: }
  2854  03D3  0008               	return
  2855  03D4                     l1360:	
  2856                           
  2857                           ;lcd.c: 847: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  2858  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2859  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2860  03D6  0861               	movf	_STK_LCDConfig+2,w
  2861  03D7  3A04               	xorlw	4
  2862  03D8  1D03               	skipz
  2863  03D9  0008               	return
  2864                           
  2865                           ;lcd.c: 848: {
  2866                           ;lcd.c: 849: lcd_SendNibble(dat);
  2867  03DA  0875               	movf	lcd_DataWrite@dat,w
  2868  03DB  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  2869                           
  2870                           ;lcd.c: 850: lcd_SendDataSignals();
  2871  03E0  120A  118A  2287  120A  118A  	fcall	_lcd_SendDataSignals
  2872                           
  2873                           ;lcd.c: 852: lcd_SendNibble(dat << 4);
  2874  03E5  0875               	movf	lcd_DataWrite@dat,w
  2875  03E6  00F4               	movwf	??_lcd_DataWrite
  2876  03E7  3003               	movlw	3
  2877  03E8                     u685:	
  2878  03E8  1003               	clrc
  2879  03E9  0DF4               	rlf	??_lcd_DataWrite,f
  2880  03EA  3EFF               	addlw	-1
  2881  03EB  1D03               	skipz
  2882  03EC  2BE8               	goto	u685
  2883  03ED  1003               	clrc
  2884  03EE  0D74               	rlf	??_lcd_DataWrite,w
  2885  03EF  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  2886                           
  2887                           ;lcd.c: 853: lcd_SendDataSignals();
  2888  03F4  120A  118A  2287   	fcall	_lcd_SendDataSignals
  2889  03F7  0008               	return
  2890  03F8                     __end_of_lcd_DataWrite:	
  2891                           
  2892                           	psect	text19
  2893  0287                     __ptext19:	
  2894 ;; *************** function _lcd_SendDataSignals *****************
  2895 ;; Defined at:
  2896 ;;		line 994 in file "lcd.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;		None               void
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0, pclath, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2910 ;;      Params:         0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0
  2912 ;;      Temps:          1       0       0       0       0
  2913 ;;      Totals:         1       0       0       0       0
  2914 ;;Total ram usage:        1 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    1
  2917 ;; This function calls:
  2918 ;;		_DELAY_us
  2919 ;; This function is called by:
  2920 ;;		_lcd_DataWrite
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           
  2925                           ;psect for function _lcd_SendDataSignals
  2926  0287                     _lcd_SendDataSignals:	
  2927                           
  2928                           ;lcd.c: 996: (((PORTD)) |= (1<<((0))));
  2929                           
  2930                           ;incstack = 0
  2931                           ; Regs used in _lcd_SendDataSignals: [wreg+status,2+status,0+pclath+cstack]
  2932  0287  1283               	bcf	3,5	;RP0=0, select bank0
  2933  0288  1303               	bcf	3,6	;RP1=0, select bank0
  2934  0289  1408               	bsf	8,0	;volatile
  2935                           
  2936                           ;lcd.c: 998: (((PORTD)) &= ~(1<<((1))));
  2937  028A  30FD               	movlw	253
  2938  028B  00F2               	movwf	??_lcd_SendDataSignals
  2939  028C  0872               	movf	??_lcd_SendDataSignals,w
  2940  028D  0588               	andwf	8,f	;volatile
  2941                           
  2942                           ;lcd.c: 1000: (((PORTD)) |= (1<<((2))));
  2943  028E  1508               	bsf	8,2	;volatile
  2944                           
  2945                           ;lcd.c: 1001: DELAY_us(10);
  2946  028F  300A               	movlw	10
  2947  0290  00F0               	movwf	DELAY_us@us_count
  2948  0291  3000               	movlw	0
  2949  0292  00F1               	movwf	DELAY_us@us_count+1
  2950  0293  120A  118A  21FB   	fcall	_DELAY_us
  2951                           
  2952                           ;lcd.c: 1002: (((PORTD)) &= ~(1<<((2))));
  2953  0296  30FB               	movlw	251
  2954  0297  00F2               	movwf	??_lcd_SendDataSignals
  2955  0298  0872               	movf	??_lcd_SendDataSignals,w
  2956  0299  1283               	bcf	3,5	;RP0=0, select bank0
  2957  029A  1303               	bcf	3,6	;RP1=0, select bank0
  2958  029B  0588               	andwf	8,f	;volatile
  2959  029C  0008               	return
  2960  029D                     __end_of_lcd_SendDataSignals:	
  2961                           
  2962                           	psect	text20
  2963  0271                     __ptext20:	
  2964 ;; *************** function _LCD_GoToNextLine *****************
  2965 ;; Defined at:
  2966 ;;		line 208 in file "lcd.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;		None
  2971 ;; Return value:  Size  Location     Type
  2972 ;;		None               void
  2973 ;; Registers used:
  2974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2980 ;;      Params:         0       0       0       0       0
  2981 ;;      Locals:         0       0       0       0       0
  2982 ;;      Temps:          1       0       0       0       0
  2983 ;;      Totals:         1       0       0       0       0
  2984 ;;Total ram usage:        1 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    3
  2987 ;; This function calls:
  2988 ;;		_LCD_CmdWrite
  2989 ;; This function is called by:
  2990 ;;		_LCD_DisplayChar
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           
  2995                           ;psect for function _LCD_GoToNextLine
  2996  0271                     _LCD_GoToNextLine:	
  2997                           
  2998                           ;lcd.c: 212: VAR_LcdTrackLineNum_U8++;
  2999                           
  3000                           ;incstack = 0
  3001                           ; Regs used in _LCD_GoToNextLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3002  0271  3001               	movlw	1
  3003  0272  00F6               	movwf	??_LCD_GoToNextLine
  3004  0273  0876               	movf	??_LCD_GoToNextLine,w
  3005  0274  1283               	bcf	3,5	;RP0=0, select bank0
  3006  0275  1303               	bcf	3,6	;RP1=0, select bank0
  3007  0276  07E3               	addwf	_VAR_LcdTrackLineNum_U8,f
  3008                           
  3009                           ;lcd.c: 213: VAR_LcdTrackCursorPos_U8 = 0x00;
  3010  0277  01E2               	clrf	_VAR_LcdTrackCursorPos_U8
  3011                           
  3012                           ;lcd.c: 214: if(VAR_LcdTrackLineNum_U8 > STK_LCDConfig.mvar_MaxSupportedLines_U8)
  3013  0278  0863               	movf	_VAR_LcdTrackLineNum_U8,w
  3014  0279  025F               	subwf	_STK_LCDConfig,w
  3015  027A  1803               	skipnc
  3016  027B  2A7E               	goto	l1350
  3017                           
  3018                           ;lcd.c: 215: VAR_LcdTrackLineNum_U8 = 0x01;
  3019  027C  01E3               	clrf	_VAR_LcdTrackLineNum_U8
  3020  027D  0AE3               	incf	_VAR_LcdTrackLineNum_U8,f
  3021  027E                     l1350:	
  3022                           
  3023                           ;lcd.c: 216: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[VAR_LcdTrackLineNum_U8]);
  3024  027E  0863               	movf	_VAR_LcdTrackLineNum_U8,w
  3025  027F  3E5A               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
  3026  0280  0084               	movwf	4
  3027  0281  1383               	bcf	3,7	;select IRP bank0
  3028  0282  0800               	movf	0,w
  3029  0283  120A  118A  238C   	fcall	_LCD_CmdWrite
  3030  0286  0008               	return
  3031  0287                     __end_of_LCD_GoToNextLine:	
  3032                           
  3033                           	psect	text21
  3034  04DB                     __ptext21:	
  3035 ;; *************** function _LCD_Init *****************
  3036 ;; Defined at:
  3037 ;;		line 112 in file "lcd.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  var_lcdMode_    1    wreg     unsigned char 
  3040 ;;  var_lcdNoOfL    1    8[COMMON] unsigned char 
  3041 ;;  var_MaxChars    1    9[COMMON] unsigned char 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  var_lcdMode_    1   11[COMMON] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;		None               void
  3046 ;; Registers used:
  3047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3053 ;;      Params:         2       0       0       0       0
  3054 ;;      Locals:         1       0       0       0       0
  3055 ;;      Temps:          1       0       0       0       0
  3056 ;;      Totals:         4       0       0       0       0
  3057 ;;Total ram usage:        4 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    5
  3060 ;; This function calls:
  3061 ;;		_DELAY_ms
  3062 ;;		_LCD_Clear
  3063 ;;		_LCD_CmdWrite
  3064 ;;		_lcd_Reset
  3065 ;; This function is called by:
  3066 ;;		_main
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           
  3071                           ;psect for function _LCD_Init
  3072  04DB                     _LCD_Init:	
  3073                           
  3074                           ;incstack = 0
  3075                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3076                           ;LCD_Init@var_lcdMode_u8 stored from wreg
  3077  04DB  00FB               	movwf	LCD_Init@var_lcdMode_u8
  3078                           
  3079                           ;lcd.c: 116: TRISB = 0x00u;
  3080  04DC  1683               	bsf	3,5	;RP0=1, select bank1
  3081  04DD  1303               	bcf	3,6	;RP1=0, select bank1
  3082  04DE  0186               	clrf	6	;volatile
  3083                           
  3084                           ;lcd.c: 117: TRISD = 0x00u;
  3085  04DF  0188               	clrf	8	;volatile
  3086                           
  3087                           ;lcd.c: 118: STK_LCDConfig.mvar_LcdMode_U8 = var_lcdMode_u8;
  3088  04E0  087B               	movf	LCD_Init@var_lcdMode_u8,w
  3089  04E1  00FA               	movwf	??_LCD_Init
  3090  04E2  087A               	movf	??_LCD_Init,w
  3091  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  3092  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  3093  04E5  00E1               	movwf	_STK_LCDConfig+2
  3094                           
  3095                           ;lcd.c: 119: STK_LCDConfig.mvar_MaxSupportedChars_U8 = var_MaxCharsPerLine_u8;
  3096  04E6  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  3097  04E7  00FA               	movwf	??_LCD_Init
  3098  04E8  087A               	movf	??_LCD_Init,w
  3099  04E9  00E0               	movwf	_STK_LCDConfig+1
  3100                           
  3101                           ;lcd.c: 120: STK_LCDConfig.mvar_MaxSupportedLines_U8 = var_lcdNoOfLines_u8;
  3102  04EA  0878               	movf	LCD_Init@var_lcdNoOfLines_u8,w
  3103  04EB  00FA               	movwf	??_LCD_Init
  3104  04EC  087A               	movf	??_LCD_Init,w
  3105  04ED  00DF               	movwf	_STK_LCDConfig
  3106                           
  3107                           ;lcd.c: 121: if(var_lcdNoOfLines_u8 > mENUM_LcdLineTwo)
  3108  04EE  3003               	movlw	3
  3109  04EF  0278               	subwf	LCD_Init@var_lcdNoOfLines_u8,w
  3110  04F0  1C03               	skipc
  3111  04F1  2CFE               	goto	l1516
  3112                           
  3113                           ;lcd.c: 122: {
  3114                           ;lcd.c: 123: ARR_LcdLineNumAddress_U8[mENUM_LcdLineThree] = 0x90 + (var_MaxCharsPerLine_
      +                          u8 & 0x0fu);
  3115  04F2  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  3116  04F3  390F               	andlw	15
  3117  04F4  3E90               	addlw	144
  3118  04F5  00FA               	movwf	??_LCD_Init
  3119  04F6  087A               	movf	??_LCD_Init,w
  3120  04F7  00DD               	movwf	_ARR_LcdLineNumAddress_U8+3
  3121                           
  3122                           ;lcd.c: 124: ARR_LcdLineNumAddress_U8[mENUM_LcdLineFour] = 0xd0 + (var_MaxCharsPerLine_u
      +                          8 & 0x0fu);
  3123  04F8  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  3124  04F9  390F               	andlw	15
  3125  04FA  3ED0               	addlw	208
  3126  04FB  00FA               	movwf	??_LCD_Init
  3127  04FC  087A               	movf	??_LCD_Init,w
  3128  04FD  00DE               	movwf	_ARR_LcdLineNumAddress_U8+4
  3129  04FE                     l1516:	
  3130                           
  3131                           ;lcd.c: 125: }
  3132                           ;lcd.c: 127: DELAY_ms(100);
  3133  04FE  3064               	movlw	100
  3134  04FF  00F2               	movwf	DELAY_ms@ms_count
  3135  0500  3000               	movlw	0
  3136  0501  00F3               	movwf	DELAY_ms@ms_count+1
  3137  0502  120A  118A  2248  120A  118A  	fcall	_DELAY_ms
  3138                           
  3139                           ;lcd.c: 129: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  3140  0507  1283               	bcf	3,5	;RP0=0, select bank0
  3141  0508  1303               	bcf	3,6	;RP1=0, select bank0
  3142  0509  0861               	movf	_STK_LCDConfig+2,w
  3143  050A  3A08               	xorlw	8
  3144  050B  1D03               	skipz
  3145  050C  2D0F               	goto	l1522
  3146                           
  3147                           ;lcd.c: 130: {
  3148                           ;lcd.c: 131: LCD_CmdWrite(0x38u);
  3149  050D  3038               	movlw	56
  3150  050E  2D1B               	goto	L14
  3151  050F                     l1522:	
  3152                           ;lcd.c: 132: }
  3153                           
  3154                           
  3155                           ;lcd.c: 133: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  3156  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3157  0510  1303               	bcf	3,6	;RP1=0, select bank0
  3158  0511  0861               	movf	_STK_LCDConfig+2,w
  3159  0512  3A04               	xorlw	4
  3160  0513  1D03               	skipz
  3161  0514  2D20               	goto	l174
  3162                           
  3163                           ;lcd.c: 134: {
  3164                           ;lcd.c: 135: lcd_Reset();
  3165  0515  120A  118A  248C  120A  118A  	fcall	_lcd_Reset
  3166                           
  3167                           ;lcd.c: 136: LCD_CmdWrite(0x28u);
  3168  051A  3028               	movlw	40
  3169  051B                     L14:	
  3170  051B  120A  118A  238C  120A  118A  	fcall	_LCD_CmdWrite
  3171  0520                     l174:	
  3172                           
  3173                           ;lcd.c: 137: }
  3174                           ;lcd.c: 139: LCD_CmdWrite(0x0Eu);
  3175  0520  300E               	movlw	14
  3176  0521  120A  118A  238C  120A  118A  	fcall	_LCD_CmdWrite
  3177                           
  3178                           ;lcd.c: 140: LCD_Clear();
  3179  0526  120A  118A  2206   	fcall	_LCD_Clear
  3180  0529  0008               	return
  3181  052A                     __end_of_LCD_Init:	
  3182                           
  3183                           	psect	text22
  3184  048C                     __ptext22:	
  3185 ;; *************** function _lcd_Reset *****************
  3186 ;; Defined at:
  3187 ;;		line 923 in file "lcd.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;		None
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;		None
  3192 ;; Return value:  Size  Location     Type
  3193 ;;		None               void
  3194 ;; Registers used:
  3195 ;;		wreg, status,2, status,0, pclath, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3201 ;;      Params:         0       0       0       0       0
  3202 ;;      Locals:         0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0
  3204 ;;      Totals:         0       0       0       0       0
  3205 ;;Total ram usage:        0 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    2
  3208 ;; This function calls:
  3209 ;;		_DELAY_ms
  3210 ;;		_DELAY_us
  3211 ;;		_lcd_SendCmdSignals
  3212 ;;		_lcd_SendNibble
  3213 ;; This function is called by:
  3214 ;;		_LCD_Init
  3215 ;; This function uses a non-reentrant model
  3216 ;;
  3217                           
  3218                           
  3219                           ;psect for function _lcd_Reset
  3220  048C                     _lcd_Reset:	
  3221                           
  3222                           ;lcd.c: 926: lcd_SendNibble(0x30);
  3223                           
  3224                           ;incstack = 0
  3225                           ; Regs used in _lcd_Reset: [wreg+status,2+status,0+pclath+cstack]
  3226  048C  3030               	movlw	48
  3227  048D  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  3228                           
  3229                           ;lcd.c: 927: lcd_SendCmdSignals();
  3230  0492  120A  118A  229D  120A  118A  	fcall	_lcd_SendCmdSignals
  3231                           
  3232                           ;lcd.c: 928: DELAY_ms(100);
  3233  0497  3064               	movlw	100
  3234  0498  00F2               	movwf	DELAY_ms@ms_count
  3235  0499  3000               	movlw	0
  3236  049A  00F3               	movwf	DELAY_ms@ms_count+1
  3237  049B  120A  118A  2248  120A  118A  	fcall	_DELAY_ms
  3238                           
  3239                           ;lcd.c: 929: lcd_SendNibble(0x30);
  3240  04A0  3030               	movlw	48
  3241  04A1  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  3242                           
  3243                           ;lcd.c: 930: lcd_SendCmdSignals();
  3244  04A6  120A  118A  229D  120A  118A  	fcall	_lcd_SendCmdSignals
  3245                           
  3246                           ;lcd.c: 931: DELAY_us(200);
  3247  04AB  30C8               	movlw	200
  3248  04AC  00F0               	movwf	DELAY_us@us_count
  3249  04AD  3000               	movlw	0
  3250  04AE  00F1               	movwf	DELAY_us@us_count+1
  3251  04AF  120A  118A  21FB  120A  118A  	fcall	_DELAY_us
  3252                           
  3253                           ;lcd.c: 932: lcd_SendNibble(0x30);
  3254  04B4  3030               	movlw	48
  3255  04B5  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  3256                           
  3257                           ;lcd.c: 933: lcd_SendCmdSignals();
  3258  04BA  120A  118A  229D  120A  118A  	fcall	_lcd_SendCmdSignals
  3259                           
  3260                           ;lcd.c: 934: DELAY_us(200);
  3261  04BF  30C8               	movlw	200
  3262  04C0  00F0               	movwf	DELAY_us@us_count
  3263  04C1  3000               	movlw	0
  3264  04C2  00F1               	movwf	DELAY_us@us_count+1
  3265  04C3  120A  118A  21FB  120A  118A  	fcall	_DELAY_us
  3266                           
  3267                           ;lcd.c: 935: lcd_SendNibble(0x20);
  3268  04C8  3020               	movlw	32
  3269  04C9  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  3270                           
  3271                           ;lcd.c: 936: lcd_SendCmdSignals();
  3272  04CE  120A  118A  229D  120A  118A  	fcall	_lcd_SendCmdSignals
  3273                           
  3274                           ;lcd.c: 937: DELAY_us(200);
  3275  04D3  30C8               	movlw	200
  3276  04D4  00F0               	movwf	DELAY_us@us_count
  3277  04D5  3000               	movlw	0
  3278  04D6  00F1               	movwf	DELAY_us@us_count+1
  3279  04D7  120A  118A  21FB   	fcall	_DELAY_us
  3280  04DA  0008               	return
  3281  04DB                     __end_of_lcd_Reset:	
  3282                           
  3283                           	psect	text23
  3284  0248                     __ptext23:	
  3285 ;; *************** function _DELAY_ms *****************
  3286 ;; Defined at:
  3287 ;;		line 76 in file "delay.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  ms_count        2    2[COMMON] unsigned int 
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;		None               void
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0, pclath, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3301 ;;      Params:         2       0       0       0       0
  3302 ;;      Locals:         0       0       0       0       0
  3303 ;;      Temps:          0       0       0       0       0
  3304 ;;      Totals:         2       0       0       0       0
  3305 ;;Total ram usage:        2 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    1
  3308 ;; This function calls:
  3309 ;;		_DELAY_us
  3310 ;; This function is called by:
  3311 ;;		_LCD_Init
  3312 ;;		_lcd_Reset
  3313 ;;		_DELAY_sec
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function _DELAY_ms
  3319  0248                     _DELAY_ms:	
  3320  0248                     l1378:	
  3321                           ;delay.c: 78: while(ms_count!=0)
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  3325                           
  3326  0248  0873               	movf	DELAY_ms@ms_count+1,w
  3327  0249  0472               	iorwf	DELAY_ms@ms_count,w
  3328  024A  1903               	btfsc	3,2
  3329  024B  0008               	return
  3330                           
  3331                           ;delay.c: 79: {
  3332                           ;delay.c: 80: DELAY_us(300u);
  3333  024C  302C               	movlw	44
  3334  024D  00F0               	movwf	DELAY_us@us_count
  3335  024E  3001               	movlw	1
  3336  024F  00F1               	movwf	DELAY_us@us_count+1
  3337  0250  120A  118A  21FB  120A  118A  	fcall	_DELAY_us
  3338                           
  3339                           ;delay.c: 81: ms_count--;
  3340  0255  3001               	movlw	1
  3341  0256  02F2               	subwf	DELAY_ms@ms_count,f
  3342  0257  3000               	movlw	0
  3343  0258  1C03               	skipc
  3344  0259  03F3               	decf	DELAY_ms@ms_count+1,f
  3345  025A  02F3               	subwf	DELAY_ms@ms_count+1,f
  3346  025B  2A48               	goto	l1378
  3347  025C                     __end_of_DELAY_ms:	
  3348                           
  3349                           	psect	text24
  3350  0206                     __ptext24:	
  3351 ;; *************** function _LCD_Clear *****************
  3352 ;; Defined at:
  3353 ;;		line 154 in file "lcd.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;		None               void
  3360 ;; Registers used:
  3361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3367 ;;      Params:         0       0       0       0       0
  3368 ;;      Locals:         0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0
  3370 ;;      Totals:         0       0       0       0       0
  3371 ;;Total ram usage:        0 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    4
  3374 ;; This function calls:
  3375 ;;		_LCD_CmdWrite
  3376 ;;		_LCD_GoToLine
  3377 ;; This function is called by:
  3378 ;;		_LCD_Init
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           
  3383                           ;psect for function _LCD_Clear
  3384  0206                     _LCD_Clear:	
  3385                           
  3386                           ;lcd.c: 156: LCD_CmdWrite(0x01u);
  3387                           
  3388                           ;incstack = 0
  3389                           ; Regs used in _LCD_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3390  0206  3001               	movlw	1
  3391  0207  120A  118A  238C  120A  118A  	fcall	_LCD_CmdWrite
  3392                           
  3393                           ;lcd.c: 157: LCD_GoToLine(mENUM_LcdLineOne);
  3394  020C  3001               	movlw	1
  3395  020D  120A  118A  225C   	fcall	_LCD_GoToLine
  3396  0210  0008               	return
  3397  0211                     __end_of_LCD_Clear:	
  3398                           
  3399                           	psect	text25
  3400  025C                     __ptext25:	
  3401 ;; *************** function _LCD_GoToLine *****************
  3402 ;; Defined at:
  3403 ;;		line 181 in file "lcd.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  var_lineNumb    1    wreg     unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  var_lineNumb    1    7[COMMON] unsigned char 
  3408 ;; Return value:  Size  Location     Type
  3409 ;;		None               void
  3410 ;; Registers used:
  3411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3417 ;;      Params:         0       0       0       0       0
  3418 ;;      Locals:         1       0       0       0       0
  3419 ;;      Temps:          1       0       0       0       0
  3420 ;;      Totals:         2       0       0       0       0
  3421 ;;Total ram usage:        2 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    3
  3424 ;; This function calls:
  3425 ;;		_LCD_CmdWrite
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;;		_LCD_Clear
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           
  3433                           ;psect for function _LCD_GoToLine
  3434  025C                     _LCD_GoToLine:	
  3435                           
  3436                           ;incstack = 0
  3437                           ; Regs used in _LCD_GoToLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3438                           ;LCD_GoToLine@var_lineNumber_u8 stored from wreg
  3439  025C  00F7               	movwf	LCD_GoToLine@var_lineNumber_u8
  3440                           
  3441                           ;lcd.c: 183: if(var_lineNumber_u8 <= STK_LCDConfig.mvar_MaxSupportedLines_U8)
  3442  025D  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  3443  025E  1283               	bcf	3,5	;RP0=0, select bank0
  3444  025F  1303               	bcf	3,6	;RP1=0, select bank0
  3445  0260  025F               	subwf	_STK_LCDConfig,w
  3446  0261  1C03               	skipc
  3447  0262  0008               	return
  3448                           
  3449                           ;lcd.c: 184: {
  3450                           ;lcd.c: 187: VAR_LcdTrackCursorPos_U8 = 0x00;
  3451  0263  01E2               	clrf	_VAR_LcdTrackCursorPos_U8
  3452                           
  3453                           ;lcd.c: 188: VAR_LcdTrackLineNum_U8 = var_lineNumber_u8;
  3454  0264  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  3455  0265  00F6               	movwf	??_LCD_GoToLine
  3456  0266  0876               	movf	??_LCD_GoToLine,w
  3457  0267  00E3               	movwf	_VAR_LcdTrackLineNum_U8
  3458                           
  3459                           ;lcd.c: 189: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[var_lineNumber_u8]);
  3460  0268  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  3461  0269  3E5A               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
  3462  026A  0084               	movwf	4
  3463  026B  1383               	bcf	3,7	;select IRP bank0
  3464  026C  0800               	movf	0,w
  3465  026D  120A  118A  238C   	fcall	_LCD_CmdWrite
  3466  0270  0008               	return
  3467  0271                     __end_of_LCD_GoToLine:	
  3468                           
  3469                           	psect	text26
  3470  038C                     __ptext26:	
  3471 ;; *************** function _LCD_CmdWrite *****************
  3472 ;; Defined at:
  3473 ;;		line 274 in file "lcd.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;  var_lcdCmd_u    1    wreg     unsigned char 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  var_lcdCmd_u    1    5[COMMON] unsigned char 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;		None               void
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0, pclath, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3487 ;;      Params:         0       0       0       0       0
  3488 ;;      Locals:         1       0       0       0       0
  3489 ;;      Temps:          1       0       0       0       0
  3490 ;;      Totals:         2       0       0       0       0
  3491 ;;Total ram usage:        2 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    2
  3494 ;; This function calls:
  3495 ;;		_lcd_BusyCheck
  3496 ;;		_lcd_SendCmdSignals
  3497 ;;		_lcd_SendNibble
  3498 ;; This function is called by:
  3499 ;;		_LCD_Init
  3500 ;;		_LCD_Clear
  3501 ;;		_LCD_GoToLine
  3502 ;;		_LCD_GoToNextLine
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           
  3507                           ;psect for function _LCD_CmdWrite
  3508  038C                     _LCD_CmdWrite:	
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _LCD_CmdWrite: [wreg+status,2+status,0+pclath+cstack]
  3512                           ;LCD_CmdWrite@var_lcdCmd_u8 stored from wreg
  3513  038C  00F5               	movwf	LCD_CmdWrite@var_lcdCmd_u8
  3514                           
  3515                           ;lcd.c: 276: lcd_BusyCheck();
  3516  038D  120A  118A  252A  120A  118A  	fcall	_lcd_BusyCheck
  3517                           
  3518                           ;lcd.c: 277: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  3519  0392  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0393  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0394  0861               	movf	_STK_LCDConfig+2,w
  3522  0395  3A08               	xorlw	8
  3523  0396  1D03               	skipz
  3524  0397  2B9E               	goto	l1328
  3525                           
  3526                           ;lcd.c: 278: {
  3527                           ;lcd.c: 280: PORTB = var_lcdCmd_u8;
  3528  0398  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  3529  0399  0086               	movwf	6	;volatile
  3530                           
  3531                           ;lcd.c: 281: lcd_SendCmdSignals();
  3532  039A  120A  118A  229D   	fcall	_lcd_SendCmdSignals
  3533                           
  3534                           ;lcd.c: 282: }
  3535  039D  0008               	return
  3536  039E                     l1328:	
  3537                           
  3538                           ;lcd.c: 283: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  3539  039E  1283               	bcf	3,5	;RP0=0, select bank0
  3540  039F  1303               	bcf	3,6	;RP1=0, select bank0
  3541  03A0  0861               	movf	_STK_LCDConfig+2,w
  3542  03A1  3A04               	xorlw	4
  3543  03A2  1D03               	skipz
  3544  03A3  0008               	return
  3545                           
  3546                           ;lcd.c: 284: {
  3547                           ;lcd.c: 285: lcd_SendNibble(var_lcdCmd_u8);
  3548  03A4  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  3549  03A5  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  3550                           
  3551                           ;lcd.c: 286: lcd_SendCmdSignals();
  3552  03AA  120A  118A  229D  120A  118A  	fcall	_lcd_SendCmdSignals
  3553                           
  3554                           ;lcd.c: 288: lcd_SendNibble(var_lcdCmd_u8 << 4);
  3555  03AF  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  3556  03B0  00F4               	movwf	??_LCD_CmdWrite
  3557  03B1  3003               	movlw	3
  3558  03B2                     u645:	
  3559  03B2  1003               	clrc
  3560  03B3  0DF4               	rlf	??_LCD_CmdWrite,f
  3561  03B4  3EFF               	addlw	-1
  3562  03B5  1D03               	skipz
  3563  03B6  2BB2               	goto	u645
  3564  03B7  1003               	clrc
  3565  03B8  0D74               	rlf	??_LCD_CmdWrite,w
  3566  03B9  120A  118A  2316  120A  118A  	fcall	_lcd_SendNibble
  3567                           
  3568                           ;lcd.c: 289: lcd_SendCmdSignals();
  3569  03BE  120A  118A  229D   	fcall	_lcd_SendCmdSignals
  3570  03C1  0008               	return
  3571  03C2                     __end_of_LCD_CmdWrite:	
  3572                           
  3573                           	psect	text27
  3574  0316                     __ptext27:	
  3575 ;; *************** function _lcd_SendNibble *****************
  3576 ;; Defined at:
  3577 ;;		line 953 in file "lcd.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  var             1    wreg     unsigned char 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  var             1    1[COMMON] unsigned char 
  3582 ;; Return value:  Size  Location     Type
  3583 ;;		None               void
  3584 ;; Registers used:
  3585 ;;		wreg, status,2, status,0
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3591 ;;      Params:         0       0       0       0       0
  3592 ;;      Locals:         1       0       0       0       0
  3593 ;;      Temps:          1       0       0       0       0
  3594 ;;      Totals:         2       0       0       0       0
  3595 ;;Total ram usage:        2 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; This function calls:
  3598 ;;		Nothing
  3599 ;; This function is called by:
  3600 ;;		_LCD_CmdWrite
  3601 ;;		_lcd_DataWrite
  3602 ;;		_lcd_Reset
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           
  3607                           ;psect for function _lcd_SendNibble
  3608  0316                     _lcd_SendNibble:	
  3609                           
  3610                           ;incstack = 0
  3611                           ; Regs used in _lcd_SendNibble: [wreg+status,2+status,0]
  3612                           ;lcd_SendNibble@var stored from wreg
  3613  0316  00F1               	movwf	lcd_SendNibble@var
  3614                           
  3615                           ;lcd.c: 955: (((((var)&((1<<(4))))!=0u))? ((PORTB) |= (1<<(4))): ((PORTB) &= ~(1<<(4))))
      +                          ;
  3616  0317  1E71               	btfss	lcd_SendNibble@var,4
  3617  0318  2B1D               	goto	l1300
  3618  0319  1283               	bcf	3,5	;RP0=0, select bank0
  3619  031A  1303               	bcf	3,6	;RP1=0, select bank0
  3620  031B  1606               	bsf	6,4	;volatile
  3621  031C  2B23               	goto	l1302
  3622  031D                     l1300:	
  3623  031D  30EF               	movlw	239
  3624  031E  00F0               	movwf	??_lcd_SendNibble
  3625  031F  0870               	movf	??_lcd_SendNibble,w
  3626  0320  1283               	bcf	3,5	;RP0=0, select bank0
  3627  0321  1303               	bcf	3,6	;RP1=0, select bank0
  3628  0322  0586               	andwf	6,f	;volatile
  3629  0323                     l1302:	
  3630                           
  3631                           ;lcd.c: 956: (((((var)&((1<<(5))))!=0u))? ((PORTB) |= (1<<(5))): ((PORTB) &= ~(1<<(5))))
      +                          ;
  3632  0323  1EF1               	btfss	lcd_SendNibble@var,5
  3633  0324  2B27               	goto	l1306
  3634  0325  1686               	bsf	6,5	;volatile
  3635  0326  2B2B               	goto	l1308
  3636  0327                     l1306:	
  3637  0327  30DF               	movlw	223
  3638  0328  00F0               	movwf	??_lcd_SendNibble
  3639  0329  0870               	movf	??_lcd_SendNibble,w
  3640  032A  0586               	andwf	6,f	;volatile
  3641  032B                     l1308:	
  3642                           
  3643                           ;lcd.c: 957: (((((var)&((1<<(6))))!=0u))? ((PORTB) |= (1<<(6))): ((PORTB) &= ~(1<<(6))))
      +                          ;
  3644  032B  1F71               	btfss	lcd_SendNibble@var,6
  3645  032C  2B2F               	goto	l1312
  3646  032D  1706               	bsf	6,6	;volatile
  3647  032E  2B33               	goto	l1314
  3648  032F                     l1312:	
  3649  032F  30BF               	movlw	191
  3650  0330  00F0               	movwf	??_lcd_SendNibble
  3651  0331  0870               	movf	??_lcd_SendNibble,w
  3652  0332  0586               	andwf	6,f	;volatile
  3653  0333                     l1314:	
  3654                           
  3655                           ;lcd.c: 958: (((((var)&((1<<(7))))!=0u))? ((PORTB) |= (1<<(7))): ((PORTB) &= ~(1<<(7))))
      +                          ;
  3656  0333  1FF1               	btfss	lcd_SendNibble@var,7
  3657  0334  2B37               	goto	l1318
  3658  0335  1786               	bsf	6,7	;volatile
  3659  0336  0008               	return
  3660  0337                     l1318:	
  3661  0337  307F               	movlw	127
  3662  0338  00F0               	movwf	??_lcd_SendNibble
  3663  0339  0870               	movf	??_lcd_SendNibble,w
  3664  033A  0586               	andwf	6,f	;volatile
  3665  033B  0008               	return
  3666  033C                     __end_of_lcd_SendNibble:	
  3667                           
  3668                           	psect	text28
  3669  029D                     __ptext28:	
  3670 ;; *************** function _lcd_SendCmdSignals *****************
  3671 ;; Defined at:
  3672 ;;		line 972 in file "lcd.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;		None
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;		None               void
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0, pclath, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3686 ;;      Params:         0       0       0       0       0
  3687 ;;      Locals:         0       0       0       0       0
  3688 ;;      Temps:          1       0       0       0       0
  3689 ;;      Totals:         1       0       0       0       0
  3690 ;;Total ram usage:        1 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    1
  3693 ;; This function calls:
  3694 ;;		_DELAY_us
  3695 ;; This function is called by:
  3696 ;;		_LCD_CmdWrite
  3697 ;;		_lcd_Reset
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701                           
  3702                           ;psect for function _lcd_SendCmdSignals
  3703  029D                     _lcd_SendCmdSignals:	
  3704                           
  3705                           ;lcd.c: 974: (((PORTD)) &= ~(1<<((0))));
  3706                           
  3707                           ;incstack = 0
  3708                           ; Regs used in _lcd_SendCmdSignals: [wreg+status,2+status,0+pclath+cstack]
  3709  029D  30FE               	movlw	254
  3710  029E  00F2               	movwf	??_lcd_SendCmdSignals
  3711  029F  0872               	movf	??_lcd_SendCmdSignals,w
  3712  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  3713  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  3714  02A2  0588               	andwf	8,f	;volatile
  3715                           
  3716                           ;lcd.c: 976: (((PORTD)) &= ~(1<<((1))));
  3717  02A3  30FD               	movlw	253
  3718  02A4  00F2               	movwf	??_lcd_SendCmdSignals
  3719  02A5  0872               	movf	??_lcd_SendCmdSignals,w
  3720  02A6  0588               	andwf	8,f	;volatile
  3721                           
  3722                           ;lcd.c: 978: (((PORTD)) |= (1<<((2))));
  3723  02A7  1508               	bsf	8,2	;volatile
  3724                           
  3725                           ;lcd.c: 979: DELAY_us(10);
  3726  02A8  300A               	movlw	10
  3727  02A9  00F0               	movwf	DELAY_us@us_count
  3728  02AA  3000               	movlw	0
  3729  02AB  00F1               	movwf	DELAY_us@us_count+1
  3730  02AC  120A  118A  21FB   	fcall	_DELAY_us
  3731                           
  3732                           ;lcd.c: 980: (((PORTD)) &= ~(1<<((2))));
  3733  02AF  30FB               	movlw	251
  3734  02B0  00F2               	movwf	??_lcd_SendCmdSignals
  3735  02B1  0872               	movf	??_lcd_SendCmdSignals,w
  3736  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  3737  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  3738  02B4  0588               	andwf	8,f	;volatile
  3739  02B5  0008               	return
  3740  02B6                     __end_of_lcd_SendCmdSignals:	
  3741                           
  3742                           	psect	text29
  3743  052A                     __ptext29:	
  3744 ;; *************** function _lcd_BusyCheck *****************
  3745 ;; Defined at:
  3746 ;;		line 873 in file "lcd.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;  busyflag        1    3[COMMON] unsigned char 
  3751 ;; Return value:  Size  Location     Type
  3752 ;;		None               void
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3760 ;;      Params:         0       0       0       0       0
  3761 ;;      Locals:         1       0       0       0       0
  3762 ;;      Temps:          1       0       0       0       0
  3763 ;;      Totals:         2       0       0       0       0
  3764 ;;Total ram usage:        2 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    1
  3767 ;; This function calls:
  3768 ;;		_DELAY_us
  3769 ;; This function is called by:
  3770 ;;		_LCD_CmdWrite
  3771 ;;		_lcd_DataWrite
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           
  3776                           ;psect for function _lcd_BusyCheck
  3777  052A                     _lcd_BusyCheck:	
  3778                           
  3779                           ;incstack = 0
  3780                           ; Regs used in _lcd_BusyCheck: [wreg+status,2+status,0+pclath+cstack]
  3781  052A  1683               	bsf	3,5	;RP0=1, select bank1
  3782  052B  1303               	bcf	3,6	;RP1=0, select bank1
  3783  052C  1786               	bsf	6,7	;volatile
  3784                           
  3785                           ;lcd.c: 879: (((PORTD)) &= ~(1<<((0))));
  3786  052D  30FE               	movlw	254
  3787  052E  00F2               	movwf	??_lcd_BusyCheck
  3788  052F  0872               	movf	??_lcd_BusyCheck,w
  3789  0530  1283               	bcf	3,5	;RP0=0, select bank0
  3790  0531  1303               	bcf	3,6	;RP1=0, select bank0
  3791  0532  0588               	andwf	8,f	;volatile
  3792                           
  3793                           ;lcd.c: 880: (((PORTD)) |= (1<<((1))));
  3794  0533  1488               	bsf	8,1	;volatile
  3795  0534                     l271:	
  3796                           ;lcd.c: 881: do
  3797                           
  3798                           
  3799                           ;lcd.c: 882: {
  3800                           ;lcd.c: 884: (((PORTD)) &= ~(1<<((2))));
  3801  0534  30FB               	movlw	251
  3802  0535  00F2               	movwf	??_lcd_BusyCheck
  3803  0536  0872               	movf	??_lcd_BusyCheck,w
  3804  0537  1283               	bcf	3,5	;RP0=0, select bank0
  3805  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3806  0539  0588               	andwf	8,f	;volatile
  3807                           
  3808                           ;lcd.c: 885: DELAY_us(10);
  3809  053A  300A               	movlw	10
  3810  053B  00F0               	movwf	DELAY_us@us_count
  3811  053C  3000               	movlw	0
  3812  053D  00F1               	movwf	DELAY_us@us_count+1
  3813  053E  120A  118A  21FB  120A  118A  	fcall	_DELAY_us
  3814                           
  3815                           ;lcd.c: 886: (((PORTD)) |= (1<<((2))));
  3816  0543  1283               	bcf	3,5	;RP0=0, select bank0
  3817  0544  1303               	bcf	3,6	;RP1=0, select bank0
  3818  0545  1508               	bsf	8,2	;volatile
  3819                           
  3820                           ;lcd.c: 887: DELAY_us(10);
  3821  0546  300A               	movlw	10
  3822  0547  00F0               	movwf	DELAY_us@us_count
  3823  0548  3000               	movlw	0
  3824  0549  00F1               	movwf	DELAY_us@us_count+1
  3825  054A  120A  118A  21FB  120A  118A  	fcall	_DELAY_us
  3826                           
  3827                           ;lcd.c: 888: busyflag = (((PORTB)&((1<<(7))))!=0u);
  3828  054F  3000               	movlw	0
  3829  0550  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0551  1303               	bcf	3,6	;RP1=0, select bank0
  3831  0552  1B86               	btfsc	6,7	;volatile
  3832  0553  3001               	movlw	1
  3833  0554  00F2               	movwf	??_lcd_BusyCheck
  3834  0555  0872               	movf	??_lcd_BusyCheck,w
  3835  0556  00F3               	movwf	lcd_BusyCheck@busyflag
  3836                           
  3837                           ;lcd.c: 891: if(STK_LCDConfig.mvar_LcdMode_U8 == 4)
  3838  0557  0861               	movf	_STK_LCDConfig+2,w
  3839  0558  3A04               	xorlw	4
  3840  0559  1D03               	skipz
  3841  055A  2D74               	goto	l1282
  3842                           
  3843                           ;lcd.c: 892: {
  3844                           ;lcd.c: 894: (((PORTD)) &= ~(1<<((2))));
  3845  055B  30FB               	movlw	251
  3846  055C  00F2               	movwf	??_lcd_BusyCheck
  3847  055D  0872               	movf	??_lcd_BusyCheck,w
  3848  055E  0588               	andwf	8,f	;volatile
  3849                           
  3850                           ;lcd.c: 895: DELAY_us(10);
  3851  055F  300A               	movlw	10
  3852  0560  00F0               	movwf	DELAY_us@us_count
  3853  0561  3000               	movlw	0
  3854  0562  00F1               	movwf	DELAY_us@us_count+1
  3855  0563  120A  118A  21FB  120A  118A  	fcall	_DELAY_us
  3856                           
  3857                           ;lcd.c: 896: (((PORTD)) |= (1<<((2))));
  3858  0568  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0569  1303               	bcf	3,6	;RP1=0, select bank0
  3860  056A  1508               	bsf	8,2	;volatile
  3861                           
  3862                           ;lcd.c: 897: DELAY_us(10);
  3863  056B  300A               	movlw	10
  3864  056C  00F0               	movwf	DELAY_us@us_count
  3865  056D  3000               	movlw	0
  3866  056E  00F1               	movwf	DELAY_us@us_count+1
  3867  056F  120A  118A  21FB  120A  118A  	fcall	_DELAY_us
  3868  0574                     l1282:	
  3869                           
  3870                           ;lcd.c: 898: }
  3871                           ;lcd.c: 899: }while(busyflag);
  3872  0574  08F3               	movf	lcd_BusyCheck@busyflag,f
  3873  0575  1D03               	skipz
  3874  0576  2D34               	goto	l271
  3875                           
  3876                           ;lcd.c: 901: ((0x00u)? ((TRISB) |= (1<<(7))): ((TRISB) &= ~(1<<(7))));
  3877  0577  307F               	movlw	127
  3878  0578  00F2               	movwf	??_lcd_BusyCheck
  3879  0579  0872               	movf	??_lcd_BusyCheck,w
  3880  057A  1683               	bsf	3,5	;RP0=1, select bank1
  3881  057B  1303               	bcf	3,6	;RP1=0, select bank1
  3882  057C  0586               	andwf	6,f	;volatile
  3883  057D  0008               	return
  3884  057E                     __end_of_lcd_BusyCheck:	
  3885                           
  3886                           	psect	text30
  3887  01FB                     __ptext30:	
  3888 ;; *************** function _DELAY_us *****************
  3889 ;; Defined at:
  3890 ;;		line 55 in file "delay.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  us_count        2    0[COMMON] unsigned int 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;		None               void
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3904 ;;      Params:         2       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0
  3907 ;;      Totals:         2       0       0       0       0
  3908 ;;Total ram usage:        2 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; This function calls:
  3911 ;;		Nothing
  3912 ;; This function is called by:
  3913 ;;		_DELAY_ms
  3914 ;;		_lcd_BusyCheck
  3915 ;;		_lcd_Reset
  3916 ;;		_lcd_SendCmdSignals
  3917 ;;		_lcd_SendDataSignals
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           
  3922                           ;psect for function _DELAY_us
  3923  01FB                     _DELAY_us:	
  3924  01FB                     l1256:	
  3925                           ;delay.c: 57: while(us_count!=0)
  3926                           
  3927                           ;incstack = 0
  3928                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  3929                           
  3930  01FB  0871               	movf	DELAY_us@us_count+1,w
  3931  01FC  0470               	iorwf	DELAY_us@us_count,w
  3932  01FD  1903               	btfsc	3,2
  3933  01FE  0008               	return
  3934                           
  3935                           ;delay.c: 58: {
  3936                           ;delay.c: 59: us_count--;
  3937  01FF  3001               	movlw	1
  3938  0200  02F0               	subwf	DELAY_us@us_count,f
  3939  0201  3000               	movlw	0
  3940  0202  1C03               	skipc
  3941  0203  03F1               	decf	DELAY_us@us_count+1,f
  3942  0204  02F1               	subwf	DELAY_us@us_count+1,f
  3943  0205  29FB               	goto	l1256
  3944  0206                     __end_of_DELAY_us:	
  3945  007E                     btemp	set	126	;btemp
  3946  007E                     wtemp	set	126
  3947  007E                     wtemp0	set	126
  3948  0080                     wtemp1	set	128
  3949  0082                     wtemp2	set	130
  3950  0084                     wtemp3	set	132
  3951  0086                     wtemp4	set	134
  3952  0088                     wtemp5	set	136
  3953  007F                     wtemp6	set	127
  3954  007E                     ttemp	set	126
  3955  007E                     ttemp0	set	126
  3956  0081                     ttemp1	set	129
  3957  0084                     ttemp2	set	132
  3958  0087                     ttemp3	set	135
  3959  007F                     ttemp4	set	127
  3960  007E                     ltemp	set	126
  3961  007E                     ltemp0	set	126
  3962  0082                     ltemp1	set	130
  3963  0086                     ltemp2	set	134
  3964  0080                     ltemp3	set	128


Data Sizes:
    Strings     35
    Constant    0
    Data        5
    BSS         2
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      68
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    RTC_GetDate@ptr_year_u8	PTR unsigned char  size(1) Largest target is 1
		 -> main@year(BANK0[1]), 

    RTC_GetDate@ptr_month_u8	PTR unsigned char  size(1) Largest target is 1
		 -> main@month(BANK0[1]), 

    RTC_GetDate@ptr_day_u8	PTR unsigned char  size(1) Largest target is 1
		 -> main@day(BANK0[1]), 

    RTC_GetTime@ptr_hour_u8	PTR unsigned char  size(1) Largest target is 1
		 -> main@hour(BANK0[1]), 

    RTC_GetTime@ptr_min_u8	PTR unsigned char  size(1) Largest target is 1
		 -> main@min(BANK0[1]), 

    RTC_GetTime@ptr_sec_u8	PTR unsigned char  size(1) Largest target is 1
		 -> main@sec(BANK0[1]), 

    LCD_Printf@str	PTR unsigned char  size(1) Largest target is 0

    LCD_Printf@argList	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[17]), 

    LCD_Printf@ptr	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_2(CODE[18]), STR_1(CODE[17]), 

    LCD_Printf@argp	PTR void [1] size(1) Largest target is 0
		 -> ?_LCD_Printf(BANK0[0]), 


Critical Paths under _main in COMMON

    _RTC_SetTime->_I2C_Write
    _RTC_SetDate->_I2C_Write
    _RTC_Init->_I2C_Write
    _RTC_GetTime->_I2C_Read
    _RTC_GetDate->_I2C_Read
    _LCD_Printf->_LCD_DisplayHexNumber
    _LCD_DisplayHexNumber->_LCD_DisplayChar
    _LCD_DisplayChar->_LCD_GoToNextLine
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_SendDataSignals->_DELAY_us
    _LCD_GoToNextLine->_LCD_CmdWrite
    _lcd_Reset->_DELAY_ms
    _DELAY_ms->_DELAY_us
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _lcd_SendCmdSignals->_DELAY_us
    _lcd_BusyCheck->_DELAY_us

Critical Paths under _main in BANK0

    _main->_LCD_Printf
    _LCD_Printf->_LCD_DisplayHexNumber

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   16322
                                             46 BANK0     12    12      0
                       _LCD_GoToLine
                           _LCD_Init
                         _LCD_Printf
                        _RTC_GetDate
                        _RTC_GetTime
                           _RTC_Init
                        _RTC_SetDate
                        _RTC_SetTime
 ---------------------------------------------------------------------------------
 (1) _RTC_SetTime                                          3     1      2     194
                                              1 COMMON     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_SetDate                                          3     1      2     194
                                              1 COMMON     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0      22
                           _I2C_Init
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTC_GetTime                                          4     2      2     267
                                              3 COMMON     4     2      2
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_GetDate                                          4     2      2     267
                                              3 COMMON     4     2      2
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0      46
                                              0 COMMON     3     3      0
                            _i2c_Ack
                          _i2c_NoAck
                    _i2c_WaitForIdle
 ---------------------------------------------------------------------------------
 (3) _i2c_WaitForIdle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_NoAck                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_Ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Printf                                          29    23      6    6936
                                             17 BANK0     29    23      6
                    _LCD_DisplayChar
               _LCD_DisplayHexNumber
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     145
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayHexNumber                                22    17      5    3412
                                              9 COMMON     5     0      5
                                              0 BANK0     17    17      0
                    _LCD_DisplayChar
 ---------------------------------------------------------------------------------
 (3) _LCD_DisplayChar                                      2     2      0    2632
                                              7 COMMON     2     2      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (4) _lcd_DataWrite                                        2     2      0    1283
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendDataSignals                                  1     1      0     553
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (4) _LCD_GoToNextLine                                     1     1      0    1283
                                              6 COMMON     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     2      2    6817
                                              8 COMMON     4     2      2
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    1929
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (3) _DELAY_ms                                             2     0      2     735
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0    2632
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToLine                                         2     2      0    1349
                                              6 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (5) _LCD_CmdWrite                                         2     2      0    1283
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (5) _lcd_SendNibble                                       2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_SendCmdSignals                                   1     1      0     553
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (5) _lcd_BusyCheck                                        2     2      0     576
                                              2 COMMON     2     2      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (6) _DELAY_us                                             2     0      2     553
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_GoToLine
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
         _lcd_SendNibble
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendCmdSignals
             _DELAY_us
           _lcd_SendNibble
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
   _LCD_Printf
     _LCD_DisplayChar
       _LCD_GoToNextLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendCmdSignals
             _DELAY_us
           _lcd_SendNibble
       _lcd_DataWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendDataSignals
           _DELAY_us
         _lcd_SendNibble
     _LCD_DisplayHexNumber
       _LCD_DisplayChar
         _LCD_GoToNextLine
           _LCD_CmdWrite
             _lcd_BusyCheck
               _DELAY_us
             _lcd_SendCmdSignals
               _DELAY_us
             _lcd_SendNibble
         _lcd_DataWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendDataSignals
             _DELAY_us
           _lcd_SendNibble
     ___bmul
   _RTC_GetDate
     _I2C_Read
       _i2c_Ack
       _i2c_NoAck
       _i2c_WaitForIdle
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_GetTime
     _I2C_Read
       _i2c_Ack
       _i2c_NoAck
       _i2c_WaitForIdle
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_Init
     _I2C_Init
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_SetDate
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle
   _RTC_SetTime
     _I2C_Start
     _I2C_Stop
     _I2C_Write
       _i2c_WaitForIdle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3A      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      52      12        0.0%
ABS                  0      0      52       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Feb 18 17:52:43 2015

                                              pc 0002                                   ___bmul@product 0072  
                             __size_of_I2C_Start 0006                                      __CFG_CP$OFF 0000  
                               ?_i2c_WaitForIdle 0070                                    ?_LCD_CmdWrite 0070  
                             __size_of_I2C_Write 000D                                               _BF 04A0  
                                             l92 01EA                                               l86 01E4  
                                             l98 0221                                      ?_LCD_Printf 0031  
                                             fsr 0004                                    ?_LCD_GoToLine 0070  
                          RTC_SetDate@var_day_u8 0073                                      __CFG_LVP$ON 0000  
                                            l112 0211                                              l104 02FA  
                                            l124 01F8                                              l118 01F1  
                                            l174 0520                                              l271 0534  
                                            _PEN 048A                                     __CFG_CPD$OFF 0000  
                                            _SEN 0488                                              u645 03B2  
                                            u905 05B7                                              u685 03E8  
                                            _R_W 04A2                                              fsr0 0004  
                                            indf 0000                    __size_of_LCD_DisplayHexNumber 0085  
                                  _STK_LCDConfig 005F                                     __CFG_FOSC$HS 0000  
                        __end_of_LCD_DisplayChar 02D5                                             l1300 031D  
                                           l1302 0323                                             l1312 032F  
                                           l1400 02C6                                             l1314 0333  
                                           l1306 0327                                             l1308 032B  
                                           l1318 0337                                             l1350 027E  
                                           l1430 0311                                             l1256 01FB  
                                           l1328 039E                                             l1360 03D4  
                                           l1432 0314                                             l1282 0574  
                                           l1522 050F                                             l1610 06FE  
                                           l1516 04FE                                             l1452 0588  
                                           l1620 0715                                             l1604 06D1  
                                           l1480 05EA                                             l1472 05D5  
                                           l1464 05C8                                             l1456 059A  
                                           l1632 0726                                             l1624 0724  
                                           l1616 070A                                             l1608 06F9  
                                           l1378 0248                                             l1474 059B  
                                           l1490 0239                                             l1476 05DA  
                                           l1660 079D                                             l1652 0784  
                                           l1644 0768                                             l1628 0725  
                                           l1398 02C1                                             l1486 05FF  
                                           l1494 023F                                             l1638 0742  
                                           l1670 06A2                                             l1656 0791  
                                           l1648 0774                                             l1664 079F  
                                           l1666 07D1                                             l1668 07D7  
                                           l1696 0636                                             STR_1 001B  
                                           STR_2 0009                            RTC_GetDate@ptr_day_u8 0076  
                                           _RCEN 048B                                             _RSEN 0489  
                                   __CFG_WRT$OFF 0000                                             _main 0603  
                         RTC_SetDate@var_year_u8 0072                               __size_of_LCD_Clear 000B  
                               __end_of_I2C_Init 0237                                 __end_of_I2C_Read 0316  
                                           btemp 007E                                 __end_of_I2C_Stop 01ED  
                                           ltemp 007E                                             start 0000  
                                           ttemp 007E                                             wtemp 007E  
                               __end_of_DELAY_ms 025C                                 __end_of_DELAY_us 0206  
                              ___bmul@multiplier 0073                                  __end_of_i2c_Ack 01F4  
                                 ??_LCD_CmdWrite 0074                                   ??_LCD_GoToLine 0076  
                               __end_of_LCD_Init 052A                                 lcd_DataWrite@dat 0075  
                                          ?_main 0070                                            _ACKEN 048C  
                                          _ACKDT 048D                                    __CFG_WDTE$OFF 0000  
                                          _PORTB 0006                                            _PORTD 0008  
                                          _TRISB 0086                                            _TRISD 0088  
LCD_DisplayHexNumber@var_numOfDigitsToDisplay_u8 007D                          RTC_SetDate@var_month_u8 0071  
          LCD_DisplayHexNumber@var_hexNumber_u32 0079                                 __end_of_RTC_Init 02F5  
                              __end_of_I2C_Start 01E7                           RTC_GetDate@ptr_year_u8 0074  
                              __end_of_I2C_Write 0229                                   __CFG_BOREN$OFF 0000  
                                          pclath 000A                                            ltemp0 007E  
                                          ltemp1 0082                                            ltemp2 0086  
                                          ltemp3 0080                              __size_of_LCD_Printf 0147  
                                          ttemp0 007E                                            ttemp1 0081  
                                          ttemp2 0084                                            ttemp3 0087  
                                          ttemp4 007F                                            status 0003  
                                          wtemp0 007E                                            wtemp1 0080  
                                          wtemp2 0082                                            wtemp3 0084  
                                          wtemp4 0086                                            wtemp5 0088  
                                          wtemp6 007F                            LCD_DisplayHexNumber@a 0024  
                          LCD_DisplayHexNumber@i 0030                                  __initialization 07DE  
                                   __end_of_main 0697                        LCD_CmdWrite@var_lcdCmd_u8 0075  
                                         ??_main 004E                      __size_of_lcd_SendCmdSignals 0019  
                              __end_of_LCD_Clear 0211                            LCD_Printf@var_num_s16 0040  
                          LCD_Printf@var_num_s32 0039                            LCD_Printf@var_num_u16 0047  
                          LCD_Printf@var_num_u32 0043                                 ?_LCD_DisplayChar 0070  
                                   LCD_Printf@ch 004C                               __size_of_i2c_NoAck 0007  
                              lcd_SendNibble@var 0071                         I2C_Read@var_ackOption_u8 0071  
                     LCD_Printf@var_floatNum_f32 003D                                           _SSPADD 0093  
                                         _TRISC3 043B                                           _TRISC4 043C  
                                         _SSPCON 0014                                           _SSPBUF 0013  
                                      ??_i2c_Ack 0070                            lcd_BusyCheck@busyflag 0073  
                                 __CFG_PWRTE$OFF 0000                                           ___bmul 0237  
                        RTC_GetDate@ptr_month_u8 0073                                 DELAY_ms@ms_count 0072  
                                      ?_I2C_Init 0070                                        ?_I2C_Read 0070  
                                      ?_I2C_Stop 0070                                ?_LCD_GoToNextLine 0070  
                                      ?_DELAY_ms 0072                                        ?_DELAY_us 0070  
                             ??_LCD_GoToNextLine 0076                             __end_of_LCD_CmdWrite 03C2  
                           __end_of_LCD_GoToLine 0271                                     ?_RTC_GetDate 0073  
                                   ?_RTC_GetTime 0073                          __end_of__initialization 07FC  
                                      ?_LCD_Init 0078                                     ?_RTC_SetDate 0071  
                                   ?_RTC_SetTime 0071                              ___bmul@multiplicand 0070  
                                 __pcstackCOMMON 0070                                     __pidataBANK0 01DC  
                          __end_of_lcd_DataWrite 03F8                                __end_of_i2c_NoAck 01FB  
                                   ??_LCD_Printf 0037                                        ?_RTC_Init 0070  
                                     ??_I2C_Init 0070                                       ??_I2C_Read 0070  
                             __size_of_lcd_Reset 004F                                       ??_I2C_Stop 0070  
                   __size_of_lcd_SendDataSignals 0016                                       ??_DELAY_ms 0074  
                                     ??_DELAY_us 0072                    LCD_DisplayChar@var_lcdData_u8 0078  
                                     __pbssBANK0 0062                            __end_of_lcd_BusyCheck 057E  
                                     ??_LCD_Init 007A                               __end_of_LCD_Printf 07DE  
                   __end_of_LCD_DisplayHexNumber 0603                                       __pmaintext 0603  
                                        ?___bmul 0070                                    LCD_Printf@ptr 004B  
                                     ??_RTC_Init 0071                                    LCD_Printf@str 0042  
                       __size_of_i2c_WaitForIdle 000B                                 DELAY_us@us_count 0070  
                                        _SSPSTAT 0094                                       __stringtab 0003  
                                        _i2c_Ack 01ED                                        _I2C_Start 01E1  
                                      _I2C_Write 021C                                __end_of_lcd_Reset 04DB  
                                __size_of___bmul 0011                          __size_of_lcd_SendNibble 0026  
                                        __ptext1 0364                                          __ptext2 033C  
                                        __ptext3 02D5                                          __ptext4 0229  
                                        __ptext5 0442                                          __ptext6 03F8  
                                        __ptext7 021C                                          __ptext8 01E7  
                                        __ptext9 01E1                            __size_of_LCD_CmdWrite 0036  
                          __size_of_LCD_GoToLine 0015                                        _LCD_Clear 0206  
                                        main@day 0057                                          main@min 0055  
                                        main@sec 0054                             end_of_initialization 07FC  
                           __size_of_RTC_GetDate 004A                                       ?_I2C_Start 0070  
                                     ?_I2C_Write 0070                             __size_of_RTC_GetTime 004A  
                           __size_of_RTC_SetDate 0028                             __size_of_RTC_SetTime 0028  
                     __end_of_lcd_SendCmdSignals 02B6                                     _LCD_CmdWrite 038C  
                                   _LCD_GoToLine 025C                             _LCD_DisplayHexNumber 057E  
                                     ?_LCD_Clear 0070                                __size_of_I2C_Init 000E  
                              __size_of_I2C_Read 0021                    LCD_GoToLine@var_lineNumber_u8 0077  
                              __size_of_I2C_Stop 0006                                __size_of_DELAY_ms 0014  
                              __size_of_DELAY_us 000B                                ??_i2c_WaitForIdle 0070  
                       __size_of_LCD_DisplayChar 001F                                __size_of_LCD_Init 004F  
                      __size_of_LCD_GoToNextLine 0016                              _lcd_SendDataSignals 0287  
                                 __end_of___bmul 0248                   LCD_Init@var_MaxCharsPerLine_u8 0079  
                              LCD_Printf@argList 0049                                        _i2c_NoAck 01F4  
                       _ARR_LcdLineNumAddress_U8 005A                                __size_of_RTC_Init 0020  
                          ?_LCD_DisplayHexNumber 0079                              start_initialization 07DE  
                           ?_lcd_SendDataSignals 0070                         _VAR_LcdTrackCursorPos_U8 0062  
                                    ??_I2C_Start 0070                                      ??_I2C_Write 0070  
                                       ??___bmul 0071                                      __pdataBANK0 005A  
                                 _lcd_SendNibble 0316                                       ?_i2c_NoAck 0070  
                    LCD_Init@var_lcdNoOfLines_u8 0078               LCD_Printf@var_numOfDigitsToDisp_u8 004A  
                          ??_lcd_SendDataSignals 0072                                        ___latbits 0002  
                                  __pcstackBANK0 0020                                      ??_LCD_Clear 0078  
                            __end_of__stringdata 002C                           LCD_Init@var_lcdMode_u8 007B  
                         __size_of_lcd_DataWrite 0036                                         ?_i2c_Ack 0070  
                                      __pnvBANK0 005F                           __end_of_lcd_SendNibble 033C  
                                      _lcd_Reset 048C                                ??_LCD_DisplayChar 0077  
                                      __pstrings 0003                           __size_of_lcd_BusyCheck 0054  
                         ??_LCD_DisplayHexNumber 0020                                         _I2C_Init 0229  
                                       _I2C_Read 02F5                                   LCD_Printf@argp 004D  
                                       _I2C_Stop 01E7                                         _DELAY_ms 0248  
                                       _DELAY_us 01FB                                         _LCD_Init 04DB  
                               _LCD_GoToNextLine 0271                                  ?_lcd_SendNibble 0070  
                                     ?_lcd_Reset 0070                                    _lcd_DataWrite 03C2  
                                       _RTC_Init 02D5                                      __stringbase 0008  
                                    __stringdata 0009                                      ??_i2c_NoAck 0070  
                                _i2c_WaitForIdle 0211                                        main@month 0058  
                             _lcd_SendCmdSignals 029D                                    ??_RTC_GetDate 0075  
                                  ??_RTC_GetTime 0075                                    _lcd_BusyCheck 052A  
                            ?_lcd_SendCmdSignals 0070                                    ??_RTC_SetDate 0073  
                               __size_of_i2c_Ack 0007                                    ??_RTC_SetTime 0073  
                                 ?_lcd_DataWrite 0070                               __end_of__stringtab 0009  
                           ??_lcd_SendCmdSignals 0072                                         __ptext10 02F5  
                                       __ptext11 0211                                         __ptext20 0271  
                                       __ptext12 01F4                                         __ptext21 04DB  
                                       __ptext13 01ED                                         __ptext30 01FB  
                                       __ptext22 048C                                         __ptext14 0697  
                                       __ptext23 0248                                         __ptext15 0237  
                                       __ptext24 0206                                         __ptext16 057E  
                                       __ptext25 025C                                         __ptext17 02B6  
                                       __ptext26 038C                                         __ptext18 03C2  
                                       __ptext27 0316                                         __ptext19 0287  
                                       __ptext28 029D                                         __ptext29 052A  
                                 ?_lcd_BusyCheck 0070                                    __size_of_main 0094  
                            __end_of_RTC_GetDate 0442                              __end_of_RTC_GetTime 048C  
                         I2C_Read@var_i2cData_u8 0072                          __end_of_i2c_WaitForIdle 021C  
                                    ??_lcd_Reset 0074                              __end_of_RTC_SetDate 0364  
                            __end_of_RTC_SetTime 038C                                       _LCD_Printf 0697  
                                       main@hour 0056                                         main@year 0059  
                         _VAR_LcdTrackLineNum_U8 0063                                  _LCD_DisplayChar 02B6  
                                      stringcode 0003                           RTC_SetTime@var_hour_u8 0073  
                                ??_lcd_DataWrite 0074                          I2C_Write@var_i2cData_u8 0070  
                       _LCD_DisplayHexNumber$211 002E                      __end_of_lcd_SendDataSignals 029D  
                       __end_of_LCD_GoToNextLine 0287                                         stringdir 0003  
                          RTC_SetTime@var_min_u8 0071                                         stringtab 0003  
                          RTC_SetTime@var_sec_u8 0072                                  ??_lcd_BusyCheck 0072  
                                    _RTC_GetDate 03F8                                      _RTC_GetTime 0442  
                         RTC_GetTime@ptr_hour_u8 0076                            RTC_GetTime@ptr_min_u8 0073  
                               ??_lcd_SendNibble 0070                                      _RTC_SetDate 033C  
                          RTC_GetTime@ptr_sec_u8 0074                                      _RTC_SetTime 0364  
