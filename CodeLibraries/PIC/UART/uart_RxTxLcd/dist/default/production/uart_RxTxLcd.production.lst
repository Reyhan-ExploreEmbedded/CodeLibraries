

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Feb 18 21:32:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000D                     	;# 
    45  000E                     	;# 
    46  000E                     	;# 
    47  000F                     	;# 
    48  0010                     	;# 
    49  0011                     	;# 
    50  0012                     	;# 
    51  0013                     	;# 
    52  0014                     	;# 
    53  0015                     	;# 
    54  0015                     	;# 
    55  0016                     	;# 
    56  0017                     	;# 
    57  0018                     	;# 
    58  0019                     	;# 
    59  001A                     	;# 
    60  001B                     	;# 
    61  001B                     	;# 
    62  001C                     	;# 
    63  001D                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  0086                     	;# 
    69  0087                     	;# 
    70  0088                     	;# 
    71  0089                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  0091                     	;# 
    76  0092                     	;# 
    77  0093                     	;# 
    78  0094                     	;# 
    79  0098                     	;# 
    80  0099                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85  010C                     	;# 
    86  010D                     	;# 
    87  010E                     	;# 
    88  010F                     	;# 
    89  018C                     	;# 
    90  018D                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0008                     	;# 
   100  0009                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000D                     	;# 
   105  000E                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0013                     	;# 
   112  0014                     	;# 
   113  0015                     	;# 
   114  0015                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001B                     	;# 
   121  001B                     	;# 
   122  001C                     	;# 
   123  001D                     	;# 
   124  001E                     	;# 
   125  001F                     	;# 
   126  0081                     	;# 
   127  0085                     	;# 
   128  0086                     	;# 
   129  0087                     	;# 
   130  0088                     	;# 
   131  0089                     	;# 
   132  008C                     	;# 
   133  008D                     	;# 
   134  008E                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  009F                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  018C                     	;# 
   150  018D                     	;# 
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  000E                     	;# 
   167  000F                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0086                     	;# 
   189  0087                     	;# 
   190  0088                     	;# 
   191  0089                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  010F                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211                           
   212                           	psect	idataBANK0
   213  0497                     __pidataBANK0:	
   214                           
   215                           ;initializer for _ARR_LcdLineNumAddress_U8
   216  0497  3480               	retlw	128
   217  0498  3480               	retlw	128
   218  0499  34C0               	retlw	192
   219  049A  3490               	retlw	144
   220  049B  34D0               	retlw	208
   221  0006                     _PORTB	set	6
   222  0008                     _PORTD	set	8
   223  001A                     _RCREG	set	26
   224  0018                     _RCSTA	set	24
   225  0019                     _TXREG	set	25
   226  0065                     _RCIF	set	101
   227  0064                     _TXIF	set	100
   228  0099                     _SPBRG	set	153
   229  0086                     _TRISB	set	134
   230  0087                     _TRISC	set	135
   231  0088                     _TRISD	set	136
   232  0098                     _TXSTA	set	152
   233                           
   234                           ; #config settings
   235  0000                     
   236                           	psect	cinit
   237  07DB                     start_initialization:	
   238  07DB                     __initialization:	
   239                           
   240                           ; Clear objects allocated to BANK0
   241  07DB  01B1               	clrf	__pbssBANK0& (0+127)
   242  07DC  01B2               	clrf	(__pbssBANK0+1)& (0+127)
   243  07DD  01B3               	clrf	(__pbssBANK0+2)& (0+127)
   244  07DE  01B4               	clrf	(__pbssBANK0+3)& (0+127)
   245  07DF  01B5               	clrf	(__pbssBANK0+4)& (0+127)
   246                           
   247                           ; Initialize objects allocated to BANK0
   248  07E0  120A  118A  2497  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   249  07E5  00B6               	movwf	__pdataBANK0& (0+127)
   250  07E6  120A  118A  2498  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   251  07EB  00B7               	movwf	(__pdataBANK0+1)& (0+127)
   252  07EC  120A  118A  2499  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   253  07F1  00B8               	movwf	(__pdataBANK0+2)& (0+127)
   254  07F2  120A  118A  249A  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   255  07F7  00B9               	movwf	(__pdataBANK0+3)& (0+127)
   256  07F8  120A  118A  249B   	fcall	__pidataBANK0+4	;fetch initializer
   257  07FB  00BA               	movwf	(__pdataBANK0+4)& (0+127)
   258  07FC                     end_of_initialization:	
   259                           ;End of C runtime variable initialization code
   260                           
   261  07FC                     __end_of__initialization:	
   262  07FC  0183               	clrf	3
   263  07FD  120A  118A  2DF7   	ljmp	_main	;jump to C main() function
   264                           
   265                           	psect	bssBANK0
   266  0031                     __pbssBANK0:	
   267  0031                     _STK_LCDConfig:	
   268  0031                     	ds	3
   269  0034                     _VAR_LcdTrackCursorPos_U8:	
   270  0034                     	ds	1
   271  0035                     _VAR_LcdTrackLineNum_U8:	
   272  0035                     	ds	1
   273                           
   274                           	psect	dataBANK0
   275  0036                     __pdataBANK0:	
   276  0036                     _ARR_LcdLineNumAddress_U8:	
   277  0036                     	ds	5
   278                           
   279                           	psect	cstackCOMMON
   280  0070                     __pcstackCOMMON:	
   281  0070                     ?_LCD_CmdWrite:	
   282  0070                     ?_lcd_Reset:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0070                     ?_LCD_Clear:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0070                     ?_LCD_GoToLine:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0070                     ?_lcd_BusyCheck:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0070                     ?_lcd_SendCmdSignals:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0070                     ?_lcd_SendNibble:	
   298                           ; 0 bytes @ 0x0
   299                           
   300  0070                     ??_lcd_SendNibble:	
   301                           ; 0 bytes @ 0x0
   302                           
   303  0070                     ?_lcd_DataWrite:	
   304                           ; 0 bytes @ 0x0
   305                           
   306  0070                     ?_lcd_SendDataSignals:	
   307                           ; 0 bytes @ 0x0
   308                           
   309  0070                     ??_UART_RxChar:	
   310                           ; 0 bytes @ 0x0
   311                           
   312  0070                     ?_UART_TxChar:	
   313                           ; 0 bytes @ 0x0
   314                           
   315  0070                     ??_UART_TxChar:	
   316                           ; 0 bytes @ 0x0
   317                           
   318  0070                     ?_DELAY_us:	
   319                           ; 0 bytes @ 0x0
   320                           
   321  0070                     ?_LCD_GoToNextLine:	
   322                           ; 0 bytes @ 0x0
   323                           
   324  0070                     ?_LCD_DisplayChar:	
   325                           ; 0 bytes @ 0x0
   326                           
   327  0070                     ?_main:	
   328                           ; 0 bytes @ 0x0
   329                           
   330  0070                     ?_UART_RxChar:	
   331                           ; 0 bytes @ 0x0
   332                           
   333  0070                     ?___lldiv:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     UART_TxChar@var_uartData_u8:	
   337                           ; 4 bytes @ 0x0
   338                           
   339  0070                     DELAY_us@us_count:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ___lldiv@divisor:	
   343                           ; 2 bytes @ 0x0
   344                           
   345                           
   346                           ; 4 bytes @ 0x0
   347  0070                     	ds	1
   348  0071                     lcd_SendNibble@var:	
   349                           
   350                           ; 1 bytes @ 0x1
   351  0071                     	ds	1
   352  0072                     ??_lcd_BusyCheck:	
   353  0072                     ??_lcd_SendCmdSignals:	
   354                           ; 0 bytes @ 0x2
   355                           
   356  0072                     ??_lcd_SendDataSignals:	
   357                           ; 0 bytes @ 0x2
   358                           
   359  0072                     ??_DELAY_us:	
   360                           ; 0 bytes @ 0x2
   361                           
   362  0072                     ?_DELAY_ms:	
   363                           ; 0 bytes @ 0x2
   364                           
   365  0072                     DELAY_ms@ms_count:	
   366                           ; 0 bytes @ 0x2
   367                           
   368                           
   369                           ; 2 bytes @ 0x2
   370  0072                     	ds	1
   371  0073                     lcd_BusyCheck@busyflag:	
   372                           
   373                           ; 1 bytes @ 0x3
   374  0073                     	ds	1
   375  0074                     ??_LCD_CmdWrite:	
   376  0074                     ??_lcd_Reset:	
   377                           ; 0 bytes @ 0x4
   378                           
   379  0074                     ??_lcd_DataWrite:	
   380                           ; 0 bytes @ 0x4
   381                           
   382  0074                     ??_DELAY_ms:	
   383                           ; 0 bytes @ 0x4
   384                           
   385  0074                     ___lldiv@dividend:	
   386                           ; 0 bytes @ 0x4
   387                           
   388                           
   389                           ; 4 bytes @ 0x4
   390  0074                     	ds	1
   391  0075                     LCD_CmdWrite@var_lcdCmd_u8:	
   392  0075                     lcd_DataWrite@dat:	
   393                           ; 1 bytes @ 0x5
   394                           
   395                           
   396                           ; 1 bytes @ 0x5
   397  0075                     	ds	1
   398  0076                     ??_LCD_GoToLine:	
   399  0076                     ??_LCD_GoToNextLine:	
   400                           ; 0 bytes @ 0x6
   401                           
   402                           
   403                           ; 0 bytes @ 0x6
   404  0076                     	ds	1
   405  0077                     ??_LCD_DisplayChar:	
   406  0077                     LCD_GoToLine@var_lineNumber_u8:	
   407                           ; 0 bytes @ 0x7
   408                           
   409                           
   410                           ; 1 bytes @ 0x7
   411  0077                     	ds	1
   412  0078                     ??_LCD_Clear:	
   413  0078                     ?_LCD_Init:	
   414                           ; 0 bytes @ 0x8
   415                           
   416  0078                     ??___lldiv:	
   417                           ; 0 bytes @ 0x8
   418                           
   419  0078                     LCD_Init@var_lcdNoOfLines_u8:	
   420                           ; 0 bytes @ 0x8
   421                           
   422  0078                     LCD_DisplayChar@var_lcdData_u8:	
   423                           ; 1 bytes @ 0x8
   424                           
   425                           
   426                           ; 1 bytes @ 0x8
   427  0078                     	ds	1
   428  0079                     LCD_Init@var_MaxCharsPerLine_u8:	
   429  0079                     ___lldiv@quotient:	
   430                           ; 1 bytes @ 0x9
   431                           
   432                           
   433                           ; 4 bytes @ 0x9
   434  0079                     	ds	1
   435  007A                     ??_LCD_Init:	
   436                           
   437                           ; 0 bytes @ 0xA
   438  007A                     	ds	1
   439  007B                     LCD_Init@var_lcdMode_u8:	
   440                           
   441                           ; 1 bytes @ 0xB
   442  007B                     	ds	2
   443  007D                     ___lldiv@counter:	
   444                           
   445                           ; 1 bytes @ 0xD
   446  007D                     	ds	1
   447  007E                     ??_UART_Init:	
   448                           
   449                           	psect	cstackBANK0
   450  0020                     __pcstackBANK0:	
   451                           ; 0 bytes @ 0xE
   452                           
   453  0020                     ?_UART_SetBaudRate:	
   454  0020                     UART_SetBaudRate@var_baudRate_u32:	
   455                           ; 0 bytes @ 0x0
   456                           
   457                           
   458                           ; 4 bytes @ 0x0
   459  0020                     	ds	4
   460  0024                     ??_UART_SetBaudRate:	
   461                           
   462                           ; 0 bytes @ 0x4
   463  0024                     	ds	5
   464  0029                     UART_SetBaudRate@RegValue:	
   465                           
   466                           ; 1 bytes @ 0x9
   467  0029                     	ds	1
   468  002A                     ?_UART_Init:	
   469  002A                     UART_Init@var_baudRate_u32:	
   470                           ; 0 bytes @ 0xA
   471                           
   472                           
   473                           ; 4 bytes @ 0xA
   474  002A                     	ds	4
   475  002E                     ??_main:	
   476                           
   477                           ; 0 bytes @ 0xE
   478  002E                     	ds	2
   479  0030                     main@ch:	
   480                           
   481                           ; 1 bytes @ 0x10
   482  0030                     	ds	1
   483                           
   484                           	psect	maintext
   485  05F7                     __pmaintext:	
   486 ;;
   487 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   488 ;;
   489 ;; *************** function _main *****************
   490 ;; Defined at:
   491 ;;		line 17 in file "rx_tx_lcd.c"
   492 ;; Parameters:    Size  Location     Type
   493 ;;		None
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  ch              1   16[BANK0 ] unsigned char 
   496 ;; Return value:  Size  Location     Type
   497 ;;		None               void
   498 ;; Registers used:
   499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 17F/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   505 ;;      Params:         0       0       0       0       0
   506 ;;      Locals:         0       1       0       0       0
   507 ;;      Temps:          0       2       0       0       0
   508 ;;      Totals:         0       3       0       0       0
   509 ;;Total ram usage:        3 bytes
   510 ;; Hardware stack levels required when called:    6
   511 ;; This function calls:
   512 ;;		_LCD_DisplayChar
   513 ;;		_LCD_Init
   514 ;;		_UART_Init
   515 ;;		_UART_RxChar
   516 ;;		_UART_TxChar
   517 ;; This function is called by:
   518 ;;		Startup code after reset
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           
   523                           ;psect for function _main
   524  05F7                     _main:	
   525                           
   526                           ;rx_tx_lcd.c: 19: char ch='m';
   527                           
   528                           ;incstack = 0
   529                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   530  05F7  306D               	movlw	109
   531  05F8  1283               	bcf	3,5	;RP0=0, select bank0
   532  05F9  1303               	bcf	3,6	;RP1=0, select bank0
   533  05FA  00AE               	movwf	??_main
   534  05FB  082E               	movf	??_main,w
   535  05FC  00B0               	movwf	main@ch
   536                           
   537                           ;rx_tx_lcd.c: 22: UART_Init(9600);
   538  05FD  3000               	movlw	0
   539  05FE  00AD               	movwf	UART_Init@var_baudRate_u32+3
   540  05FF  3000               	movlw	0
   541  0600  00AC               	movwf	UART_Init@var_baudRate_u32+2
   542  0601  3025               	movlw	37
   543  0602  00AB               	movwf	UART_Init@var_baudRate_u32+1
   544  0603  3080               	movlw	128
   545  0604  00AA               	movwf	UART_Init@var_baudRate_u32
   546  0605  120A  118A  2517  120A  118A  	fcall	_UART_Init
   547                           
   548                           ;rx_tx_lcd.c: 25: LCD_Init(8,2,16);
   549  060A  3002               	movlw	2
   550  060B  1283               	bcf	3,5	;RP0=0, select bank0
   551  060C  1303               	bcf	3,6	;RP1=0, select bank0
   552  060D  00AE               	movwf	??_main
   553  060E  082E               	movf	??_main,w
   554  060F  00F8               	movwf	LCD_Init@var_lcdNoOfLines_u8
   555  0610  3010               	movlw	16
   556  0611  00AF               	movwf	??_main+1
   557  0612  082F               	movf	??_main+1,w
   558  0613  00F9               	movwf	LCD_Init@var_MaxCharsPerLine_u8
   559  0614  3008               	movlw	8
   560  0615  120A  118A  2682  120A  118A  	fcall	_LCD_Init
   561  061A                     l1112:	
   562                           ;rx_tx_lcd.c: 27: while(1)
   563                           
   564                           
   565                           ;rx_tx_lcd.c: 28: {
   566                           ;rx_tx_lcd.c: 30: ch=UART_RxChar();
   567  061A  120A  118A  249C  120A  118A  	fcall	_UART_RxChar
   568  061F  1283               	bcf	3,5	;RP0=0, select bank0
   569  0620  1303               	bcf	3,6	;RP1=0, select bank0
   570  0621  00AE               	movwf	??_main
   571  0622  082E               	movf	??_main,w
   572  0623  00B0               	movwf	main@ch
   573                           
   574                           ;rx_tx_lcd.c: 32: UART_TxChar(ch);
   575  0624  0830               	movf	main@ch,w
   576  0625  120A  118A  24A3  120A  118A  	fcall	_UART_TxChar
   577                           
   578                           ;rx_tx_lcd.c: 34: LCD_DisplayChar(ch);
   579  062A  1283               	bcf	3,5	;RP0=0, select bank0
   580  062B  1303               	bcf	3,6	;RP1=0, select bank0
   581  062C  0830               	movf	main@ch,w
   582  062D  120A  118A  2546  120A  118A  	fcall	_LCD_DisplayChar
   583  0632  2E1A               	goto	l1112
   584  0633                     __end_of_main:	
   585                           
   586                           	psect	text1
   587  04A3                     __ptext1:	
   588 ;; *************** function _UART_TxChar *****************
   589 ;; Defined at:
   590 ;;		line 138 in file "uart.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;  var_uartData    1    wreg     unsigned char 
   593 ;; Auto vars:     Size  Location     Type
   594 ;;  var_uartData    1    0[COMMON] unsigned char 
   595 ;; Return value:  Size  Location     Type
   596 ;;		None               void
   597 ;; Registers used:
   598 ;;		wreg
   599 ;; Tracked objects:
   600 ;;		On entry : 0/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   604 ;;      Params:         0       0       0       0       0
   605 ;;      Locals:         1       0       0       0       0
   606 ;;      Temps:          0       0       0       0       0
   607 ;;      Totals:         1       0       0       0       0
   608 ;;Total ram usage:        1 bytes
   609 ;; Hardware stack levels used:    1
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           
   618                           ;psect for function _UART_TxChar
   619  04A3                     _UART_TxChar:	
   620                           
   621                           ;incstack = 0
   622                           ; Regs used in _UART_TxChar: [wreg]
   623                           ;UART_TxChar@var_uartData_u8 stored from wreg
   624  04A3  00F0               	movwf	UART_TxChar@var_uartData_u8
   625  04A4                     l186:	
   626                           ;uart.c: 140: while(TXIF==0);
   627                           
   628  04A4  1283               	bcf	3,5	;RP0=0, select bank0
   629  04A5  1303               	bcf	3,6	;RP1=0, select bank0
   630  04A6  1E0C               	btfss	12,4	;volatile
   631  04A7  2CA4               	goto	l186
   632                           
   633                           ;uart.c: 141: TXIF=0;
   634  04A8  120C               	bcf	12,4	;volatile
   635                           
   636                           ;uart.c: 142: TXREG=var_uartData_u8;
   637  04A9  0870               	movf	UART_TxChar@var_uartData_u8,w
   638  04AA  0099               	movwf	25	;volatile
   639  04AB  0008               	return
   640  04AC                     __end_of_UART_TxChar:	
   641                           
   642                           	psect	text2
   643  049C                     __ptext2:	
   644 ;; *************** function _UART_RxChar *****************
   645 ;; Defined at:
   646 ;;		line 116 in file "uart.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;		None
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      unsigned char 
   653 ;; Registers used:
   654 ;;		wreg
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   660 ;;      Params:         0       0       0       0       0
   661 ;;      Locals:         0       0       0       0       0
   662 ;;      Temps:          0       0       0       0       0
   663 ;;      Totals:         0       0       0       0       0
   664 ;;Total ram usage:        0 bytes
   665 ;; Hardware stack levels used:    1
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_main
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           
   674                           ;psect for function _UART_RxChar
   675  049C                     _UART_RxChar:	
   676  049C                     l180:	
   677                           ;uart.c: 118: while(RCIF==0);
   678                           
   679                           ;incstack = 0
   680                           ; Regs used in _UART_RxChar: [wreg]
   681                           
   682  049C  1283               	bcf	3,5	;RP0=0, select bank0
   683  049D  1303               	bcf	3,6	;RP1=0, select bank0
   684  049E  1E8C               	btfss	12,5	;volatile
   685  049F  2C9C               	goto	l180
   686                           
   687                           ;uart.c: 119: RCIF=0;
   688  04A0  128C               	bcf	12,5	;volatile
   689                           
   690                           ;uart.c: 120: return(RCREG);
   691  04A1  081A               	movf	26,w	;volatile
   692  04A2  0008               	return
   693  04A3                     __end_of_UART_RxChar:	
   694                           
   695                           	psect	text3
   696  0517                     __ptext3:	
   697 ;; *************** function _UART_Init *****************
   698 ;; Defined at:
   699 ;;		line 59 in file "uart.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;  var_baudRate    4   10[BANK0 ] unsigned long 
   702 ;; Auto vars:     Size  Location     Type
   703 ;;		None
   704 ;; Return value:  Size  Location     Type
   705 ;;		None               void
   706 ;; Registers used:
   707 ;;		wreg, status,2, status,0, pclath, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   713 ;;      Params:         0       4       0       0       0
   714 ;;      Locals:         0       0       0       0       0
   715 ;;      Temps:          0       0       0       0       0
   716 ;;      Totals:         0       4       0       0       0
   717 ;;Total ram usage:        4 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; Hardware stack levels required when called:    2
   720 ;; This function calls:
   721 ;;		_UART_SetBaudRate
   722 ;; This function is called by:
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           
   728                           ;psect for function _UART_Init
   729  0517                     _UART_Init:	
   730                           
   731                           ;uart.c: 61: TRISC=0x80;
   732                           
   733                           ;incstack = 0
   734                           ; Regs used in _UART_Init: [wreg+status,2+status,0+pclath+cstack]
   735  0517  3080               	movlw	128
   736  0518  1683               	bsf	3,5	;RP0=1, select bank1
   737  0519  1303               	bcf	3,6	;RP1=0, select bank1
   738  051A  0087               	movwf	7	;volatile
   739                           
   740                           ;uart.c: 62: TXSTA=0x20;
   741  051B  3020               	movlw	32
   742  051C  0098               	movwf	24	;volatile
   743                           
   744                           ;uart.c: 63: RCSTA=0x90;
   745  051D  3090               	movlw	144
   746  051E  1283               	bcf	3,5	;RP0=0, select bank0
   747  051F  1303               	bcf	3,6	;RP1=0, select bank0
   748  0520  0098               	movwf	24	;volatile
   749                           
   750                           ;uart.c: 64: UART_SetBaudRate(var_baudRate_u32);
   751  0521  082D               	movf	UART_Init@var_baudRate_u32+3,w
   752  0522  00A3               	movwf	UART_SetBaudRate@var_baudRate_u32+3
   753  0523  082C               	movf	UART_Init@var_baudRate_u32+2,w
   754  0524  00A2               	movwf	UART_SetBaudRate@var_baudRate_u32+2
   755  0525  082B               	movf	UART_Init@var_baudRate_u32+1,w
   756  0526  00A1               	movwf	UART_SetBaudRate@var_baudRate_u32+1
   757  0527  082A               	movf	UART_Init@var_baudRate_u32,w
   758  0528  00A0               	movwf	UART_SetBaudRate@var_baudRate_u32
   759  0529  120A  118A  2725   	fcall	_UART_SetBaudRate
   760  052C  0008               	return
   761  052D                     __end_of_UART_Init:	
   762                           
   763                           	psect	text4
   764  0725                     __ptext4:	
   765 ;; *************** function _UART_SetBaudRate *****************
   766 ;; Defined at:
   767 ;;		line 84 in file "uart.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  var_baudRate    4    0[BANK0 ] unsigned long 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  RegValue        1    9[BANK0 ] unsigned char 
   772 ;; Return value:  Size  Location     Type
   773 ;;		None               void
   774 ;; Registers used:
   775 ;;		wreg, status,2, status,0, pclath, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   781 ;;      Params:         0       4       0       0       0
   782 ;;      Locals:         0       1       0       0       0
   783 ;;      Temps:          0       5       0       0       0
   784 ;;      Totals:         0      10       0       0       0
   785 ;;Total ram usage:       10 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    1
   788 ;; This function calls:
   789 ;;		___lldiv
   790 ;; This function is called by:
   791 ;;		_UART_Init
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795                           
   796                           ;psect for function _UART_SetBaudRate
   797  0725                     _UART_SetBaudRate:	
   798                           
   799                           ;uart.c: 86: uint8_t RegValue;
   800                           ;uart.c: 88: if((var_baudRate_u32 >= 2400) && (var_baudRate_u32<=115200UL))
   801                           
   802                           ;incstack = 0
   803                           ; Regs used in _UART_SetBaudRate: [wreg+status,2+status,0+pclath+cstack]
   804  0725  3000               	movlw	0
   805  0726  1283               	bcf	3,5	;RP0=0, select bank0
   806  0727  1303               	bcf	3,6	;RP1=0, select bank0
   807  0728  0223               	subwf	UART_SetBaudRate@var_baudRate_u32+3,w
   808  0729  1D03               	skipz
   809  072A  2F35               	goto	u595
   810  072B  3000               	movlw	0
   811  072C  0222               	subwf	UART_SetBaudRate@var_baudRate_u32+2,w
   812  072D  1D03               	skipz
   813  072E  2F35               	goto	u595
   814  072F  3009               	movlw	9
   815  0730  0221               	subwf	UART_SetBaudRate@var_baudRate_u32+1,w
   816  0731  1D03               	skipz
   817  0732  2F35               	goto	u595
   818  0733  3060               	movlw	96
   819  0734  0220               	subwf	UART_SetBaudRate@var_baudRate_u32,w
   820  0735                     u595:	
   821  0735  1C03               	skipc
   822  0736  2F74               	goto	l1046
   823  0737  3000               	movlw	0
   824  0738  0223               	subwf	UART_SetBaudRate@var_baudRate_u32+3,w
   825  0739  1D03               	skipz
   826  073A  2F45               	goto	u605
   827  073B  3001               	movlw	1
   828  073C  0222               	subwf	UART_SetBaudRate@var_baudRate_u32+2,w
   829  073D  1D03               	skipz
   830  073E  2F45               	goto	u605
   831  073F  30C2               	movlw	194
   832  0740  0221               	subwf	UART_SetBaudRate@var_baudRate_u32+1,w
   833  0741  1D03               	skipz
   834  0742  2F45               	goto	u605
   835  0743  3001               	movlw	1
   836  0744  0220               	subwf	UART_SetBaudRate@var_baudRate_u32,w
   837  0745                     u605:	
   838  0745  1803               	skipnc
   839  0746  2F74               	goto	l1046
   840                           
   841                           ;uart.c: 89: {
   842                           ;uart.c: 92: RegValue = ((20000000UL / (64*var_baudRate_u32)) - 1);
   843  0747  0820               	movf	UART_SetBaudRate@var_baudRate_u32,w
   844  0748  00A4               	movwf	??_UART_SetBaudRate
   845  0749  0821               	movf	UART_SetBaudRate@var_baudRate_u32+1,w
   846  074A  00A5               	movwf	??_UART_SetBaudRate+1
   847  074B  0822               	movf	UART_SetBaudRate@var_baudRate_u32+2,w
   848  074C  00A6               	movwf	??_UART_SetBaudRate+2
   849  074D  0823               	movf	UART_SetBaudRate@var_baudRate_u32+3,w
   850  074E  00A7               	movwf	??_UART_SetBaudRate+3
   851  074F  3006               	movlw	6
   852  0750                     u615:	
   853  0750  1003               	clrc
   854  0751  0DA4               	rlf	??_UART_SetBaudRate,f
   855  0752  0DA5               	rlf	??_UART_SetBaudRate+1,f
   856  0753  0DA6               	rlf	??_UART_SetBaudRate+2,f
   857  0754  0DA7               	rlf	??_UART_SetBaudRate+3,f
   858  0755  3EFF               	addlw	-1
   859  0756  1D03               	skipz
   860  0757  2F50               	goto	u615
   861  0758  0827               	movf	??_UART_SetBaudRate+3,w
   862  0759  00F3               	movwf	___lldiv@divisor+3
   863  075A  0826               	movf	??_UART_SetBaudRate+2,w
   864  075B  00F2               	movwf	___lldiv@divisor+2
   865  075C  0825               	movf	??_UART_SetBaudRate+1,w
   866  075D  00F1               	movwf	___lldiv@divisor+1
   867  075E  0824               	movf	??_UART_SetBaudRate,w
   868  075F  00F0               	movwf	___lldiv@divisor
   869  0760  3001               	movlw	1
   870  0761  00F7               	movwf	___lldiv@dividend+3
   871  0762  3031               	movlw	49
   872  0763  00F6               	movwf	___lldiv@dividend+2
   873  0764  302D               	movlw	45
   874  0765  00F5               	movwf	___lldiv@dividend+1
   875  0766  3000               	movlw	0
   876  0767  00F4               	movwf	___lldiv@dividend
   877  0768  120A  118A  277D  120A  118A  	fcall	___lldiv
   878  076D  0870               	movf	?___lldiv,w
   879  076E  3EFF               	addlw	255
   880  076F  1283               	bcf	3,5	;RP0=0, select bank0
   881  0770  1303               	bcf	3,6	;RP1=0, select bank0
   882  0771  00A8               	movwf	??_UART_SetBaudRate+4
   883  0772  0828               	movf	??_UART_SetBaudRate+4,w
   884  0773  2F77               	goto	L1
   885  0774                     l1046:	
   886                           ;uart.c: 93: }
   887                           
   888                           
   889                           ;uart.c: 94: else
   890                           ;uart.c: 95: {
   891                           ;uart.c: 97: RegValue = ((20000000UL / (64*9600)) - 1);
   892  0774  302C               	movlw	44
   893  0775  00A4               	movwf	??_UART_SetBaudRate
   894  0776  0824               	movf	??_UART_SetBaudRate,w
   895  0777                     L1:	
   896  0777  00A9               	movwf	UART_SetBaudRate@RegValue
   897                           
   898                           ;uart.c: 98: }
   899                           ;uart.c: 100: SPBRG = RegValue;
   900  0778  0829               	movf	UART_SetBaudRate@RegValue,w
   901  0779  1683               	bsf	3,5	;RP0=1, select bank1
   902  077A  1303               	bcf	3,6	;RP1=0, select bank1
   903  077B  0099               	movwf	25	;volatile
   904  077C  0008               	return
   905  077D                     __end_of_UART_SetBaudRate:	
   906                           
   907                           	psect	text5
   908  077D                     __ptext5:	
   909 ;; *************** function ___lldiv *****************
   910 ;; Defined at:
   911 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;  divisor         4    0[COMMON] unsigned long 
   914 ;;  dividend        4    4[COMMON] unsigned long 
   915 ;; Auto vars:     Size  Location     Type
   916 ;;  quotient        4    9[COMMON] unsigned long 
   917 ;;  counter         1   13[COMMON] unsigned char 
   918 ;; Return value:  Size  Location     Type
   919 ;;                  4    0[COMMON] unsigned long 
   920 ;; Registers used:
   921 ;;		wreg, status,2, status,0
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   927 ;;      Params:         8       0       0       0       0
   928 ;;      Locals:         5       0       0       0       0
   929 ;;      Temps:          1       0       0       0       0
   930 ;;      Totals:        14       0       0       0       0
   931 ;;Total ram usage:       14 bytes
   932 ;; Hardware stack levels used:    1
   933 ;; This function calls:
   934 ;;		Nothing
   935 ;; This function is called by:
   936 ;;		_UART_SetBaudRate
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           
   941                           ;psect for function ___lldiv
   942  077D                     ___lldiv:	
   943                           
   944                           ;incstack = 0
   945                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
   946  077D  3000               	movlw	0
   947  077E  00FC               	movwf	___lldiv@quotient+3
   948  077F  3000               	movlw	0
   949  0780  00FB               	movwf	___lldiv@quotient+2
   950  0781  3000               	movlw	0
   951  0782  00FA               	movwf	___lldiv@quotient+1
   952  0783  3000               	movlw	0
   953  0784  00F9               	movwf	___lldiv@quotient
   954  0785  0873               	movf	___lldiv@divisor+3,w
   955  0786  0472               	iorwf	___lldiv@divisor+2,w
   956  0787  0471               	iorwf	___lldiv@divisor+1,w
   957  0788  0470               	iorwf	___lldiv@divisor,w
   958  0789  1903               	skipnz
   959  078A  2FD2               	goto	l1008
   960  078B  01FD               	clrf	___lldiv@counter
   961  078C  0AFD               	incf	___lldiv@counter,f
   962  078D                     l994:	
   963  078D  1BF3               	btfsc	___lldiv@divisor+3,7
   964  078E  2F9D               	goto	l996
   965  078F  3001               	movlw	1
   966  0790  00F8               	movwf	??___lldiv
   967  0791                     u495:	
   968  0791  1003               	clrc
   969  0792  0DF0               	rlf	___lldiv@divisor,f
   970  0793  0DF1               	rlf	___lldiv@divisor+1,f
   971  0794  0DF2               	rlf	___lldiv@divisor+2,f
   972  0795  0DF3               	rlf	___lldiv@divisor+3,f
   973  0796  0BF8               	decfsz	??___lldiv,f
   974  0797  2F91               	goto	u495
   975  0798  3001               	movlw	1
   976  0799  00F8               	movwf	??___lldiv
   977  079A  0878               	movf	??___lldiv,w
   978  079B  07FD               	addwf	___lldiv@counter,f
   979  079C  2F8D               	goto	l994
   980  079D                     l996:	
   981  079D  3001               	movlw	1
   982  079E  00F8               	movwf	??___lldiv
   983  079F                     u515:	
   984  079F  1003               	clrc
   985  07A0  0DF9               	rlf	___lldiv@quotient,f
   986  07A1  0DFA               	rlf	___lldiv@quotient+1,f
   987  07A2  0DFB               	rlf	___lldiv@quotient+2,f
   988  07A3  0DFC               	rlf	___lldiv@quotient+3,f
   989  07A4  0BF8               	decfsz	??___lldiv,f
   990  07A5  2F9F               	goto	u515
   991  07A6  0873               	movf	___lldiv@divisor+3,w
   992  07A7  0277               	subwf	___lldiv@dividend+3,w
   993  07A8  1D03               	skipz
   994  07A9  2FB4               	goto	u525
   995  07AA  0872               	movf	___lldiv@divisor+2,w
   996  07AB  0276               	subwf	___lldiv@dividend+2,w
   997  07AC  1D03               	skipz
   998  07AD  2FB4               	goto	u525
   999  07AE  0871               	movf	___lldiv@divisor+1,w
  1000  07AF  0275               	subwf	___lldiv@dividend+1,w
  1001  07B0  1D03               	skipz
  1002  07B1  2FB4               	goto	u525
  1003  07B2  0870               	movf	___lldiv@divisor,w
  1004  07B3  0274               	subwf	___lldiv@dividend,w
  1005  07B4                     u525:	
  1006  07B4  1C03               	skipc
  1007  07B5  2FC5               	goto	l1004
  1008  07B6  0870               	movf	___lldiv@divisor,w
  1009  07B7  02F4               	subwf	___lldiv@dividend,f
  1010  07B8  0871               	movf	___lldiv@divisor+1,w
  1011  07B9  1C03               	skipc
  1012  07BA  0F71               	incfsz	___lldiv@divisor+1,w
  1013  07BB  02F5               	subwf	___lldiv@dividend+1,f
  1014  07BC  0872               	movf	___lldiv@divisor+2,w
  1015  07BD  1C03               	skipc
  1016  07BE  0F72               	incfsz	___lldiv@divisor+2,w
  1017  07BF  02F6               	subwf	___lldiv@dividend+2,f
  1018  07C0  0873               	movf	___lldiv@divisor+3,w
  1019  07C1  1C03               	skipc
  1020  07C2  0F73               	incfsz	___lldiv@divisor+3,w
  1021  07C3  02F7               	subwf	___lldiv@dividend+3,f
  1022  07C4  1479               	bsf	___lldiv@quotient,0
  1023  07C5                     l1004:	
  1024  07C5  3001               	movlw	1
  1025  07C6                     u535:	
  1026  07C6  1003               	clrc
  1027  07C7  0CF3               	rrf	___lldiv@divisor+3,f
  1028  07C8  0CF2               	rrf	___lldiv@divisor+2,f
  1029  07C9  0CF1               	rrf	___lldiv@divisor+1,f
  1030  07CA  0CF0               	rrf	___lldiv@divisor,f
  1031  07CB  3EFF               	addlw	-1
  1032  07CC  1D03               	skipz
  1033  07CD  2FC6               	goto	u535
  1034  07CE  3001               	movlw	1
  1035  07CF  02FD               	subwf	___lldiv@counter,f
  1036  07D0  1D03               	btfss	3,2
  1037  07D1  2F9D               	goto	l996
  1038  07D2                     l1008:	
  1039  07D2  087C               	movf	___lldiv@quotient+3,w
  1040  07D3  00F3               	movwf	?___lldiv+3
  1041  07D4  087B               	movf	___lldiv@quotient+2,w
  1042  07D5  00F2               	movwf	?___lldiv+2
  1043  07D6  087A               	movf	___lldiv@quotient+1,w
  1044  07D7  00F1               	movwf	?___lldiv+1
  1045  07D8  0879               	movf	___lldiv@quotient,w
  1046  07D9  00F0               	movwf	?___lldiv
  1047  07DA  0008               	return
  1048  07DB                     __end_of___lldiv:	
  1049                           
  1050                           	psect	text6
  1051  0682                     __ptext6:	
  1052 ;; *************** function _LCD_Init *****************
  1053 ;; Defined at:
  1054 ;;		line 112 in file "lcd.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;  var_lcdMode_    1    wreg     unsigned char 
  1057 ;;  var_lcdNoOfL    1    8[COMMON] unsigned char 
  1058 ;;  var_MaxChars    1    9[COMMON] unsigned char 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  var_lcdMode_    1   11[COMMON] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;		None               void
  1063 ;; Registers used:
  1064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1070 ;;      Params:         2       0       0       0       0
  1071 ;;      Locals:         1       0       0       0       0
  1072 ;;      Temps:          1       0       0       0       0
  1073 ;;      Totals:         4       0       0       0       0
  1074 ;;Total ram usage:        4 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    5
  1077 ;; This function calls:
  1078 ;;		_DELAY_ms
  1079 ;;		_LCD_Clear
  1080 ;;		_LCD_CmdWrite
  1081 ;;		_lcd_Reset
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           
  1088                           ;psect for function _LCD_Init
  1089  0682                     _LCD_Init:	
  1090                           
  1091                           ;incstack = 0
  1092                           ; Regs used in _LCD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1093                           ;LCD_Init@var_lcdMode_u8 stored from wreg
  1094  0682  00FB               	movwf	LCD_Init@var_lcdMode_u8
  1095                           
  1096                           ;lcd.c: 116: TRISB = 0x00u;
  1097  0683  1683               	bsf	3,5	;RP0=1, select bank1
  1098  0684  1303               	bcf	3,6	;RP1=0, select bank1
  1099  0685  0186               	clrf	6	;volatile
  1100                           
  1101                           ;lcd.c: 117: TRISD = 0x00u;
  1102  0686  0188               	clrf	8	;volatile
  1103                           
  1104                           ;lcd.c: 118: STK_LCDConfig.mvar_LcdMode_U8 = var_lcdMode_u8;
  1105  0687  087B               	movf	LCD_Init@var_lcdMode_u8,w
  1106  0688  00FA               	movwf	??_LCD_Init
  1107  0689  087A               	movf	??_LCD_Init,w
  1108  068A  1283               	bcf	3,5	;RP0=0, select bank0
  1109  068B  1303               	bcf	3,6	;RP1=0, select bank0
  1110  068C  00B3               	movwf	_STK_LCDConfig+2
  1111                           
  1112                           ;lcd.c: 119: STK_LCDConfig.mvar_MaxSupportedChars_U8 = var_MaxCharsPerLine_u8;
  1113  068D  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  1114  068E  00FA               	movwf	??_LCD_Init
  1115  068F  087A               	movf	??_LCD_Init,w
  1116  0690  00B2               	movwf	_STK_LCDConfig+1
  1117                           
  1118                           ;lcd.c: 120: STK_LCDConfig.mvar_MaxSupportedLines_U8 = var_lcdNoOfLines_u8;
  1119  0691  0878               	movf	LCD_Init@var_lcdNoOfLines_u8,w
  1120  0692  00FA               	movwf	??_LCD_Init
  1121  0693  087A               	movf	??_LCD_Init,w
  1122  0694  00B1               	movwf	_STK_LCDConfig
  1123                           
  1124                           ;lcd.c: 121: if(var_lcdNoOfLines_u8 > mENUM_LcdLineTwo)
  1125  0695  3003               	movlw	3
  1126  0696  0278               	subwf	LCD_Init@var_lcdNoOfLines_u8,w
  1127  0697  1C03               	skipc
  1128  0698  2EA5               	goto	l1060
  1129                           
  1130                           ;lcd.c: 122: {
  1131                           ;lcd.c: 123: ARR_LcdLineNumAddress_U8[mENUM_LcdLineThree] = 0x90 + (var_MaxCharsPerLine_
      +                          u8 & 0x0fu);
  1132  0699  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  1133  069A  390F               	andlw	15
  1134  069B  3E90               	addlw	144
  1135  069C  00FA               	movwf	??_LCD_Init
  1136  069D  087A               	movf	??_LCD_Init,w
  1137  069E  00B9               	movwf	_ARR_LcdLineNumAddress_U8+3
  1138                           
  1139                           ;lcd.c: 124: ARR_LcdLineNumAddress_U8[mENUM_LcdLineFour] = 0xd0 + (var_MaxCharsPerLine_u
      +                          8 & 0x0fu);
  1140  069F  0879               	movf	LCD_Init@var_MaxCharsPerLine_u8,w
  1141  06A0  390F               	andlw	15
  1142  06A1  3ED0               	addlw	208
  1143  06A2  00FA               	movwf	??_LCD_Init
  1144  06A3  087A               	movf	??_LCD_Init,w
  1145  06A4  00BA               	movwf	_ARR_LcdLineNumAddress_U8+4
  1146  06A5                     l1060:	
  1147                           
  1148                           ;lcd.c: 125: }
  1149                           ;lcd.c: 127: DELAY_ms(100);
  1150  06A5  3064               	movlw	100
  1151  06A6  00F2               	movwf	DELAY_ms@ms_count
  1152  06A7  3000               	movlw	0
  1153  06A8  00F3               	movwf	DELAY_ms@ms_count+1
  1154  06A9  120A  118A  24C2  120A  118A  	fcall	_DELAY_ms
  1155                           
  1156                           ;lcd.c: 129: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  1157  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1158  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1159  06B0  0833               	movf	_STK_LCDConfig+2,w
  1160  06B1  3A08               	xorlw	8
  1161  06B2  1D03               	skipz
  1162  06B3  2EB6               	goto	l1066
  1163                           
  1164                           ;lcd.c: 130: {
  1165                           ;lcd.c: 131: LCD_CmdWrite(0x38u);
  1166  06B4  3038               	movlw	56
  1167  06B5  2EC2               	goto	L2
  1168  06B6                     l1066:	
  1169                           ;lcd.c: 132: }
  1170                           
  1171                           
  1172                           ;lcd.c: 133: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  1173  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  1174  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  1175  06B8  0833               	movf	_STK_LCDConfig+2,w
  1176  06B9  3A04               	xorlw	4
  1177  06BA  1D03               	skipz
  1178  06BB  2EC7               	goto	l61
  1179                           
  1180                           ;lcd.c: 134: {
  1181                           ;lcd.c: 135: lcd_Reset();
  1182  06BC  120A  118A  2633  120A  118A  	fcall	_lcd_Reset
  1183                           
  1184                           ;lcd.c: 136: LCD_CmdWrite(0x28u);
  1185  06C1  3028               	movlw	40
  1186  06C2                     L2:	
  1187  06C2  120A  118A  258B  120A  118A  	fcall	_LCD_CmdWrite
  1188  06C7                     l61:	
  1189                           
  1190                           ;lcd.c: 137: }
  1191                           ;lcd.c: 139: LCD_CmdWrite(0x0Eu);
  1192  06C7  300E               	movlw	14
  1193  06C8  120A  118A  258B  120A  118A  	fcall	_LCD_CmdWrite
  1194                           
  1195                           ;lcd.c: 140: LCD_Clear();
  1196  06CD  120A  118A  24B7   	fcall	_LCD_Clear
  1197  06D0  0008               	return
  1198  06D1                     __end_of_LCD_Init:	
  1199                           
  1200                           	psect	text7
  1201  0633                     __ptext7:	
  1202 ;; *************** function _lcd_Reset *****************
  1203 ;; Defined at:
  1204 ;;		line 923 in file "lcd.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;		None               void
  1211 ;; Registers used:
  1212 ;;		wreg, status,2, status,0, pclath, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1218 ;;      Params:         0       0       0       0       0
  1219 ;;      Locals:         0       0       0       0       0
  1220 ;;      Temps:          0       0       0       0       0
  1221 ;;      Totals:         0       0       0       0       0
  1222 ;;Total ram usage:        0 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    2
  1225 ;; This function calls:
  1226 ;;		_DELAY_ms
  1227 ;;		_DELAY_us
  1228 ;;		_lcd_SendCmdSignals
  1229 ;;		_lcd_SendNibble
  1230 ;; This function is called by:
  1231 ;;		_LCD_Init
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           
  1236                           ;psect for function _lcd_Reset
  1237  0633                     _lcd_Reset:	
  1238                           
  1239                           ;lcd.c: 926: lcd_SendNibble(0x30);
  1240                           
  1241                           ;incstack = 0
  1242                           ; Regs used in _lcd_Reset: [wreg+status,2+status,0+pclath+cstack]
  1243  0633  3030               	movlw	48
  1244  0634  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1245                           
  1246                           ;lcd.c: 927: lcd_SendCmdSignals();
  1247  0639  120A  118A  252D  120A  118A  	fcall	_lcd_SendCmdSignals
  1248                           
  1249                           ;lcd.c: 928: DELAY_ms(100);
  1250  063E  3064               	movlw	100
  1251  063F  00F2               	movwf	DELAY_ms@ms_count
  1252  0640  3000               	movlw	0
  1253  0641  00F3               	movwf	DELAY_ms@ms_count+1
  1254  0642  120A  118A  24C2  120A  118A  	fcall	_DELAY_ms
  1255                           
  1256                           ;lcd.c: 929: lcd_SendNibble(0x30);
  1257  0647  3030               	movlw	48
  1258  0648  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1259                           
  1260                           ;lcd.c: 930: lcd_SendCmdSignals();
  1261  064D  120A  118A  252D  120A  118A  	fcall	_lcd_SendCmdSignals
  1262                           
  1263                           ;lcd.c: 931: DELAY_us(200);
  1264  0652  30C8               	movlw	200
  1265  0653  00F0               	movwf	DELAY_us@us_count
  1266  0654  3000               	movlw	0
  1267  0655  00F1               	movwf	DELAY_us@us_count+1
  1268  0656  120A  118A  24AC  120A  118A  	fcall	_DELAY_us
  1269                           
  1270                           ;lcd.c: 932: lcd_SendNibble(0x30);
  1271  065B  3030               	movlw	48
  1272  065C  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1273                           
  1274                           ;lcd.c: 933: lcd_SendCmdSignals();
  1275  0661  120A  118A  252D  120A  118A  	fcall	_lcd_SendCmdSignals
  1276                           
  1277                           ;lcd.c: 934: DELAY_us(200);
  1278  0666  30C8               	movlw	200
  1279  0667  00F0               	movwf	DELAY_us@us_count
  1280  0668  3000               	movlw	0
  1281  0669  00F1               	movwf	DELAY_us@us_count+1
  1282  066A  120A  118A  24AC  120A  118A  	fcall	_DELAY_us
  1283                           
  1284                           ;lcd.c: 935: lcd_SendNibble(0x20);
  1285  066F  3020               	movlw	32
  1286  0670  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1287                           
  1288                           ;lcd.c: 936: lcd_SendCmdSignals();
  1289  0675  120A  118A  252D  120A  118A  	fcall	_lcd_SendCmdSignals
  1290                           
  1291                           ;lcd.c: 937: DELAY_us(200);
  1292  067A  30C8               	movlw	200
  1293  067B  00F0               	movwf	DELAY_us@us_count
  1294  067C  3000               	movlw	0
  1295  067D  00F1               	movwf	DELAY_us@us_count+1
  1296  067E  120A  118A  24AC   	fcall	_DELAY_us
  1297  0681  0008               	return
  1298  0682                     __end_of_lcd_Reset:	
  1299                           
  1300                           	psect	text8
  1301  04C2                     __ptext8:	
  1302 ;; *************** function _DELAY_ms *****************
  1303 ;; Defined at:
  1304 ;;		line 76 in file "delay.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  ms_count        2    2[COMMON] unsigned int 
  1307 ;; Auto vars:     Size  Location     Type
  1308 ;;		None
  1309 ;; Return value:  Size  Location     Type
  1310 ;;		None               void
  1311 ;; Registers used:
  1312 ;;		wreg, status,2, status,0, pclath, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1318 ;;      Params:         2       0       0       0       0
  1319 ;;      Locals:         0       0       0       0       0
  1320 ;;      Temps:          0       0       0       0       0
  1321 ;;      Totals:         2       0       0       0       0
  1322 ;;Total ram usage:        2 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    1
  1325 ;; This function calls:
  1326 ;;		_DELAY_us
  1327 ;; This function is called by:
  1328 ;;		_LCD_Init
  1329 ;;		_lcd_Reset
  1330 ;;		_DELAY_sec
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           
  1335                           ;psect for function _DELAY_ms
  1336  04C2                     _DELAY_ms:	
  1337  04C2                     l968:	
  1338                           ;delay.c: 78: while(ms_count!=0)
  1339                           
  1340                           ;incstack = 0
  1341                           ; Regs used in _DELAY_ms: [wreg+status,2+status,0+pclath+cstack]
  1342                           
  1343  04C2  0873               	movf	DELAY_ms@ms_count+1,w
  1344  04C3  0472               	iorwf	DELAY_ms@ms_count,w
  1345  04C4  1903               	btfsc	3,2
  1346  04C5  0008               	return
  1347                           
  1348                           ;delay.c: 79: {
  1349                           ;delay.c: 80: DELAY_us(300u);
  1350  04C6  302C               	movlw	44
  1351  04C7  00F0               	movwf	DELAY_us@us_count
  1352  04C8  3001               	movlw	1
  1353  04C9  00F1               	movwf	DELAY_us@us_count+1
  1354  04CA  120A  118A  24AC  120A  118A  	fcall	_DELAY_us
  1355                           
  1356                           ;delay.c: 81: ms_count--;
  1357  04CF  3001               	movlw	1
  1358  04D0  02F2               	subwf	DELAY_ms@ms_count,f
  1359  04D1  3000               	movlw	0
  1360  04D2  1C03               	skipc
  1361  04D3  03F3               	decf	DELAY_ms@ms_count+1,f
  1362  04D4  02F3               	subwf	DELAY_ms@ms_count+1,f
  1363  04D5  2CC2               	goto	l968
  1364  04D6                     __end_of_DELAY_ms:	
  1365                           
  1366                           	psect	text9
  1367  04B7                     __ptext9:	
  1368 ;; *************** function _LCD_Clear *****************
  1369 ;; Defined at:
  1370 ;;		line 154 in file "lcd.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;		None               void
  1377 ;; Registers used:
  1378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1384 ;;      Params:         0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    4
  1391 ;; This function calls:
  1392 ;;		_LCD_CmdWrite
  1393 ;;		_LCD_GoToLine
  1394 ;; This function is called by:
  1395 ;;		_LCD_Init
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           
  1400                           ;psect for function _LCD_Clear
  1401  04B7                     _LCD_Clear:	
  1402                           
  1403                           ;lcd.c: 156: LCD_CmdWrite(0x01u);
  1404                           
  1405                           ;incstack = 0
  1406                           ; Regs used in _LCD_Clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1407  04B7  3001               	movlw	1
  1408  04B8  120A  118A  258B  120A  118A  	fcall	_LCD_CmdWrite
  1409                           
  1410                           ;lcd.c: 157: LCD_GoToLine(mENUM_LcdLineOne);
  1411  04BD  3001               	movlw	1
  1412  04BE  120A  118A  24D6   	fcall	_LCD_GoToLine
  1413  04C1  0008               	return
  1414  04C2                     __end_of_LCD_Clear:	
  1415                           
  1416                           	psect	text10
  1417  04D6                     __ptext10:	
  1418 ;; *************** function _LCD_GoToLine *****************
  1419 ;; Defined at:
  1420 ;;		line 181 in file "lcd.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  var_lineNumb    1    wreg     unsigned char 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  var_lineNumb    1    7[COMMON] unsigned char 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;		None               void
  1427 ;; Registers used:
  1428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1434 ;;      Params:         0       0       0       0       0
  1435 ;;      Locals:         1       0       0       0       0
  1436 ;;      Temps:          1       0       0       0       0
  1437 ;;      Totals:         2       0       0       0       0
  1438 ;;Total ram usage:        2 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    3
  1441 ;; This function calls:
  1442 ;;		_LCD_CmdWrite
  1443 ;; This function is called by:
  1444 ;;		_LCD_Clear
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           
  1449                           ;psect for function _LCD_GoToLine
  1450  04D6                     _LCD_GoToLine:	
  1451                           
  1452                           ;incstack = 0
  1453                           ; Regs used in _LCD_GoToLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1454                           ;LCD_GoToLine@var_lineNumber_u8 stored from wreg
  1455  04D6  00F7               	movwf	LCD_GoToLine@var_lineNumber_u8
  1456                           
  1457                           ;lcd.c: 183: if(var_lineNumber_u8 <= STK_LCDConfig.mvar_MaxSupportedLines_U8)
  1458  04D7  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  1459  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  1460  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  1461  04DA  0231               	subwf	_STK_LCDConfig,w
  1462  04DB  1C03               	skipc
  1463  04DC  0008               	return
  1464                           
  1465                           ;lcd.c: 184: {
  1466                           ;lcd.c: 187: VAR_LcdTrackCursorPos_U8 = 0x00;
  1467  04DD  01B4               	clrf	_VAR_LcdTrackCursorPos_U8
  1468                           
  1469                           ;lcd.c: 188: VAR_LcdTrackLineNum_U8 = var_lineNumber_u8;
  1470  04DE  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  1471  04DF  00F6               	movwf	??_LCD_GoToLine
  1472  04E0  0876               	movf	??_LCD_GoToLine,w
  1473  04E1  00B5               	movwf	_VAR_LcdTrackLineNum_U8
  1474                           
  1475                           ;lcd.c: 189: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[var_lineNumber_u8]);
  1476  04E2  0877               	movf	LCD_GoToLine@var_lineNumber_u8,w
  1477  04E3  3E36               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
  1478  04E4  0084               	movwf	4
  1479  04E5  1383               	bcf	3,7	;select IRP bank0
  1480  04E6  0800               	movf	0,w
  1481  04E7  120A  118A  258B   	fcall	_LCD_CmdWrite
  1482  04EA  0008               	return
  1483  04EB                     __end_of_LCD_GoToLine:	
  1484                           
  1485                           	psect	text11
  1486  0546                     __ptext11:	
  1487 ;; *************** function _LCD_DisplayChar *****************
  1488 ;; Defined at:
  1489 ;;		line 309 in file "lcd.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  var_lcdData_    1    wreg     unsigned char 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  var_lcdData_    1    8[COMMON] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;		None               void
  1496 ;; Registers used:
  1497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1503 ;;      Params:         0       0       0       0       0
  1504 ;;      Locals:         1       0       0       0       0
  1505 ;;      Temps:          1       0       0       0       0
  1506 ;;      Totals:         2       0       0       0       0
  1507 ;;Total ram usage:        2 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    4
  1510 ;; This function calls:
  1511 ;;		_LCD_GoToNextLine
  1512 ;;		_lcd_DataWrite
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _LCD_DisplayChar
  1520  0546                     _LCD_DisplayChar:	
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in _LCD_DisplayChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1524                           ;LCD_DisplayChar@var_lcdData_u8 stored from wreg
  1525  0546  00F8               	movwf	LCD_DisplayChar@var_lcdData_u8
  1526                           
  1527                           ;lcd.c: 311: if((VAR_LcdTrackCursorPos_U8>=STK_LCDConfig.mvar_MaxSupportedChars_U8) || (
      +                          var_lcdData_u8=='\n'))
  1528  0547  1283               	bcf	3,5	;RP0=0, select bank0
  1529  0548  1303               	bcf	3,6	;RP1=0, select bank0
  1530  0549  0832               	movf	_STK_LCDConfig+1,w
  1531  054A  0234               	subwf	_VAR_LcdTrackCursorPos_U8,w
  1532  054B  1803               	skipnc
  1533  054C  2D51               	goto	l1076
  1534  054D  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1535  054E  3A0A               	xorlw	10
  1536  054F  1D03               	skipz
  1537  0550  2D56               	goto	l1078
  1538  0551                     l1076:	
  1539                           
  1540                           ;lcd.c: 312: {
  1541                           ;lcd.c: 315: LCD_GoToNextLine();
  1542  0551  120A  118A  24EB  120A  118A  	fcall	_LCD_GoToNextLine
  1543  0556                     l1078:	
  1544                           
  1545                           ;lcd.c: 316: }
  1546                           ;lcd.c: 317: if(var_lcdData_u8!='\n')
  1547  0556  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1548  0557  3A0A               	xorlw	10
  1549  0558  1903               	skipnz
  1550  0559  0008               	return
  1551                           
  1552                           ;lcd.c: 318: {
  1553                           ;lcd.c: 320: lcd_DataWrite(var_lcdData_u8);
  1554  055A  0878               	movf	LCD_DisplayChar@var_lcdData_u8,w
  1555  055B  120A  118A  25C1   	fcall	_lcd_DataWrite
  1556                           
  1557                           ;lcd.c: 321: VAR_LcdTrackCursorPos_U8++;
  1558  055E  3001               	movlw	1
  1559  055F  00F7               	movwf	??_LCD_DisplayChar
  1560  0560  0877               	movf	??_LCD_DisplayChar,w
  1561  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1563  0563  07B4               	addwf	_VAR_LcdTrackCursorPos_U8,f
  1564  0564  0008               	return
  1565  0565                     __end_of_LCD_DisplayChar:	
  1566                           
  1567                           	psect	text12
  1568  05C1                     __ptext12:	
  1569 ;; *************** function _lcd_DataWrite *****************
  1570 ;; Defined at:
  1571 ;;		line 839 in file "lcd.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;  dat             1    wreg     unsigned char 
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;  dat             1    5[COMMON] unsigned char 
  1576 ;; Return value:  Size  Location     Type
  1577 ;;		None               void
  1578 ;; Registers used:
  1579 ;;		wreg, status,2, status,0, pclath, cstack
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1585 ;;      Params:         0       0       0       0       0
  1586 ;;      Locals:         1       0       0       0       0
  1587 ;;      Temps:          1       0       0       0       0
  1588 ;;      Totals:         2       0       0       0       0
  1589 ;;Total ram usage:        2 bytes
  1590 ;; Hardware stack levels used:    1
  1591 ;; Hardware stack levels required when called:    2
  1592 ;; This function calls:
  1593 ;;		_lcd_BusyCheck
  1594 ;;		_lcd_SendDataSignals
  1595 ;;		_lcd_SendNibble
  1596 ;; This function is called by:
  1597 ;;		_LCD_DisplayChar
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _lcd_DataWrite
  1603  05C1                     _lcd_DataWrite:	
  1604                           
  1605                           ;incstack = 0
  1606                           ; Regs used in _lcd_DataWrite: [wreg+status,2+status,0+pclath+cstack]
  1607                           ;lcd_DataWrite@dat stored from wreg
  1608  05C1  00F5               	movwf	lcd_DataWrite@dat
  1609                           
  1610                           ;lcd.c: 841: lcd_BusyCheck();
  1611  05C2  120A  118A  26D1  120A  118A  	fcall	_lcd_BusyCheck
  1612                           
  1613                           ;lcd.c: 842: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  1614  05C7  1283               	bcf	3,5	;RP0=0, select bank0
  1615  05C8  1303               	bcf	3,6	;RP1=0, select bank0
  1616  05C9  0833               	movf	_STK_LCDConfig+2,w
  1617  05CA  3A08               	xorlw	8
  1618  05CB  1D03               	skipz
  1619  05CC  2DD3               	goto	l1036
  1620                           
  1621                           ;lcd.c: 843: {
  1622                           ;lcd.c: 844: PORTB = dat;
  1623  05CD  0875               	movf	lcd_DataWrite@dat,w
  1624  05CE  0086               	movwf	6	;volatile
  1625                           
  1626                           ;lcd.c: 845: lcd_SendDataSignals();
  1627  05CF  120A  118A  2501   	fcall	_lcd_SendDataSignals
  1628                           
  1629                           ;lcd.c: 846: }
  1630  05D2  0008               	return
  1631  05D3                     l1036:	
  1632                           
  1633                           ;lcd.c: 847: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  1634  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  1635  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  1636  05D5  0833               	movf	_STK_LCDConfig+2,w
  1637  05D6  3A04               	xorlw	4
  1638  05D7  1D03               	skipz
  1639  05D8  0008               	return
  1640                           
  1641                           ;lcd.c: 848: {
  1642                           ;lcd.c: 849: lcd_SendNibble(dat);
  1643  05D9  0875               	movf	lcd_DataWrite@dat,w
  1644  05DA  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1645                           
  1646                           ;lcd.c: 850: lcd_SendDataSignals();
  1647  05DF  120A  118A  2501  120A  118A  	fcall	_lcd_SendDataSignals
  1648                           
  1649                           ;lcd.c: 852: lcd_SendNibble(dat << 4);
  1650  05E4  0875               	movf	lcd_DataWrite@dat,w
  1651  05E5  00F4               	movwf	??_lcd_DataWrite
  1652  05E6  3003               	movlw	3
  1653  05E7                     u585:	
  1654  05E7  1003               	clrc
  1655  05E8  0DF4               	rlf	??_lcd_DataWrite,f
  1656  05E9  3EFF               	addlw	-1
  1657  05EA  1D03               	skipz
  1658  05EB  2DE7               	goto	u585
  1659  05EC  1003               	clrc
  1660  05ED  0D74               	rlf	??_lcd_DataWrite,w
  1661  05EE  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1662                           
  1663                           ;lcd.c: 853: lcd_SendDataSignals();
  1664  05F3  120A  118A  2501   	fcall	_lcd_SendDataSignals
  1665  05F6  0008               	return
  1666  05F7                     __end_of_lcd_DataWrite:	
  1667                           
  1668                           	psect	text13
  1669  0501                     __ptext13:	
  1670 ;; *************** function _lcd_SendDataSignals *****************
  1671 ;; Defined at:
  1672 ;;		line 994 in file "lcd.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;		None               void
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0, pclath, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1686 ;;      Params:         0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0
  1688 ;;      Temps:          1       0       0       0       0
  1689 ;;      Totals:         1       0       0       0       0
  1690 ;;Total ram usage:        1 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    1
  1693 ;; This function calls:
  1694 ;;		_DELAY_us
  1695 ;; This function is called by:
  1696 ;;		_lcd_DataWrite
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           
  1701                           ;psect for function _lcd_SendDataSignals
  1702  0501                     _lcd_SendDataSignals:	
  1703                           
  1704                           ;lcd.c: 996: (((PORTD)) |= (1<<((0))));
  1705                           
  1706                           ;incstack = 0
  1707                           ; Regs used in _lcd_SendDataSignals: [wreg+status,2+status,0+pclath+cstack]
  1708  0501  1283               	bcf	3,5	;RP0=0, select bank0
  1709  0502  1303               	bcf	3,6	;RP1=0, select bank0
  1710  0503  1408               	bsf	8,0	;volatile
  1711                           
  1712                           ;lcd.c: 998: (((PORTD)) &= ~(1<<((1))));
  1713  0504  30FD               	movlw	253
  1714  0505  00F2               	movwf	??_lcd_SendDataSignals
  1715  0506  0872               	movf	??_lcd_SendDataSignals,w
  1716  0507  0588               	andwf	8,f	;volatile
  1717                           
  1718                           ;lcd.c: 1000: (((PORTD)) |= (1<<((2))));
  1719  0508  1508               	bsf	8,2	;volatile
  1720                           
  1721                           ;lcd.c: 1001: DELAY_us(10);
  1722  0509  300A               	movlw	10
  1723  050A  00F0               	movwf	DELAY_us@us_count
  1724  050B  3000               	movlw	0
  1725  050C  00F1               	movwf	DELAY_us@us_count+1
  1726  050D  120A  118A  24AC   	fcall	_DELAY_us
  1727                           
  1728                           ;lcd.c: 1002: (((PORTD)) &= ~(1<<((2))));
  1729  0510  30FB               	movlw	251
  1730  0511  00F2               	movwf	??_lcd_SendDataSignals
  1731  0512  0872               	movf	??_lcd_SendDataSignals,w
  1732  0513  1283               	bcf	3,5	;RP0=0, select bank0
  1733  0514  1303               	bcf	3,6	;RP1=0, select bank0
  1734  0515  0588               	andwf	8,f	;volatile
  1735  0516  0008               	return
  1736  0517                     __end_of_lcd_SendDataSignals:	
  1737                           
  1738                           	psect	text14
  1739  04EB                     __ptext14:	
  1740 ;; *************** function _LCD_GoToNextLine *****************
  1741 ;; Defined at:
  1742 ;;		line 208 in file "lcd.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;		None
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;		None               void
  1749 ;; Registers used:
  1750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1756 ;;      Params:         0       0       0       0       0
  1757 ;;      Locals:         0       0       0       0       0
  1758 ;;      Temps:          1       0       0       0       0
  1759 ;;      Totals:         1       0       0       0       0
  1760 ;;Total ram usage:        1 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    3
  1763 ;; This function calls:
  1764 ;;		_LCD_CmdWrite
  1765 ;; This function is called by:
  1766 ;;		_LCD_DisplayChar
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function _LCD_GoToNextLine
  1772  04EB                     _LCD_GoToNextLine:	
  1773                           
  1774                           ;lcd.c: 212: VAR_LcdTrackLineNum_U8++;
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _LCD_GoToNextLine: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1778  04EB  3001               	movlw	1
  1779  04EC  00F6               	movwf	??_LCD_GoToNextLine
  1780  04ED  0876               	movf	??_LCD_GoToNextLine,w
  1781  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  1782  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  1783  04F0  07B5               	addwf	_VAR_LcdTrackLineNum_U8,f
  1784                           
  1785                           ;lcd.c: 213: VAR_LcdTrackCursorPos_U8 = 0x00;
  1786  04F1  01B4               	clrf	_VAR_LcdTrackCursorPos_U8
  1787                           
  1788                           ;lcd.c: 214: if(VAR_LcdTrackLineNum_U8 > STK_LCDConfig.mvar_MaxSupportedLines_U8)
  1789  04F2  0835               	movf	_VAR_LcdTrackLineNum_U8,w
  1790  04F3  0231               	subwf	_STK_LCDConfig,w
  1791  04F4  1803               	skipnc
  1792  04F5  2CF8               	goto	l1026
  1793                           
  1794                           ;lcd.c: 215: VAR_LcdTrackLineNum_U8 = 0x01;
  1795  04F6  01B5               	clrf	_VAR_LcdTrackLineNum_U8
  1796  04F7  0AB5               	incf	_VAR_LcdTrackLineNum_U8,f
  1797  04F8                     l1026:	
  1798                           
  1799                           ;lcd.c: 216: LCD_CmdWrite(ARR_LcdLineNumAddress_U8[VAR_LcdTrackLineNum_U8]);
  1800  04F8  0835               	movf	_VAR_LcdTrackLineNum_U8,w
  1801  04F9  3E36               	addlw	_ARR_LcdLineNumAddress_U8& (0+255)
  1802  04FA  0084               	movwf	4
  1803  04FB  1383               	bcf	3,7	;select IRP bank0
  1804  04FC  0800               	movf	0,w
  1805  04FD  120A  118A  258B   	fcall	_LCD_CmdWrite
  1806  0500  0008               	return
  1807  0501                     __end_of_LCD_GoToNextLine:	
  1808                           
  1809                           	psect	text15
  1810  058B                     __ptext15:	
  1811 ;; *************** function _LCD_CmdWrite *****************
  1812 ;; Defined at:
  1813 ;;		line 274 in file "lcd.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  var_lcdCmd_u    1    wreg     unsigned char 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  var_lcdCmd_u    1    5[COMMON] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;		None               void
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0, pclath, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1827 ;;      Params:         0       0       0       0       0
  1828 ;;      Locals:         1       0       0       0       0
  1829 ;;      Temps:          1       0       0       0       0
  1830 ;;      Totals:         2       0       0       0       0
  1831 ;;Total ram usage:        2 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    2
  1834 ;; This function calls:
  1835 ;;		_lcd_BusyCheck
  1836 ;;		_lcd_SendCmdSignals
  1837 ;;		_lcd_SendNibble
  1838 ;; This function is called by:
  1839 ;;		_LCD_Init
  1840 ;;		_LCD_Clear
  1841 ;;		_LCD_GoToLine
  1842 ;;		_LCD_GoToNextLine
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           
  1847                           ;psect for function _LCD_CmdWrite
  1848  058B                     _LCD_CmdWrite:	
  1849                           
  1850                           ;incstack = 0
  1851                           ; Regs used in _LCD_CmdWrite: [wreg+status,2+status,0+pclath+cstack]
  1852                           ;LCD_CmdWrite@var_lcdCmd_u8 stored from wreg
  1853  058B  00F5               	movwf	LCD_CmdWrite@var_lcdCmd_u8
  1854                           
  1855                           ;lcd.c: 276: lcd_BusyCheck();
  1856  058C  120A  118A  26D1  120A  118A  	fcall	_lcd_BusyCheck
  1857                           
  1858                           ;lcd.c: 277: if(STK_LCDConfig.mvar_LcdMode_U8 == 8u)
  1859  0591  1283               	bcf	3,5	;RP0=0, select bank0
  1860  0592  1303               	bcf	3,6	;RP1=0, select bank0
  1861  0593  0833               	movf	_STK_LCDConfig+2,w
  1862  0594  3A08               	xorlw	8
  1863  0595  1D03               	skipz
  1864  0596  2D9D               	goto	l958
  1865                           
  1866                           ;lcd.c: 278: {
  1867                           ;lcd.c: 280: PORTB = var_lcdCmd_u8;
  1868  0597  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  1869  0598  0086               	movwf	6	;volatile
  1870                           
  1871                           ;lcd.c: 281: lcd_SendCmdSignals();
  1872  0599  120A  118A  252D   	fcall	_lcd_SendCmdSignals
  1873                           
  1874                           ;lcd.c: 282: }
  1875  059C  0008               	return
  1876  059D                     l958:	
  1877                           
  1878                           ;lcd.c: 283: else if(STK_LCDConfig.mvar_LcdMode_U8 == 4u)
  1879  059D  1283               	bcf	3,5	;RP0=0, select bank0
  1880  059E  1303               	bcf	3,6	;RP1=0, select bank0
  1881  059F  0833               	movf	_STK_LCDConfig+2,w
  1882  05A0  3A04               	xorlw	4
  1883  05A1  1D03               	skipz
  1884  05A2  0008               	return
  1885                           
  1886                           ;lcd.c: 284: {
  1887                           ;lcd.c: 285: lcd_SendNibble(var_lcdCmd_u8);
  1888  05A3  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  1889  05A4  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1890                           
  1891                           ;lcd.c: 286: lcd_SendCmdSignals();
  1892  05A9  120A  118A  252D  120A  118A  	fcall	_lcd_SendCmdSignals
  1893                           
  1894                           ;lcd.c: 288: lcd_SendNibble(var_lcdCmd_u8 << 4);
  1895  05AE  0875               	movf	LCD_CmdWrite@var_lcdCmd_u8,w
  1896  05AF  00F4               	movwf	??_LCD_CmdWrite
  1897  05B0  3003               	movlw	3
  1898  05B1                     u455:	
  1899  05B1  1003               	clrc
  1900  05B2  0DF4               	rlf	??_LCD_CmdWrite,f
  1901  05B3  3EFF               	addlw	-1
  1902  05B4  1D03               	skipz
  1903  05B5  2DB1               	goto	u455
  1904  05B6  1003               	clrc
  1905  05B7  0D74               	rlf	??_LCD_CmdWrite,w
  1906  05B8  120A  118A  2565  120A  118A  	fcall	_lcd_SendNibble
  1907                           
  1908                           ;lcd.c: 289: lcd_SendCmdSignals();
  1909  05BD  120A  118A  252D   	fcall	_lcd_SendCmdSignals
  1910  05C0  0008               	return
  1911  05C1                     __end_of_LCD_CmdWrite:	
  1912                           
  1913                           	psect	text16
  1914  0565                     __ptext16:	
  1915 ;; *************** function _lcd_SendNibble *****************
  1916 ;; Defined at:
  1917 ;;		line 953 in file "lcd.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  var             1    wreg     unsigned char 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  var             1    1[COMMON] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;		None               void
  1924 ;; Registers used:
  1925 ;;		wreg, status,2, status,0
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1931 ;;      Params:         0       0       0       0       0
  1932 ;;      Locals:         1       0       0       0       0
  1933 ;;      Temps:          1       0       0       0       0
  1934 ;;      Totals:         2       0       0       0       0
  1935 ;;Total ram usage:        2 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; This function calls:
  1938 ;;		Nothing
  1939 ;; This function is called by:
  1940 ;;		_LCD_CmdWrite
  1941 ;;		_lcd_DataWrite
  1942 ;;		_lcd_Reset
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           
  1947                           ;psect for function _lcd_SendNibble
  1948  0565                     _lcd_SendNibble:	
  1949                           
  1950                           ;incstack = 0
  1951                           ; Regs used in _lcd_SendNibble: [wreg+status,2+status,0]
  1952                           ;lcd_SendNibble@var stored from wreg
  1953  0565  00F1               	movwf	lcd_SendNibble@var
  1954                           
  1955                           ;lcd.c: 955: (((((var)&((1<<(4))))!=0u))? ((PORTB) |= (1<<(4))): ((PORTB) &= ~(1<<(4))))
      +                          ;
  1956  0566  1E71               	btfss	lcd_SendNibble@var,4
  1957  0567  2D6C               	goto	l930
  1958  0568  1283               	bcf	3,5	;RP0=0, select bank0
  1959  0569  1303               	bcf	3,6	;RP1=0, select bank0
  1960  056A  1606               	bsf	6,4	;volatile
  1961  056B  2D72               	goto	l932
  1962  056C                     l930:	
  1963  056C  30EF               	movlw	239
  1964  056D  00F0               	movwf	??_lcd_SendNibble
  1965  056E  0870               	movf	??_lcd_SendNibble,w
  1966  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0571  0586               	andwf	6,f	;volatile
  1969  0572                     l932:	
  1970                           
  1971                           ;lcd.c: 956: (((((var)&((1<<(5))))!=0u))? ((PORTB) |= (1<<(5))): ((PORTB) &= ~(1<<(5))))
      +                          ;
  1972  0572  1EF1               	btfss	lcd_SendNibble@var,5
  1973  0573  2D76               	goto	l936
  1974  0574  1686               	bsf	6,5	;volatile
  1975  0575  2D7A               	goto	l938
  1976  0576                     l936:	
  1977  0576  30DF               	movlw	223
  1978  0577  00F0               	movwf	??_lcd_SendNibble
  1979  0578  0870               	movf	??_lcd_SendNibble,w
  1980  0579  0586               	andwf	6,f	;volatile
  1981  057A                     l938:	
  1982                           
  1983                           ;lcd.c: 957: (((((var)&((1<<(6))))!=0u))? ((PORTB) |= (1<<(6))): ((PORTB) &= ~(1<<(6))))
      +                          ;
  1984  057A  1F71               	btfss	lcd_SendNibble@var,6
  1985  057B  2D7E               	goto	l942
  1986  057C  1706               	bsf	6,6	;volatile
  1987  057D  2D82               	goto	l944
  1988  057E                     l942:	
  1989  057E  30BF               	movlw	191
  1990  057F  00F0               	movwf	??_lcd_SendNibble
  1991  0580  0870               	movf	??_lcd_SendNibble,w
  1992  0581  0586               	andwf	6,f	;volatile
  1993  0582                     l944:	
  1994                           
  1995                           ;lcd.c: 958: (((((var)&((1<<(7))))!=0u))? ((PORTB) |= (1<<(7))): ((PORTB) &= ~(1<<(7))))
      +                          ;
  1996  0582  1FF1               	btfss	lcd_SendNibble@var,7
  1997  0583  2D86               	goto	l948
  1998  0584  1786               	bsf	6,7	;volatile
  1999  0585  0008               	return
  2000  0586                     l948:	
  2001  0586  307F               	movlw	127
  2002  0587  00F0               	movwf	??_lcd_SendNibble
  2003  0588  0870               	movf	??_lcd_SendNibble,w
  2004  0589  0586               	andwf	6,f	;volatile
  2005  058A  0008               	return
  2006  058B                     __end_of_lcd_SendNibble:	
  2007                           
  2008                           	psect	text17
  2009  052D                     __ptext17:	
  2010 ;; *************** function _lcd_SendCmdSignals *****************
  2011 ;; Defined at:
  2012 ;;		line 972 in file "lcd.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;		None               void
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0
  2028 ;;      Temps:          1       0       0       0       0
  2029 ;;      Totals:         1       0       0       0       0
  2030 ;;Total ram usage:        1 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    1
  2033 ;; This function calls:
  2034 ;;		_DELAY_us
  2035 ;; This function is called by:
  2036 ;;		_LCD_CmdWrite
  2037 ;;		_lcd_Reset
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           
  2042                           ;psect for function _lcd_SendCmdSignals
  2043  052D                     _lcd_SendCmdSignals:	
  2044                           
  2045                           ;lcd.c: 974: (((PORTD)) &= ~(1<<((0))));
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in _lcd_SendCmdSignals: [wreg+status,2+status,0+pclath+cstack]
  2049  052D  30FE               	movlw	254
  2050  052E  00F2               	movwf	??_lcd_SendCmdSignals
  2051  052F  0872               	movf	??_lcd_SendCmdSignals,w
  2052  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2054  0532  0588               	andwf	8,f	;volatile
  2055                           
  2056                           ;lcd.c: 976: (((PORTD)) &= ~(1<<((1))));
  2057  0533  30FD               	movlw	253
  2058  0534  00F2               	movwf	??_lcd_SendCmdSignals
  2059  0535  0872               	movf	??_lcd_SendCmdSignals,w
  2060  0536  0588               	andwf	8,f	;volatile
  2061                           
  2062                           ;lcd.c: 978: (((PORTD)) |= (1<<((2))));
  2063  0537  1508               	bsf	8,2	;volatile
  2064                           
  2065                           ;lcd.c: 979: DELAY_us(10);
  2066  0538  300A               	movlw	10
  2067  0539  00F0               	movwf	DELAY_us@us_count
  2068  053A  3000               	movlw	0
  2069  053B  00F1               	movwf	DELAY_us@us_count+1
  2070  053C  120A  118A  24AC   	fcall	_DELAY_us
  2071                           
  2072                           ;lcd.c: 980: (((PORTD)) &= ~(1<<((2))));
  2073  053F  30FB               	movlw	251
  2074  0540  00F2               	movwf	??_lcd_SendCmdSignals
  2075  0541  0872               	movf	??_lcd_SendCmdSignals,w
  2076  0542  1283               	bcf	3,5	;RP0=0, select bank0
  2077  0543  1303               	bcf	3,6	;RP1=0, select bank0
  2078  0544  0588               	andwf	8,f	;volatile
  2079  0545  0008               	return
  2080  0546                     __end_of_lcd_SendCmdSignals:	
  2081                           
  2082                           	psect	text18
  2083  06D1                     __ptext18:	
  2084 ;; *************** function _lcd_BusyCheck *****************
  2085 ;; Defined at:
  2086 ;;		line 873 in file "lcd.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  busyflag        1    3[COMMON] unsigned char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;		None               void
  2093 ;; Registers used:
  2094 ;;		wreg, status,2, status,0, pclath, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2100 ;;      Params:         0       0       0       0       0
  2101 ;;      Locals:         1       0       0       0       0
  2102 ;;      Temps:          1       0       0       0       0
  2103 ;;      Totals:         2       0       0       0       0
  2104 ;;Total ram usage:        2 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    1
  2107 ;; This function calls:
  2108 ;;		_DELAY_us
  2109 ;; This function is called by:
  2110 ;;		_LCD_CmdWrite
  2111 ;;		_lcd_DataWrite
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _lcd_BusyCheck
  2117  06D1                     _lcd_BusyCheck:	
  2118                           
  2119                           ;incstack = 0
  2120                           ; Regs used in _lcd_BusyCheck: [wreg+status,2+status,0+pclath+cstack]
  2121  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  2122  06D2  1303               	bcf	3,6	;RP1=0, select bank1
  2123  06D3  1786               	bsf	6,7	;volatile
  2124                           
  2125                           ;lcd.c: 879: (((PORTD)) &= ~(1<<((0))));
  2126  06D4  30FE               	movlw	254
  2127  06D5  00F2               	movwf	??_lcd_BusyCheck
  2128  06D6  0872               	movf	??_lcd_BusyCheck,w
  2129  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  2130  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  2131  06D9  0588               	andwf	8,f	;volatile
  2132                           
  2133                           ;lcd.c: 880: (((PORTD)) |= (1<<((1))));
  2134  06DA  1488               	bsf	8,1	;volatile
  2135  06DB                     l100:	
  2136                           ;lcd.c: 881: do
  2137                           
  2138                           
  2139                           ;lcd.c: 882: {
  2140                           ;lcd.c: 884: (((PORTD)) &= ~(1<<((2))));
  2141  06DB  30FB               	movlw	251
  2142  06DC  00F2               	movwf	??_lcd_BusyCheck
  2143  06DD  0872               	movf	??_lcd_BusyCheck,w
  2144  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2145  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  2146  06E0  0588               	andwf	8,f	;volatile
  2147                           
  2148                           ;lcd.c: 885: DELAY_us(10);
  2149  06E1  300A               	movlw	10
  2150  06E2  00F0               	movwf	DELAY_us@us_count
  2151  06E3  3000               	movlw	0
  2152  06E4  00F1               	movwf	DELAY_us@us_count+1
  2153  06E5  120A  118A  24AC  120A  118A  	fcall	_DELAY_us
  2154                           
  2155                           ;lcd.c: 886: (((PORTD)) |= (1<<((2))));
  2156  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  2157  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  2158  06EC  1508               	bsf	8,2	;volatile
  2159                           
  2160                           ;lcd.c: 887: DELAY_us(10);
  2161  06ED  300A               	movlw	10
  2162  06EE  00F0               	movwf	DELAY_us@us_count
  2163  06EF  3000               	movlw	0
  2164  06F0  00F1               	movwf	DELAY_us@us_count+1
  2165  06F1  120A  118A  24AC  120A  118A  	fcall	_DELAY_us
  2166                           
  2167                           ;lcd.c: 888: busyflag = (((PORTB)&((1<<(7))))!=0u);
  2168  06F6  3000               	movlw	0
  2169  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  2170  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  2171  06F9  1B86               	btfsc	6,7	;volatile
  2172  06FA  3001               	movlw	1
  2173  06FB  00F2               	movwf	??_lcd_BusyCheck
  2174  06FC  0872               	movf	??_lcd_BusyCheck,w
  2175  06FD  00F3               	movwf	lcd_BusyCheck@busyflag
  2176                           
  2177                           ;lcd.c: 891: if(STK_LCDConfig.mvar_LcdMode_U8 == 4)
  2178  06FE  0833               	movf	_STK_LCDConfig+2,w
  2179  06FF  3A04               	xorlw	4
  2180  0700  1D03               	skipz
  2181  0701  2F1B               	goto	l912
  2182                           
  2183                           ;lcd.c: 892: {
  2184                           ;lcd.c: 894: (((PORTD)) &= ~(1<<((2))));
  2185  0702  30FB               	movlw	251
  2186  0703  00F2               	movwf	??_lcd_BusyCheck
  2187  0704  0872               	movf	??_lcd_BusyCheck,w
  2188  0705  0588               	andwf	8,f	;volatile
  2189                           
  2190                           ;lcd.c: 895: DELAY_us(10);
  2191  0706  300A               	movlw	10
  2192  0707  00F0               	movwf	DELAY_us@us_count
  2193  0708  3000               	movlw	0
  2194  0709  00F1               	movwf	DELAY_us@us_count+1
  2195  070A  120A  118A  24AC  120A  118A  	fcall	_DELAY_us
  2196                           
  2197                           ;lcd.c: 896: (((PORTD)) |= (1<<((2))));
  2198  070F  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0710  1303               	bcf	3,6	;RP1=0, select bank0
  2200  0711  1508               	bsf	8,2	;volatile
  2201                           
  2202                           ;lcd.c: 897: DELAY_us(10);
  2203  0712  300A               	movlw	10
  2204  0713  00F0               	movwf	DELAY_us@us_count
  2205  0714  3000               	movlw	0
  2206  0715  00F1               	movwf	DELAY_us@us_count+1
  2207  0716  120A  118A  24AC  120A  118A  	fcall	_DELAY_us
  2208  071B                     l912:	
  2209                           
  2210                           ;lcd.c: 898: }
  2211                           ;lcd.c: 899: }while(busyflag);
  2212  071B  08F3               	movf	lcd_BusyCheck@busyflag,f
  2213  071C  1D03               	skipz
  2214  071D  2EDB               	goto	l100
  2215                           
  2216                           ;lcd.c: 901: ((0x00u)? ((TRISB) |= (1<<(7))): ((TRISB) &= ~(1<<(7))));
  2217  071E  307F               	movlw	127
  2218  071F  00F2               	movwf	??_lcd_BusyCheck
  2219  0720  0872               	movf	??_lcd_BusyCheck,w
  2220  0721  1683               	bsf	3,5	;RP0=1, select bank1
  2221  0722  1303               	bcf	3,6	;RP1=0, select bank1
  2222  0723  0586               	andwf	6,f	;volatile
  2223  0724  0008               	return
  2224  0725                     __end_of_lcd_BusyCheck:	
  2225                           
  2226                           	psect	text19
  2227  04AC                     __ptext19:	
  2228 ;; *************** function _DELAY_us *****************
  2229 ;; Defined at:
  2230 ;;		line 55 in file "delay.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  us_count        2    0[COMMON] unsigned int 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;		None
  2235 ;; Return value:  Size  Location     Type
  2236 ;;		None               void
  2237 ;; Registers used:
  2238 ;;		wreg, status,2, status,0
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2244 ;;      Params:         2       0       0       0       0
  2245 ;;      Locals:         0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0
  2247 ;;      Totals:         2       0       0       0       0
  2248 ;;Total ram usage:        2 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_DELAY_ms
  2254 ;;		_lcd_BusyCheck
  2255 ;;		_lcd_Reset
  2256 ;;		_lcd_SendCmdSignals
  2257 ;;		_lcd_SendDataSignals
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function _DELAY_us
  2263  04AC                     _DELAY_us:	
  2264  04AC                     l886:	
  2265                           ;delay.c: 57: while(us_count!=0)
  2266                           
  2267                           ;incstack = 0
  2268                           ; Regs used in _DELAY_us: [wreg+status,2+status,0]
  2269                           
  2270  04AC  0871               	movf	DELAY_us@us_count+1,w
  2271  04AD  0470               	iorwf	DELAY_us@us_count,w
  2272  04AE  1903               	btfsc	3,2
  2273  04AF  0008               	return
  2274                           
  2275                           ;delay.c: 58: {
  2276                           ;delay.c: 59: us_count--;
  2277  04B0  3001               	movlw	1
  2278  04B1  02F0               	subwf	DELAY_us@us_count,f
  2279  04B2  3000               	movlw	0
  2280  04B3  1C03               	skipc
  2281  04B4  03F1               	decf	DELAY_us@us_count+1,f
  2282  04B5  02F1               	subwf	DELAY_us@us_count+1,f
  2283  04B6  2CAC               	goto	l886
  2284  04B7                     __end_of_DELAY_us:	
  2285  007E                     btemp	set	126	;btemp
  2286  007E                     wtemp	set	126
  2287  007E                     wtemp0	set	126
  2288  0080                     wtemp1	set	128
  2289  0082                     wtemp2	set	130
  2290  0084                     wtemp3	set	132
  2291  0086                     wtemp4	set	134
  2292  0088                     wtemp5	set	136
  2293  007F                     wtemp6	set	127
  2294  007E                     ttemp	set	126
  2295  007E                     ttemp0	set	126
  2296  0081                     ttemp1	set	129
  2297  0084                     ttemp2	set	132
  2298  0087                     ttemp3	set	135
  2299  007F                     ttemp4	set	127
  2300  007E                     ltemp	set	126
  2301  007E                     ltemp0	set	126
  2302  0082                     ltemp1	set	130
  2303  0086                     ltemp2	set	134
  2304  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     17      27
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _UART_SetBaudRate->___lldiv
    _lcd_Reset->_DELAY_ms
    _DELAY_ms->_DELAY_us
    _LCD_Clear->_LCD_GoToLine
    _LCD_GoToLine->_LCD_CmdWrite
    _LCD_DisplayChar->_LCD_GoToNextLine
    _lcd_DataWrite->_lcd_BusyCheck
    _lcd_SendDataSignals->_DELAY_us
    _LCD_GoToNextLine->_LCD_CmdWrite
    _LCD_CmdWrite->_lcd_BusyCheck
    _lcd_SendCmdSignals->_DELAY_us
    _lcd_BusyCheck->_DELAY_us

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->_UART_SetBaudRate

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10003
                                             14 BANK0      3     3      0
                    _LCD_DisplayChar
                           _LCD_Init
                          _UART_Init
                        _UART_RxChar
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (1) _UART_TxChar                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_RxChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4     486
                                             10 BANK0      4     0      4
                   _UART_SetBaudRate
 ---------------------------------------------------------------------------------
 (2) _UART_SetBaudRate                                    10     6      4     411
                                              0 BANK0     10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     268
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     2      2    6817
                                              8 COMMON     4     2      2
                           _DELAY_ms
                          _LCD_Clear
                       _LCD_CmdWrite
                          _lcd_Reset
 ---------------------------------------------------------------------------------
 (2) _lcd_Reset                                            0     0      0    1929
                           _DELAY_ms
                           _DELAY_us
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (3) _DELAY_ms                                             2     0      2     735
                                              2 COMMON     2     0      2
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _LCD_Clear                                            0     0      0    2632
                       _LCD_CmdWrite
                       _LCD_GoToLine
 ---------------------------------------------------------------------------------
 (3) _LCD_GoToLine                                         2     2      0    1349
                                              6 COMMON     2     2      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (1) _LCD_DisplayChar                                      2     2      0    2632
                                              7 COMMON     2     2      0
                   _LCD_GoToNextLine
                      _lcd_DataWrite
 ---------------------------------------------------------------------------------
 (2) _lcd_DataWrite                                        2     2      0    1283
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                _lcd_SendDataSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (3) _lcd_SendDataSignals                                  1     1      0     553
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (2) _LCD_GoToNextLine                                     1     1      0    1283
                                              6 COMMON     1     1      0
                       _LCD_CmdWrite
 ---------------------------------------------------------------------------------
 (2) _LCD_CmdWrite                                         2     2      0    1283
                                              4 COMMON     2     2      0
                      _lcd_BusyCheck
                 _lcd_SendCmdSignals
                     _lcd_SendNibble
 ---------------------------------------------------------------------------------
 (3) _lcd_SendNibble                                       2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_SendCmdSignals                                   1     1      0     553
                                              2 COMMON     1     1      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (3) _lcd_BusyCheck                                        2     2      0     576
                                              2 COMMON     2     2      0
                           _DELAY_us
 ---------------------------------------------------------------------------------
 (4) _DELAY_us                                             2     0      2     553
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_DisplayChar
     _LCD_GoToNextLine
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
         _lcd_SendNibble
     _lcd_DataWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendDataSignals
         _DELAY_us
       _lcd_SendNibble
   _LCD_Init
     _DELAY_ms
       _DELAY_us
     _LCD_Clear
       _LCD_CmdWrite
         _lcd_BusyCheck
           _DELAY_us
         _lcd_SendCmdSignals
           _DELAY_us
         _lcd_SendNibble
       _LCD_GoToLine
         _LCD_CmdWrite
           _lcd_BusyCheck
             _DELAY_us
           _lcd_SendCmdSignals
             _DELAY_us
           _lcd_SendNibble
     _LCD_CmdWrite
       _lcd_BusyCheck
         _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
     _lcd_Reset
       _DELAY_ms
         _DELAY_us
       _DELAY_us
       _lcd_SendCmdSignals
         _DELAY_us
       _lcd_SendNibble
   _UART_Init
     _UART_SetBaudRate
       ___lldiv
   _UART_RxChar
   _UART_TxChar

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     11      1B       5       33.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      29      12        0.0%
ABS                  0      0      29       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Feb 18 21:32:50 2015

UART_SetBaudRate@var_baudRate_u32 0020                       __CFG_CP$OFF 0000                     ?_LCD_CmdWrite 0070  
                              l61 06C7                     ?_LCD_GoToLine 0070                       __CFG_LVP$ON 0000  
                             l100 06DB                               l180 049C                               l186 04A4  
                             l912 071B                               l930 056C                               l932 0572  
                             l942 057E                               l944 0582                               l936 0576  
                             l938 057A                               l948 0586                               l886 04AC  
                             l958 059D                               l968 04C2                               l994 078D  
                             l996 079D                      __CFG_CPD$OFF 0000                               u515 079F  
                             u525 07B4                               u605 0745                               u455 05B1  
                             u535 07C6                               u615 0750                               u495 0791  
                             u585 05E7                               u595 0735                               fsr0 0004  
                             indf 0000                     _STK_LCDConfig 0031                      __CFG_FOSC$HS 0000  
         __end_of_LCD_DisplayChar 0565                              l1004 07C5                              l1008 07D2  
                            l1112 061A                              l1026 04F8                              l1036 05D3  
                            l1060 06A5                              l1046 0774                              l1066 06B6  
                            l1076 0551                              l1078 0556                              _RCIF 0065  
                            _TXIF 0064                      __CFG_WRT$OFF 0000                              _main 05F7  
              __size_of_LCD_Clear 000B                              btemp 007E                              ltemp 007E  
                            start 0000                              ttemp 007E                              wtemp 007E  
                __end_of_DELAY_ms 04D6                  __end_of_DELAY_us 04B7                    ??_LCD_CmdWrite 0074  
                  ??_LCD_GoToLine 0076                  __end_of_LCD_Init 06D1                  lcd_DataWrite@dat 0075  
                           ?_main 0070                     __CFG_WDTE$OFF 0000                   __end_of___lldiv 07DB  
                           _RCREG 001A                             _RCSTA 0018                             _SPBRG 0099  
                           _PORTB 0006                             _PORTD 0008                             _TRISB 0086  
                           _TRISC 0087                             _TRISD 0088                             _TXREG 0019  
                           _TXSTA 0098                __size_of_UART_Init 0016                    __CFG_BOREN$OFF 0000  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F                   __initialization 07DB  
                    __end_of_main 0633         LCD_CmdWrite@var_lcdCmd_u8 0075                            ??_main 002E  
     __size_of_lcd_SendCmdSignals 0019                 __end_of_LCD_Clear 04C2                  ?_LCD_DisplayChar 0070  
               lcd_SendNibble@var 0071                 ?_UART_SetBaudRate 0020             lcd_BusyCheck@busyflag 0073  
              ??_UART_SetBaudRate 0024                      ?_UART_RxChar 0070                    __CFG_PWRTE$OFF 0000  
                    ?_UART_TxChar 0070                 __end_of_UART_Init 052D                         ??___lldiv 0078  
                          main@ch 0030                  DELAY_ms@ms_count 0072                 ?_LCD_GoToNextLine 0070  
                       ?_DELAY_ms 0072                         ?_DELAY_us 0070                ??_LCD_GoToNextLine 0076  
            __end_of_LCD_CmdWrite 05C1              __end_of_LCD_GoToLine 04EB           __end_of__initialization 07FC  
                       ?_LCD_Init 0078                    __pcstackCOMMON 0070                      __pidataBANK0 0497  
           __end_of_lcd_DataWrite 05F7                __size_of_lcd_Reset 004F      __size_of_lcd_SendDataSignals 0016  
                      ??_DELAY_ms 0074                        ??_DELAY_us 0072     LCD_DisplayChar@var_lcdData_u8 0078  
                      __pbssBANK0 0031             __end_of_lcd_BusyCheck 0725                        ??_LCD_Init 007A  
                      __pmaintext 05F7                  DELAY_us@us_count 0070                 __end_of_lcd_Reset 0682  
            __size_of_UART_RxChar 0007              __size_of_UART_TxChar 0009                           ___lldiv 077D  
         __size_of_lcd_SendNibble 0026                           __ptext1 04A3                           __ptext2 049C  
                         __ptext3 0517                           __ptext4 0725                           __ptext5 077D  
                         __ptext6 0682                           __ptext7 0633                           __ptext8 04C2  
                         __ptext9 04B7             __size_of_LCD_CmdWrite 0036             __size_of_LCD_GoToLine 0015  
                       _LCD_Clear 04B7              end_of_initialization 07FC        UART_TxChar@var_uartData_u8 0070  
                 ___lldiv@divisor 0070                   ___lldiv@counter 007D        __end_of_lcd_SendCmdSignals 0546  
                    _LCD_CmdWrite 058B                         _UART_Init 0517         __size_of_UART_SetBaudRate 0058  
                    _LCD_GoToLine 04D6                        ?_LCD_Clear 0070     LCD_GoToLine@var_lineNumber_u8 0077  
               __size_of_DELAY_ms 0014                 __size_of_DELAY_us 000B          __size_of_LCD_DisplayChar 001F  
               __size_of_LCD_Init 004F         __size_of_LCD_GoToNextLine 0016               _lcd_SendDataSignals 0501  
                      ?_UART_Init 002A    LCD_Init@var_MaxCharsPerLine_u8 0079          _ARR_LcdLineNumAddress_U8 0036  
             start_initialization 07DB              ?_lcd_SendDataSignals 0070          _VAR_LcdTrackCursorPos_U8 0034  
                     __pdataBANK0 0036                    _lcd_SendNibble 0565       LCD_Init@var_lcdNoOfLines_u8 0078  
           ??_lcd_SendDataSignals 0072                         ___latbits 0002                     __pcstackBANK0 0020  
                     ??_LCD_Clear 0078            LCD_Init@var_lcdMode_u8 007B            __size_of_lcd_DataWrite 0036  
       UART_Init@var_baudRate_u32 002A            __end_of_lcd_SendNibble 058B                          ?___lldiv 0070  
                       _lcd_Reset 0633                 ??_LCD_DisplayChar 0077                       ??_UART_Init 007E  
                _UART_SetBaudRate 0725            __size_of_lcd_BusyCheck 0054                          _DELAY_ms 04C2  
                        _DELAY_us 04AC                          _LCD_Init 0682                     ??_UART_RxChar 0070  
                   ??_UART_TxChar 0070                  _LCD_GoToNextLine 04EB                   ?_lcd_SendNibble 0070  
                      ?_lcd_Reset 0070                     _lcd_DataWrite 05C1                _lcd_SendCmdSignals 052D  
                   _lcd_BusyCheck 06D1               ?_lcd_SendCmdSignals 0070                    ?_lcd_DataWrite 0070  
             __end_of_UART_RxChar 04A3               __end_of_UART_TxChar 04AC                  __size_of___lldiv 005E  
            ??_lcd_SendCmdSignals 0072                          __ptext10 04D6                          __ptext11 0546  
                        __ptext12 05C1                          __ptext13 0501                          __ptext14 04EB  
                        __ptext15 058B                          __ptext16 0565                          __ptext17 052D  
                        __ptext18 06D1                          __ptext19 04AC                    ?_lcd_BusyCheck 0070  
                   __size_of_main 003C                       ??_lcd_Reset 0074          UART_SetBaudRate@RegValue 0029  
          _VAR_LcdTrackLineNum_U8 0035          __end_of_UART_SetBaudRate 077D                  ___lldiv@dividend 0074  
                 _LCD_DisplayChar 0546                       _UART_RxChar 049C                       _UART_TxChar 04A3  
                 ??_lcd_DataWrite 0074       __end_of_lcd_SendDataSignals 0517                  ___lldiv@quotient 0079  
        __end_of_LCD_GoToNextLine 0501                   ??_lcd_BusyCheck 0072                  ??_lcd_SendNibble 0070  
