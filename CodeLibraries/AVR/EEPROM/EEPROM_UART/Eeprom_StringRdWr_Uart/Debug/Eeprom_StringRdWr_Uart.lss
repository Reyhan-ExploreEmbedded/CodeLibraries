
Eeprom_StringRdWr_Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000252  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000010a  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000498  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002e1  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000473  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000274  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000160  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 83 00 	call	0x106	; 0x106 <main>
  7a:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DELAY_sec>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	40 e9       	ldi	r20, 0x90	; 144
  84:	51 e0       	ldi	r21, 0x01	; 1
  86:	09 c0       	rjmp	.+18     	; 0x9a <DELAY_sec+0x18>
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  88:	20 e1       	ldi	r18, 0x10	; 16
  8a:	37 e2       	ldi	r19, 0x27	; 39
  8c:	fa 01       	movw	r30, r20
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <DELAY_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d1 f7       	brne	.-12     	; 0x8c <DELAY_sec+0xa>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
  98:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	a9 f7       	brne	.-22     	; 0x88 <DELAY_sec+0x6>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
		}
  }
  9e:	08 95       	ret

000000a0 <EEPROM_WriteByte>:
 * description: This function is used to write the data at specified EEPROM_address..

 **************************************************************************************************/
void EEPROM_WriteByte(uint16_t var_eepromAddress_u16, uint8_t var_eepromData_u8)
{
	while(util_IsBitSet(EECR,EEWE)); // Wait for completion of previous write.
  a0:	e1 99       	sbic	0x1c, 1	; 28
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <EEPROM_WriteByte>
	                                 // EEWE will be cleared by hardware once Eeprom write is completed.

	EEAR = var_eepromAddress_u16;  //Load the eeprom address and data
  a4:	9f bb       	out	0x1f, r25	; 31
  a6:	8e bb       	out	0x1e, r24	; 30
	EEDR = var_eepromData_u8;
  a8:	6d bb       	out	0x1d, r22	; 29

	util_BitSet(EECR,EEMWE);    // Eeprom Master Write Enable
  aa:	e2 9a       	sbi	0x1c, 2	; 28
	util_BitSet(EECR,EEWE);     // Start eeprom write by setting EEWE
  ac:	e1 9a       	sbi	0x1c, 1	; 28
}
  ae:	08 95       	ret

000000b0 <EEPROM_ReadByte>:

 * description: This function is used to read the data from specified EEPROM_address.        
 ***************************************************************************************************/
uint8_t EEPROM_ReadByte(uint16_t var_eepromAddress_u16)
{
	while(util_IsBitSet(EECR,EEWE));  //Wait for completion of previous write if any.
  b0:	e1 99       	sbic	0x1c, 1	; 28
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <EEPROM_ReadByte>

	EEAR = var_eepromAddress_u16;    //Load the address from where the data needs to be read.
  b4:	9f bb       	out	0x1f, r25	; 31
  b6:	8e bb       	out	0x1e, r24	; 30
	util_BitSet(EECR,EERE);   // start eeprom read by setting EERE
  b8:	e0 9a       	sbi	0x1c, 0	; 28

	return EEDR;             // Return data from data register
  ba:	8d b3       	in	r24, 0x1d	; 29
}
  bc:	08 95       	ret

000000be <EEPROM_WriteString>:

   NOTE: Null char is also written into the eeprom.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_WriteString == 1)
void EEPROM_WriteString(uint16_t var_eepromAddress_u16, char *ptr_stringPointer_u8)
{
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	8c 01       	movw	r16, r24
  c8:	eb 01       	movw	r28, r22

	do
	{
		EEPROM_WriteByte(var_eepromAddress_u16,*ptr_stringPointer_u8); //Write a byte from RAM to EEPROM
  ca:	c8 01       	movw	r24, r16
  cc:	68 81       	ld	r22, Y
  ce:	0e 94 50 00 	call	0xa0	; 0xa0 <EEPROM_WriteByte>
		ptr_stringPointer_u8++;								//Increment the RAM Address
		var_eepromAddress_u16++;								//Increment the Eeprom Address
  d2:	0f 5f       	subi	r16, 0xFF	; 255
  d4:	1f 4f       	sbci	r17, 0xFF	; 255
	}while(*(ptr_stringPointer_u8-1) !=0);
  d6:	89 91       	ld	r24, Y+
  d8:	88 23       	and	r24, r24
  da:	b9 f7       	brne	.-18     	; 0xca <EEPROM_WriteString+0xc>
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	08 95       	ret

000000e6 <EEPROM_ReadString>:
 * description:This function is used to Read a String from specified EEPROM_address.
           The string read from eeprom will be copied to specified buffer along with NULL character
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_ReadString == 1)
void EEPROM_ReadString(uint16_t var_eepromAddress_u16, char *ptr_destStringAddress_u8)
{
  e6:	9c 01       	movw	r18, r24
  e8:	fb 01       	movw	r30, r22

 * description: This function is used to read the data from specified EEPROM_address.        
 ***************************************************************************************************/
uint8_t EEPROM_ReadByte(uint16_t var_eepromAddress_u16)
{
	while(util_IsBitSet(EECR,EEWE));  //Wait for completion of previous write if any.
  ea:	e1 99       	sbic	0x1c, 1	; 28
  ec:	fe cf       	rjmp	.-4      	; 0xea <EEPROM_ReadString+0x4>

	EEAR = var_eepromAddress_u16;    //Load the address from where the data needs to be read.
  ee:	3f bb       	out	0x1f, r19	; 31
  f0:	2e bb       	out	0x1e, r18	; 30
	util_BitSet(EECR,EERE);   // start eeprom read by setting EERE
  f2:	e0 9a       	sbi	0x1c, 0	; 28

	return EEDR;             // Return data from data register
  f4:	8d b3       	in	r24, 0x1d	; 29
	char eeprom_data;

	do
	{
		eeprom_data = EEPROM_ReadByte(var_eepromAddress_u16); //Read a byte from EEPROM to RAM
		*ptr_destStringAddress_u8 = eeprom_data;			 //Copy the data into String Buffer
  f6:	80 83       	st	Z, r24
		ptr_destStringAddress_u8++;						 //Increment the RAM Address
		var_eepromAddress_u16++;							 //Increment the Eeprom Address
	}while(eeprom_data!=0);
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <EEPROM_ReadString+0x1e>

	do
	{
		eeprom_data = EEPROM_ReadByte(var_eepromAddress_u16); //Read a byte from EEPROM to RAM
		*ptr_destStringAddress_u8 = eeprom_data;			 //Copy the data into String Buffer
		ptr_destStringAddress_u8++;						 //Increment the RAM Address
  fc:	31 96       	adiw	r30, 0x01	; 1
		var_eepromAddress_u16++;							 //Increment the Eeprom Address
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	f3 cf       	rjmp	.-26     	; 0xea <EEPROM_ReadString+0x4>
 104:	08 95       	ret

00000106 <main>:
#include "eeprom.h" //User defined library which conatins eeprom routines


/* start the main program */
void main() 
{
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	df 93       	push	r29
 110:	cf 93       	push	r28
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	6b 97       	sbiw	r28, 0x1b	; 27
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
  unsigned int eeprom_address=0x00;
  unsigned char write_String[] = {"hello world"}, read_string[15];
 122:	de 01       	movw	r26, r28
 124:	11 96       	adiw	r26, 0x01	; 1
 126:	ec e6       	ldi	r30, 0x6C	; 108
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	81 50       	subi	r24, 0x01	; 1
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x26>

  /* Initilize the Uart before Transmiting/Reaceiving any data */
    UART_Init(9600);												  
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	75 e2       	ldi	r23, 0x25	; 37
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_Init>
 
   while(1)
    {
	   	   UART_TxString("\n\rWr:");                      //Print the message on UART
		   UART_TxString(write_String);			         //Print the String to be written 
 140:	7e 01       	movw	r14, r28
 142:	08 94       	sec
 144:	e1 1c       	adc	r14, r1
 146:	f1 1c       	adc	r15, r1
		   EEPROM_WriteString(eeprom_address,write_String); // Write the String at memory Location	0x00

		   
		   UART_TxString("  Rd:");                           //Print the message on UART
		   EEPROM_ReadString(eeprom_address,read_string);	// Read the String from memory Location 0x00
 148:	8e 01       	movw	r16, r28
 14a:	03 5f       	subi	r16, 0xF3	; 243
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
  /* Initilize the Uart before Transmiting/Reaceiving any data */
    UART_Init(9600);												  
 
   while(1)
    {
	   	   UART_TxString("\n\rWr:");                      //Print the message on UART
 14e:	80 e6       	ldi	r24, 0x60	; 96
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_TxString>
		   UART_TxString(write_String);			         //Print the String to be written 
 156:	c7 01       	movw	r24, r14
 158:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_TxString>
		   EEPROM_WriteString(eeprom_address,write_String); // Write the String at memory Location	0x00
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	b7 01       	movw	r22, r14
 162:	0e 94 5f 00 	call	0xbe	; 0xbe <EEPROM_WriteString>

		   
		   UART_TxString("  Rd:");                           //Print the message on UART
 166:	86 e6       	ldi	r24, 0x66	; 102
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_TxString>
		   EEPROM_ReadString(eeprom_address,read_string);	// Read the String from memory Location 0x00
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	b8 01       	movw	r22, r16
 174:	0e 94 73 00 	call	0xe6	; 0xe6 <EEPROM_ReadString>
		   UART_TxString(read_string);			            //Print the read String
 178:	c8 01       	movw	r24, r16
 17a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_TxString>
 17e:	e7 cf       	rjmp	.-50     	; 0x14e <main+0x48>

00000180 <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	80 56       	subi	r24, 0x60	; 96
 18a:	99 40       	sbci	r25, 0x09	; 9
 18c:	a0 40       	sbci	r26, 0x00	; 0
 18e:	b0 40       	sbci	r27, 0x00	; 0
 190:	81 5a       	subi	r24, 0xA1	; 161
 192:	98 4b       	sbci	r25, 0xB8	; 184
 194:	a1 40       	sbci	r26, 0x01	; 1
 196:	b0 40       	sbci	r27, 0x00	; 0
 198:	18 f0       	brcs	.+6      	; 0x1a0 <UART_SetBaudRate+0x20>
 19a:	27 e6       	ldi	r18, 0x67	; 103
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	18 c0       	rjmp	.+48     	; 0x1d0 <UART_SetBaudRate+0x50>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 1a0:	60 e8       	ldi	r22, 0x80	; 128
 1a2:	74 e8       	ldi	r23, 0x84	; 132
 1a4:	8e e1       	ldi	r24, 0x1E	; 30
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	62 1b       	sub	r22, r18
 1aa:	73 0b       	sbc	r23, r19
 1ac:	84 0b       	sbc	r24, r20
 1ae:	95 0b       	sbc	r25, r21
 1b0:	f3 e0       	ldi	r31, 0x03	; 3
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	88 1f       	adc	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	fa 95       	dec	r31
 1bc:	d1 f7       	brne	.-12     	; 0x1b2 <UART_SetBaudRate+0x32>
 1be:	e4 e0       	ldi	r30, 0x04	; 4
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	44 1f       	adc	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	ea 95       	dec	r30
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <UART_SetBaudRate+0x40>
 1cc:	0e 94 05 01 	call	0x20a	; 0x20a <__udivmodsi4>
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
	}

	UBRRL = util_ExtractByte0to8(RegValue);
 1d0:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
 1d2:	30 bd       	out	0x20, r19	; 32
}
 1d4:	08 95       	ret

000001d6 <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
 1d6:	28 e1       	ldi	r18, 0x18	; 24
 1d8:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
 1da:	26 e8       	ldi	r18, 0x86	; 134
 1dc:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
 1de:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(var_baudRate_u32);
 1e0:	0e 94 c0 00 	call	0x180	; 0x180 <UART_SetBaudRate>
}
 1e4:	08 95       	ret

000001e6 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
 1e6:	5f 9b       	sbis	0x0b, 7	; 11
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <UART_RxChar>
	return(UDR);                          // return the received char
 1ea:	8c b1       	in	r24, 0x0c	; 12
}
 1ec:	08 95       	ret

000001ee <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 1ee:	5d 9b       	sbis	0x0b, 5	; 11
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <UART_TxChar>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 1f2:	8c b9       	out	0x0c, r24	; 12
}
 1f4:	08 95       	ret

000001f6 <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 1f6:	fc 01       	movw	r30, r24
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <UART_TxString+0xc>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 1fa:	5d 9b       	sbis	0x0b, 5	; 11
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <UART_TxString+0x4>
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 1fe:	31 96       	adiw	r30, 0x01	; 1
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 200:	8c b9       	out	0x0c, r24	; 12
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	c9 f7       	brne	.-14     	; 0x1fa <UART_TxString+0x4>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 208:	08 95       	ret

0000020a <__udivmodsi4>:
 20a:	a1 e2       	ldi	r26, 0x21	; 33
 20c:	1a 2e       	mov	r1, r26
 20e:	aa 1b       	sub	r26, r26
 210:	bb 1b       	sub	r27, r27
 212:	fd 01       	movw	r30, r26
 214:	0d c0       	rjmp	.+26     	; 0x230 <__udivmodsi4_ep>

00000216 <__udivmodsi4_loop>:
 216:	aa 1f       	adc	r26, r26
 218:	bb 1f       	adc	r27, r27
 21a:	ee 1f       	adc	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	a2 17       	cp	r26, r18
 220:	b3 07       	cpc	r27, r19
 222:	e4 07       	cpc	r30, r20
 224:	f5 07       	cpc	r31, r21
 226:	20 f0       	brcs	.+8      	; 0x230 <__udivmodsi4_ep>
 228:	a2 1b       	sub	r26, r18
 22a:	b3 0b       	sbc	r27, r19
 22c:	e4 0b       	sbc	r30, r20
 22e:	f5 0b       	sbc	r31, r21

00000230 <__udivmodsi4_ep>:
 230:	66 1f       	adc	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	88 1f       	adc	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	1a 94       	dec	r1
 23a:	69 f7       	brne	.-38     	; 0x216 <__udivmodsi4_loop>
 23c:	60 95       	com	r22
 23e:	70 95       	com	r23
 240:	80 95       	com	r24
 242:	90 95       	com	r25
 244:	9b 01       	movw	r18, r22
 246:	ac 01       	movw	r20, r24
 248:	bd 01       	movw	r22, r26
 24a:	cf 01       	movw	r24, r30
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
