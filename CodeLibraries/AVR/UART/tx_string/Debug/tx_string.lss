
tx_string.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000082  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ee  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000132  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019d  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000007c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011a  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b8  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "uart.h"	//User defined UART library which contains the uart routines


/* start the main program */
void main() 
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	2e 97       	sbiw	r28, 0x0e	; 14
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
   	 char msg[]={"hello world, "};
  9a:	de 01       	movw	r26, r28
  9c:	11 96       	adiw	r26, 0x01	; 1
  9e:	ed e7       	ldi	r30, 0x7D	; 125
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8e e0       	ldi	r24, 0x0E	; 14
  a4:	01 90       	ld	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x22>

  /* Initialize the UART before Transmitting/Receiving any data */
    UART_Init(9600);
  ac:	60 e8       	ldi	r22, 0x80	; 128
  ae:	75 e2       	ldi	r23, 0x25	; 37
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 92 00 	call	0x124	; 0x124 <UART_Init>

   while(1)
    {
	    /*Transmit a string indefinitely at 9600 baud rate */
	     UART_TxString(msg); 
  b8:	8e 01       	movw	r16, r28
  ba:	0f 5f       	subi	r16, 0xFF	; 255
  bc:	1f 4f       	sbci	r17, 0xFF	; 255
  be:	c8 01       	movw	r24, r16
  c0:	0e 94 a2 00 	call	0x144	; 0x144 <UART_TxString>
         UART_TxString("welcome to Avr programming\n\r"); 
  c4:	80 e6       	ldi	r24, 0x60	; 96
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 a2 00 	call	0x144	; 0x144 <UART_TxString>
  cc:	f8 cf       	rjmp	.-16     	; 0xbe <main+0x3c>

000000ce <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
  ce:	9b 01       	movw	r18, r22
  d0:	ac 01       	movw	r20, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
  d2:	dc 01       	movw	r26, r24
  d4:	cb 01       	movw	r24, r22
  d6:	80 56       	subi	r24, 0x60	; 96
  d8:	99 40       	sbci	r25, 0x09	; 9
  da:	a0 40       	sbci	r26, 0x00	; 0
  dc:	b0 40       	sbci	r27, 0x00	; 0
  de:	81 5a       	subi	r24, 0xA1	; 161
  e0:	98 4b       	sbci	r25, 0xB8	; 184
  e2:	a1 40       	sbci	r26, 0x01	; 1
  e4:	b0 40       	sbci	r27, 0x00	; 0
  e6:	18 f0       	brcs	.+6      	; 0xee <UART_SetBaudRate+0x20>
  e8:	27 e6       	ldi	r18, 0x67	; 103
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	18 c0       	rjmp	.+48     	; 0x11e <UART_SetBaudRate+0x50>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
  ee:	60 e8       	ldi	r22, 0x80	; 128
  f0:	74 e8       	ldi	r23, 0x84	; 132
  f2:	8e e1       	ldi	r24, 0x1E	; 30
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	62 1b       	sub	r22, r18
  f8:	73 0b       	sbc	r23, r19
  fa:	84 0b       	sbc	r24, r20
  fc:	95 0b       	sbc	r25, r21
  fe:	f3 e0       	ldi	r31, 0x03	; 3
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	88 1f       	adc	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	fa 95       	dec	r31
 10a:	d1 f7       	brne	.-12     	; 0x100 <UART_SetBaudRate+0x32>
 10c:	e4 e0       	ldi	r30, 0x04	; 4
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	44 1f       	adc	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	ea 95       	dec	r30
 118:	d1 f7       	brne	.-12     	; 0x10e <UART_SetBaudRate+0x40>
 11a:	0e 94 ac 00 	call	0x158	; 0x158 <__udivmodsi4>
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
	}

	UBRRL = util_ExtractByte0to8(RegValue);
 11e:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
 120:	30 bd       	out	0x20, r19	; 32
}
 122:	08 95       	ret

00000124 <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
 124:	28 e1       	ldi	r18, 0x18	; 24
 126:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
 128:	26 e8       	ldi	r18, 0x86	; 134
 12a:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
 12c:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(var_baudRate_u32);
 12e:	0e 94 67 00 	call	0xce	; 0xce <UART_SetBaudRate>
}
 132:	08 95       	ret

00000134 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
 134:	5f 9b       	sbis	0x0b, 7	; 11
 136:	fe cf       	rjmp	.-4      	; 0x134 <UART_RxChar>
	return(UDR);                          // return the received char
 138:	8c b1       	in	r24, 0x0c	; 12
}
 13a:	08 95       	ret

0000013c <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 13c:	5d 9b       	sbis	0x0b, 5	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <UART_TxChar>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 140:	8c b9       	out	0x0c, r24	; 12
}
 142:	08 95       	ret

00000144 <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 144:	fc 01       	movw	r30, r24
 146:	04 c0       	rjmp	.+8      	; 0x150 <UART_TxString+0xc>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 148:	5d 9b       	sbis	0x0b, 5	; 11
 14a:	fe cf       	rjmp	.-4      	; 0x148 <UART_TxString+0x4>
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 14c:	31 96       	adiw	r30, 0x01	; 1
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 14e:	8c b9       	out	0x0c, r24	; 12
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	c9 f7       	brne	.-14     	; 0x148 <UART_TxString+0x4>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 156:	08 95       	ret

00000158 <__udivmodsi4>:
 158:	a1 e2       	ldi	r26, 0x21	; 33
 15a:	1a 2e       	mov	r1, r26
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	fd 01       	movw	r30, r26
 162:	0d c0       	rjmp	.+26     	; 0x17e <__udivmodsi4_ep>

00000164 <__udivmodsi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	ee 1f       	adc	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	a2 17       	cp	r26, r18
 16e:	b3 07       	cpc	r27, r19
 170:	e4 07       	cpc	r30, r20
 172:	f5 07       	cpc	r31, r21
 174:	20 f0       	brcs	.+8      	; 0x17e <__udivmodsi4_ep>
 176:	a2 1b       	sub	r26, r18
 178:	b3 0b       	sbc	r27, r19
 17a:	e4 0b       	sbc	r30, r20
 17c:	f5 0b       	sbc	r31, r21

0000017e <__udivmodsi4_ep>:
 17e:	66 1f       	adc	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	88 1f       	adc	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	1a 94       	dec	r1
 188:	69 f7       	brne	.-38     	; 0x164 <__udivmodsi4_loop>
 18a:	60 95       	com	r22
 18c:	70 95       	com	r23
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	bd 01       	movw	r22, r26
 198:	cf 01       	movw	r24, r30
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
