
rx_tx_char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000082  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d7  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000115  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000196  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011c  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b8  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void main() 
{
   	 char ch;

  /* Initilize the UART before Transmitting/Receiving any data */
    UART_Init(9600);
  6c:	60 e8       	ldi	r22, 0x80	; 128
  6e:	75 e2       	ldi	r23, 0x25	; 37
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_Init>

   while(1)
    {
	    /*Receive and Transmit a char indefinitely at 9600 baud rate */
	     ch=UART_RxChar(); // Receive a char and store it in "ch"
  78:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_RxChar>
        
         UART_TxChar(ch);  //Transmit the received char
  7c:	0e 94 78 00 	call	0xf0	; 0xf0 <UART_TxChar>
  80:	fb cf       	rjmp	.-10     	; 0x78 <main+0xc>

00000082 <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
  82:	9b 01       	movw	r18, r22
  84:	ac 01       	movw	r20, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
  86:	dc 01       	movw	r26, r24
  88:	cb 01       	movw	r24, r22
  8a:	80 56       	subi	r24, 0x60	; 96
  8c:	99 40       	sbci	r25, 0x09	; 9
  8e:	a0 40       	sbci	r26, 0x00	; 0
  90:	b0 40       	sbci	r27, 0x00	; 0
  92:	81 5a       	subi	r24, 0xA1	; 161
  94:	98 4b       	sbci	r25, 0xB8	; 184
  96:	a1 40       	sbci	r26, 0x01	; 1
  98:	b0 40       	sbci	r27, 0x00	; 0
  9a:	18 f0       	brcs	.+6      	; 0xa2 <UART_SetBaudRate+0x20>
  9c:	27 e6       	ldi	r18, 0x67	; 103
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	18 c0       	rjmp	.+48     	; 0xd2 <UART_SetBaudRate+0x50>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
  a2:	60 e8       	ldi	r22, 0x80	; 128
  a4:	74 e8       	ldi	r23, 0x84	; 132
  a6:	8e e1       	ldi	r24, 0x1E	; 30
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	62 1b       	sub	r22, r18
  ac:	73 0b       	sbc	r23, r19
  ae:	84 0b       	sbc	r24, r20
  b0:	95 0b       	sbc	r25, r21
  b2:	f3 e0       	ldi	r31, 0x03	; 3
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	88 1f       	adc	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	fa 95       	dec	r31
  be:	d1 f7       	brne	.-12     	; 0xb4 <UART_SetBaudRate+0x32>
  c0:	e4 e0       	ldi	r30, 0x04	; 4
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	44 1f       	adc	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	ea 95       	dec	r30
  cc:	d1 f7       	brne	.-12     	; 0xc2 <UART_SetBaudRate+0x40>
  ce:	0e 94 86 00 	call	0x10c	; 0x10c <__udivmodsi4>
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
	}

	UBRRL = util_ExtractByte0to8(RegValue);
  d2:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
  d4:	30 bd       	out	0x20, r19	; 32
}
  d6:	08 95       	ret

000000d8 <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
  d8:	28 e1       	ldi	r18, 0x18	; 24
  da:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
  dc:	26 e8       	ldi	r18, 0x86	; 134
  de:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
  e0:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(var_baudRate_u32);
  e2:	0e 94 41 00 	call	0x82	; 0x82 <UART_SetBaudRate>
}
  e6:	08 95       	ret

000000e8 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
  e8:	5f 9b       	sbis	0x0b, 7	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <UART_RxChar>
	return(UDR);                          // return the received char
  ec:	8c b1       	in	r24, 0x0c	; 12
}
  ee:	08 95       	ret

000000f0 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
  f0:	5d 9b       	sbis	0x0b, 5	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <UART_TxChar>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
  f4:	8c b9       	out	0x0c, r24	; 12
}
  f6:	08 95       	ret

000000f8 <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
  f8:	fc 01       	movw	r30, r24
  fa:	04 c0       	rjmp	.+8      	; 0x104 <UART_TxString+0xc>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
  fc:	5d 9b       	sbis	0x0b, 5	; 11
  fe:	fe cf       	rjmp	.-4      	; 0xfc <UART_TxString+0x4>
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 100:	31 96       	adiw	r30, 0x01	; 1
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 102:	8c b9       	out	0x0c, r24	; 12
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 104:	80 81       	ld	r24, Z
 106:	88 23       	and	r24, r24
 108:	c9 f7       	brne	.-14     	; 0xfc <UART_TxString+0x4>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 10a:	08 95       	ret

0000010c <__udivmodsi4>:
 10c:	a1 e2       	ldi	r26, 0x21	; 33
 10e:	1a 2e       	mov	r1, r26
 110:	aa 1b       	sub	r26, r26
 112:	bb 1b       	sub	r27, r27
 114:	fd 01       	movw	r30, r26
 116:	0d c0       	rjmp	.+26     	; 0x132 <__udivmodsi4_ep>

00000118 <__udivmodsi4_loop>:
 118:	aa 1f       	adc	r26, r26
 11a:	bb 1f       	adc	r27, r27
 11c:	ee 1f       	adc	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	a2 17       	cp	r26, r18
 122:	b3 07       	cpc	r27, r19
 124:	e4 07       	cpc	r30, r20
 126:	f5 07       	cpc	r31, r21
 128:	20 f0       	brcs	.+8      	; 0x132 <__udivmodsi4_ep>
 12a:	a2 1b       	sub	r26, r18
 12c:	b3 0b       	sbc	r27, r19
 12e:	e4 0b       	sbc	r30, r20
 130:	f5 0b       	sbc	r31, r21

00000132 <__udivmodsi4_ep>:
 132:	66 1f       	adc	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	88 1f       	adc	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	1a 94       	dec	r1
 13c:	69 f7       	brne	.-38     	; 0x118 <__udivmodsi4_loop>
 13e:	60 95       	com	r22
 140:	70 95       	com	r23
 142:	80 95       	com	r24
 144:	90 95       	com	r25
 146:	9b 01       	movw	r18, r22
 148:	ac 01       	movw	r20, r24
 14a:	bd 01       	movw	r22, r26
 14c:	cf 01       	movw	r24, r30
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
