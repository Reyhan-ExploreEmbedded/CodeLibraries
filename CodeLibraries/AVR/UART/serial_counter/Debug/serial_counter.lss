
serial_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000474  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b9  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004a1  00000000  00000000  00000621  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002bc  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000055f  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000242  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000289  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  0000185b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  7a:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DELAY_sec>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	40 e9       	ldi	r20, 0x90	; 144
  84:	51 e0       	ldi	r21, 0x01	; 1
  86:	09 c0       	rjmp	.+18     	; 0x9a <DELAY_sec+0x18>
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  88:	20 e1       	ldi	r18, 0x10	; 16
  8a:	37 e2       	ldi	r19, 0x27	; 39
  8c:	fa 01       	movw	r30, r20
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <DELAY_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d1 f7       	brne	.-12     	; 0x8c <DELAY_sec+0xa>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
  98:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	a9 f7       	brne	.-22     	; 0x88 <DELAY_sec+0x6>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
		}
  }
  9e:	08 95       	ret

000000a0 <main>:
#include "delay.h" //library which contains the delay routines


/* start the main program */
void main()
{
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
	uint16_t cnt=0;

	/* Initialize the UART before Transmitting/Receiving any data */
	UART_Init(9600);
  a8:	60 e8       	ldi	r22, 0x80	; 128
  aa:	75 e2       	ldi	r23, 0x25	; 37
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 ac 00 	call	0x158	; 0x158 <UART_Init>
	UART_Printf("5digit decimal counter: ");
  b4:	00 d0       	rcall	.+0      	; 0xb6 <main+0x16>
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ed b7       	in	r30, 0x3d	; 61
  bc:	fe b7       	in	r31, 0x3e	; 62
  be:	92 83       	std	Z+2, r25	; 0x02
  c0:	81 83       	std	Z+1, r24	; 0x01
  c2:	0e 94 31 01 	call	0x262	; 0x262 <UART_Printf>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
	/* Transmit the counter till 9999 */
	while(cnt < 9999)
	{
		
		/* Transmit the 4-digit counter value and go to next line */
		UART_Printf("\n\r%4u",cnt);
  ce:	09 e7       	ldi	r16, 0x79	; 121
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	00 d0       	rcall	.+0      	; 0xd4 <main+0x34>
  d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x36>
  d6:	ed b7       	in	r30, 0x3d	; 61
  d8:	fe b7       	in	r31, 0x3e	; 62
  da:	12 83       	std	Z+2, r17	; 0x02
  dc:	01 83       	std	Z+1, r16	; 0x01
  de:	d4 83       	std	Z+4, r29	; 0x04
  e0:	c3 83       	std	Z+3, r28	; 0x03
  e2:	0e 94 31 01 	call	0x262	; 0x262 <UART_Printf>
		
		/* Increment the counter value after 1-sec */
		DELAY_sec(1);
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 41 00 	call	0x82	; 0x82 <DELAY_sec>
		cnt++;
  f6:	21 96       	adiw	r28, 0x01	; 1
	/* Initialize the UART before Transmitting/Receiving any data */
	UART_Init(9600);
	UART_Printf("5digit decimal counter: ");

	/* Transmit the counter till 9999 */
	while(cnt < 9999)
  f8:	f7 e2       	ldi	r31, 0x27	; 39
  fa:	cf 30       	cpi	r28, 0x0F	; 15
  fc:	df 07       	cpc	r29, r31
  fe:	49 f7       	brne	.-46     	; 0xd2 <main+0x32>
 100:	ff cf       	rjmp	.-2      	; 0x100 <main+0x60>

00000102 <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
 102:	9b 01       	movw	r18, r22
 104:	ac 01       	movw	r20, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
 10a:	80 56       	subi	r24, 0x60	; 96
 10c:	99 40       	sbci	r25, 0x09	; 9
 10e:	a0 40       	sbci	r26, 0x00	; 0
 110:	b0 40       	sbci	r27, 0x00	; 0
 112:	81 5a       	subi	r24, 0xA1	; 161
 114:	98 4b       	sbci	r25, 0xB8	; 184
 116:	a1 40       	sbci	r26, 0x01	; 1
 118:	b0 40       	sbci	r27, 0x00	; 0
 11a:	18 f0       	brcs	.+6      	; 0x122 <UART_SetBaudRate+0x20>
 11c:	27 e6       	ldi	r18, 0x67	; 103
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	18 c0       	rjmp	.+48     	; 0x152 <UART_SetBaudRate+0x50>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 122:	60 e8       	ldi	r22, 0x80	; 128
 124:	74 e8       	ldi	r23, 0x84	; 132
 126:	8e e1       	ldi	r24, 0x1E	; 30
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	62 1b       	sub	r22, r18
 12c:	73 0b       	sbc	r23, r19
 12e:	84 0b       	sbc	r24, r20
 130:	95 0b       	sbc	r25, r21
 132:	f3 e0       	ldi	r31, 0x03	; 3
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	88 1f       	adc	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	fa 95       	dec	r31
 13e:	d1 f7       	brne	.-12     	; 0x134 <UART_SetBaudRate+0x32>
 140:	e4 e0       	ldi	r30, 0x04	; 4
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	44 1f       	adc	r20, r20
 148:	55 1f       	adc	r21, r21
 14a:	ea 95       	dec	r30
 14c:	d1 f7       	brne	.-12     	; 0x142 <UART_SetBaudRate+0x40>
 14e:	0e 94 16 02 	call	0x42c	; 0x42c <__udivmodsi4>
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
	}

	UBRRL = util_ExtractByte0to8(RegValue);
 152:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
 154:	30 bd       	out	0x20, r19	; 32
}
 156:	08 95       	ret

00000158 <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
 158:	28 e1       	ldi	r18, 0x18	; 24
 15a:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
 15c:	26 e8       	ldi	r18, 0x86	; 134
 15e:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
 160:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(var_baudRate_u32);
 162:	0e 94 81 00 	call	0x102	; 0x102 <UART_SetBaudRate>
}
 166:	08 95       	ret

00000168 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
 168:	5f 9b       	sbis	0x0b, 7	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <UART_RxChar>
	return(UDR);                          // return the received char
 16c:	8c b1       	in	r24, 0x0c	; 12
}
 16e:	08 95       	ret

00000170 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <UART_TxChar>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 174:	8c b9       	out	0x0c, r24	; 12
}
 176:	08 95       	ret

00000178 <UART_TxDecimalNumber>:
				2.(12345,6) then 6-digits ie. 012345 will be transmitted
				3.(12345,C_DefaultDigitsToTransmit_U8) then 12345 will be transmitted.
***************************************************************************************************/
#if ((Enable_UART_TxDecimalNumber==1) || (Enable_UART_TxFloatNumber==1))
void UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8)
{
 178:	6f 92       	push	r6
 17a:	7f 92       	push	r7
 17c:	9f 92       	push	r9
 17e:	af 92       	push	r10
 180:	bf 92       	push	r11
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	df 93       	push	r29
 18e:	cf 93       	push	r28
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	2a 97       	sbiw	r28, 0x0a	; 10
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	6b 01       	movw	r12, r22
 1a2:	7c 01       	movw	r14, r24
 1a4:	94 2e       	mov	r9, r20
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
 1a6:	61 15       	cp	r22, r1
 1a8:	71 05       	cpc	r23, r1
 1aa:	81 05       	cpc	r24, r1
 1ac:	91 05       	cpc	r25, r1
 1ae:	31 f0       	breq	.+12     	; 0x1bc <UART_TxDecimalNumber+0x44>
 1b0:	00 e0       	ldi	r16, 0x00	; 0
			else
			{
				/*In case user expects more digits to be transmitted than the actual digits in number,
  			    then update the remaining digits with zero.
                Ex: var_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0;
 1b2:	3e 01       	movw	r6, r28
 1b4:	08 94       	sec
 1b6:	61 1c       	adc	r6, r1
 1b8:	71 1c       	adc	r7, r1
 1ba:	32 c0       	rjmp	.+100    	; 0x220 <UART_TxDecimalNumber+0xa8>
#if ((Enable_UART_TxDecimalNumber==1) || (Enable_UART_TxFloatNumber==1))
void UART_TxDecimalNumber(uint32_t var_decNumber_u32, uint8_t var_numOfDigitsToTransmit_u8)
{
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
 1bc:	fe 01       	movw	r30, r28
 1be:	31 96       	adiw	r30, 0x01	; 1
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <UART_TxDecimalNumber+0x50>
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
 1c4:	11 92       	st	Z+, r1
	uint8_t i=0,a[10];

	if(var_decNumber_u32==0)
	{
		/* If the number is zero then update the array with the same for transmitting */
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
 1c6:	0f 5f       	subi	r16, 0xFF	; 255
 1c8:	09 15       	cp	r16, r9
 1ca:	b0 f5       	brcc	.+108    	; 0x238 <UART_TxDecimalNumber+0xc0>
 1cc:	0a 30       	cpi	r16, 0x0A	; 10
 1ce:	d1 f7       	brne	.-12     	; 0x1c4 <UART_TxDecimalNumber+0x4c>
 1d0:	33 c0       	rjmp	.+102    	; 0x238 <UART_TxDecimalNumber+0xc0>
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
		{
			/* Continue extracting the digits from right side
			   till the Specified var_numOfDigitsToTransmit_u8 */
			if(var_decNumber_u32!=0)
 1d2:	c1 14       	cp	r12, r1
 1d4:	d1 04       	cpc	r13, r1
 1d6:	e1 04       	cpc	r14, r1
 1d8:	f1 04       	cpc	r15, r1
 1da:	d1 f0       	breq	.+52     	; 0x210 <UART_TxDecimalNumber+0x98>
			{
				/* Extract the digits from the number till it becomes zero.
			    First get the remainder and divide the number by 10 each time.
                If var_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
				The process continues till it becomes zero or max digits reached*/
				a[i]=util_GetMod32(var_decNumber_u32,10);
 1dc:	53 01       	movw	r10, r6
 1de:	a0 0e       	add	r10, r16
 1e0:	b1 1c       	adc	r11, r1
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	2a e0       	ldi	r18, 0x0A	; 10
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	50 e0       	ldi	r21, 0x00	; 0
 1ee:	0e 94 16 02 	call	0x42c	; 0x42c <__udivmodsi4>
 1f2:	f5 01       	movw	r30, r10
 1f4:	60 83       	st	Z, r22
				var_decNumber_u32=var_decNumber_u32/10;
 1f6:	c7 01       	movw	r24, r14
 1f8:	b6 01       	movw	r22, r12
 1fa:	2a e0       	ldi	r18, 0x0A	; 10
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	0e 94 16 02 	call	0x42c	; 0x42c <__udivmodsi4>
 206:	c9 01       	movw	r24, r18
 208:	da 01       	movw	r26, r20
 20a:	6c 01       	movw	r12, r24
 20c:	7d 01       	movw	r14, r26
 20e:	07 c0       	rjmp	.+14     	; 0x21e <UART_TxDecimalNumber+0xa6>
			}
			else if( (var_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 210:	fa e0       	ldi	r31, 0x0A	; 10
 212:	f9 15       	cp	r31, r9
 214:	88 f0       	brcs	.+34     	; 0x238 <UART_TxDecimalNumber+0xc0>
			else
			{
				/*In case user expects more digits to be transmitted than the actual digits in number,
  			    then update the remaining digits with zero.
                Ex: var_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
				a[i]=0;
 216:	f3 01       	movw	r30, r6
 218:	e0 0f       	add	r30, r16
 21a:	f1 1d       	adc	r31, r1
 21c:	10 82       	st	Z, r1
		for(i=0;((i<var_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
		   a[i] = 0x00;
	}
	else
	{
		for(i=0;i<var_numOfDigitsToTransmit_u8;i++)
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	09 15       	cp	r16, r9
 222:	b8 f2       	brcs	.-82     	; 0x1d2 <UART_TxDecimalNumber+0x5a>
 224:	09 c0       	rjmp	.+18     	; 0x238 <UART_TxDecimalNumber+0xc0>
	}

	while(i)
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
 226:	fe 01       	movw	r30, r28
 228:	e0 0f       	add	r30, r16
 22a:	f1 1d       	adc	r31, r1
 22c:	e0 81       	ld	r30, Z

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 22e:	5d 9b       	sbis	0x0b, 5	; 11
 230:	fe cf       	rjmp	.-4      	; 0x22e <UART_TxDecimalNumber+0xb6>
	}

	while(i)
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
 232:	e0 5d       	subi	r30, 0xD0	; 208
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 234:	ec b9       	out	0x0c, r30	; 12

	while(i)
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
		i--;
 236:	01 50       	subi	r16, 0x01	; 1
				a[i]=0;
			}
		}
	}

	while(i)
 238:	00 23       	and	r16, r16
 23a:	a9 f7       	brne	.-22     	; 0x226 <UART_TxDecimalNumber+0xae>
	{ 
		/* Finally get the ascii values of the digits and transmit*/
		UART_TxChar(util_Dec2Ascii(a[i-1]));
		i--;
	}
}
 23c:	2a 96       	adiw	r28, 0x0a	; 10
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	cf 91       	pop	r28
 24a:	df 91       	pop	r29
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	7f 90       	pop	r7
 25e:	6f 90       	pop	r6
 260:	08 95       	ret

00000262 <UART_Printf>:
	     %12b: will transmit the 12-LSB of the number
		 %d: Will transmit the exact digits of the number
***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(const char *argList, ...)
{
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	df 93       	push	r29
 276:	cf 93       	push	r28
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	00 e1       	ldi	r16, 0x10	; 16
 27e:	e0 2e       	mov	r14, r16
 280:	f1 2c       	mov	r15, r1
 282:	ec 0e       	add	r14, r28
 284:	fd 1e       	adc	r15, r29
 286:	8e 85       	ldd	r24, Y+14	; 0x0e
 288:	9f 85       	ldd	r25, Y+15	; 0x0f
 28a:	9c 01       	movw	r18, r24
 28c:	69 01       	movw	r12, r18
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 28e:	1d e2       	ldi	r17, 0x2D	; 45
 290:	b1 2e       	mov	r11, r17
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   var_numOfDigitsToTransmit_u8 = (var_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 292:	b5 e2       	ldi	r27, 0x25	; 37
 294:	ab 2e       	mov	r10, r27
 296:	aa e0       	ldi	r26, 0x0A	; 10
 298:	9a 2e       	mov	r9, r26
 29a:	b7 c0       	rjmp	.+366    	; 0x40a <UART_Printf+0x1a8>
	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
	{

		ch= *ptr;
		if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 29c:	85 32       	cpi	r24, 0x25	; 37
 29e:	09 f0       	breq	.+2      	; 0x2a2 <UART_Printf+0x40>
 2a0:	ae c0       	rjmp	.+348    	; 0x3fe <UART_Printf+0x19c>
		{
		    ptr++;
 2a2:	08 94       	sec
 2a4:	c1 1c       	adc	r12, r1
 2a6:	d1 1c       	adc	r13, r1
		    ch = *ptr;
 2a8:	f6 01       	movw	r30, r12
 2aa:	90 81       	ld	r25, Z
		   if((ch>=0x30) && (ch<=0x39))
 2ac:	89 2f       	mov	r24, r25
 2ae:	80 53       	subi	r24, 0x30	; 48
 2b0:	8a 30       	cpi	r24, 0x0A	; 10
 2b2:	10 f0       	brcs	.+4      	; 0x2b8 <UART_Printf+0x56>
 2b4:	4f ef       	ldi	r20, 0xFF	; 255
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <UART_Printf+0x74>
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <UART_Printf+0x6c>
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
			    {
				   var_numOfDigitsToTransmit_u8 = (var_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 2bc:	49 9d       	mul	r20, r9
 2be:	40 2d       	mov	r20, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	48 0f       	add	r20, r24
				   ptr++;
 2c4:	08 94       	sec
 2c6:	c1 1c       	adc	r12, r1
 2c8:	d1 1c       	adc	r13, r1
				   ch = *ptr;
 2ca:	f6 01       	movw	r30, r12
 2cc:	90 81       	ld	r25, Z
		    ptr++;
		    ch = *ptr;
		   if((ch>=0x30) && (ch<=0x39))
			{
			   var_numOfDigitsToTransmit_u8 = 0;
			   while((ch>=0x30) && (ch<=0x39))
 2ce:	89 2f       	mov	r24, r25
 2d0:	80 53       	subi	r24, 0x30	; 48
 2d2:	8a 30       	cpi	r24, 0x0A	; 10
 2d4:	98 f3       	brcs	.-26     	; 0x2bc <UART_Printf+0x5a>
			{
			  var_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
			}				


			switch(ch)       /* Decode the type of the argument */
 2d6:	98 35       	cpi	r25, 0x58	; 88
 2d8:	09 f4       	brne	.+2      	; 0x2dc <UART_Printf+0x7a>
 2da:	83 c0       	rjmp	.+262    	; 0x3e2 <UART_Printf+0x180>
 2dc:	99 35       	cpi	r25, 0x59	; 89
 2de:	c0 f4       	brcc	.+48     	; 0x310 <UART_Printf+0xae>
 2e0:	94 34       	cpi	r25, 0x44	; 68
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <UART_Printf+0x84>
 2e4:	49 c0       	rjmp	.+146    	; 0x378 <UART_Printf+0x116>
 2e6:	95 34       	cpi	r25, 0x45	; 69
 2e8:	48 f4       	brcc	.+18     	; 0x2fc <UART_Printf+0x9a>
 2ea:	92 34       	cpi	r25, 0x42	; 66
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <UART_Printf+0x8e>
 2ee:	74 c0       	rjmp	.+232    	; 0x3d8 <UART_Printf+0x176>
 2f0:	93 34       	cpi	r25, 0x43	; 67
 2f2:	20 f5       	brcc	.+72     	; 0x33c <UART_Printf+0xda>
 2f4:	95 32       	cpi	r25, 0x25	; 37
 2f6:	09 f0       	breq	.+2      	; 0x2fa <UART_Printf+0x98>
 2f8:	85 c0       	rjmp	.+266    	; 0x404 <UART_Printf+0x1a2>
 2fa:	7d c0       	rjmp	.+250    	; 0x3f6 <UART_Printf+0x194>
 2fc:	93 35       	cpi	r25, 0x53	; 83
 2fe:	09 f4       	brne	.+2      	; 0x302 <UART_Printf+0xa0>
 300:	75 c0       	rjmp	.+234    	; 0x3ec <UART_Printf+0x18a>
 302:	95 35       	cpi	r25, 0x55	; 85
 304:	09 f4       	brne	.+2      	; 0x308 <UART_Printf+0xa6>
 306:	59 c0       	rjmp	.+178    	; 0x3ba <UART_Printf+0x158>
 308:	96 34       	cpi	r25, 0x46	; 70
 30a:	09 f0       	breq	.+2      	; 0x30e <UART_Printf+0xac>
 30c:	7b c0       	rjmp	.+246    	; 0x404 <UART_Printf+0x1a2>
 30e:	69 c0       	rjmp	.+210    	; 0x3e2 <UART_Printf+0x180>
 310:	96 36       	cpi	r25, 0x66	; 102
 312:	09 f4       	brne	.+2      	; 0x316 <UART_Printf+0xb4>
 314:	66 c0       	rjmp	.+204    	; 0x3e2 <UART_Printf+0x180>
 316:	97 36       	cpi	r25, 0x67	; 103
 318:	40 f4       	brcc	.+16     	; 0x32a <UART_Printf+0xc8>
 31a:	93 36       	cpi	r25, 0x63	; 99
 31c:	79 f0       	breq	.+30     	; 0x33c <UART_Printf+0xda>
 31e:	94 36       	cpi	r25, 0x64	; 100
 320:	b1 f0       	breq	.+44     	; 0x34e <UART_Printf+0xec>
 322:	92 36       	cpi	r25, 0x62	; 98
 324:	09 f0       	breq	.+2      	; 0x328 <UART_Printf+0xc6>
 326:	6e c0       	rjmp	.+220    	; 0x404 <UART_Printf+0x1a2>
 328:	61 c0       	rjmp	.+194    	; 0x3ec <UART_Printf+0x18a>
 32a:	95 37       	cpi	r25, 0x75	; 117
 32c:	e9 f1       	breq	.+122    	; 0x3a8 <UART_Printf+0x146>
 32e:	98 37       	cpi	r25, 0x78	; 120
 330:	09 f4       	brne	.+2      	; 0x334 <UART_Printf+0xd2>
 332:	4f c0       	rjmp	.+158    	; 0x3d2 <UART_Printf+0x170>
 334:	93 37       	cpi	r25, 0x73	; 115
 336:	09 f0       	breq	.+2      	; 0x33a <UART_Printf+0xd8>
 338:	65 c0       	rjmp	.+202    	; 0x404 <UART_Printf+0x1a2>
 33a:	58 c0       	rjmp	.+176    	; 0x3ec <UART_Printf+0x18a>
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 33c:	f7 01       	movw	r30, r14
 33e:	80 81       	ld	r24, Z

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 340:	5d 9b       	sbis	0x0b, 5	; 11
 342:	fe cf       	rjmp	.-4      	; 0x340 <UART_Printf+0xde>

			switch(ch)       /* Decode the type of the argument */
			{
			case 'C':
			case 'c':     /* Argument type is of char, hence read char data from the argp */
				ch = va_arg(argp, uint16_t);
 344:	22 e0       	ldi	r18, 0x02	; 2
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	e2 0e       	add	r14, r18
 34a:	f3 1e       	adc	r15, r19
 34c:	5a c0       	rjmp	.+180    	; 0x402 <UART_Printf+0x1a0>
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 34e:	f7 01       	movw	r30, r14
 350:	20 81       	ld	r18, Z
 352:	31 81       	ldd	r19, Z+1	; 0x01
#if (Enable_UART_TxDecimalNumber == 1)
				if(var_num_s16<0)
 354:	37 ff       	sbrs	r19, 7
 356:	06 c0       	rjmp	.+12     	; 0x364 <UART_Printf+0x102>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 358:	5d 9b       	sbis	0x0b, 5	; 11
 35a:	fe cf       	rjmp	.-4      	; 0x358 <UART_Printf+0xf6>
			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
#if (Enable_UART_TxDecimalNumber == 1)
				if(var_num_s16<0)
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   var_num_s16 = -var_num_s16;
 35c:	30 95       	com	r19
 35e:	21 95       	neg	r18
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 362:	bc b8       	out	0x0c, r11	; 12
				ch = va_arg(argp, uint16_t);
				UART_TxChar(ch);
				break;

			case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
				var_num_s16 = va_arg(argp, sint16_t);
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	e8 0e       	add	r14, r24
 36a:	f9 1e       	adc	r15, r25
				if(var_num_s16<0)
				 { /* If the number is -ve then display the 2's complement along with '-' sign */ 
				   var_num_s16 = -var_num_s16;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
 36c:	b9 01       	movw	r22, r18
 36e:	88 27       	eor	r24, r24
 370:	77 fd       	sbrc	r23, 7
 372:	80 95       	com	r24
 374:	98 2f       	mov	r25, r24
 376:	15 c0       	rjmp	.+42     	; 0x3a2 <UART_Printf+0x140>
#endif
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 378:	f7 01       	movw	r30, r14
 37a:	60 81       	ld	r22, Z
 37c:	71 81       	ldd	r23, Z+1	; 0x01
 37e:	82 81       	ldd	r24, Z+2	; 0x02
 380:	93 81       	ldd	r25, Z+3	; 0x03
#if (Enable_UART_TxDecimalNumber == 1)				
				if(var_num_s32<0)
 382:	97 ff       	sbrs	r25, 7
 384:	0a c0       	rjmp	.+20     	; 0x39a <UART_Printf+0x138>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 386:	5d 9b       	sbis	0x0b, 5	; 11
 388:	fe cf       	rjmp	.-4      	; 0x386 <UART_Printf+0x124>
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
#if (Enable_UART_TxDecimalNumber == 1)				
				if(var_num_s32<0)
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   var_num_s32 = -var_num_s32;
 38a:	90 95       	com	r25
 38c:	80 95       	com	r24
 38e:	70 95       	com	r23
 390:	61 95       	neg	r22
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 4f       	sbci	r24, 0xFF	; 255
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 398:	bc b8       	out	0x0c, r11	; 12
				UART_TxDecimalNumber(var_num_s16,var_numOfDigitsToTransmit_u8);
#endif
				break;
				
			case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
				var_num_s32 = va_arg(argp, sint32_t);
 39a:	24 e0       	ldi	r18, 0x04	; 4
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	e2 0e       	add	r14, r18
 3a0:	f3 1e       	adc	r15, r19
				if(var_num_s32<0)
				 { /* If the number is -ve then display the 2's complement along with '-' sign */
				   var_num_s32 = -var_num_s32;
				   UART_TxChar('-');
				 }
				UART_TxDecimalNumber(var_num_s32,var_numOfDigitsToTransmit_u8);
 3a2:	0e 94 bc 00 	call	0x178	; 0x178 <UART_TxDecimalNumber>
 3a6:	2e c0       	rjmp	.+92     	; 0x404 <UART_Printf+0x1a2>
#endif				
				break;	

			case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
				var_num_u16 = va_arg(argp, uint16_t);
 3a8:	87 01       	movw	r16, r14
 3aa:	0e 5f       	subi	r16, 0xFE	; 254
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
 3ae:	f7 01       	movw	r30, r14
 3b0:	60 81       	ld	r22, Z
 3b2:	71 81       	ldd	r23, Z+1	; 0x01
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <UART_Printf+0x168>
#endif				
				break;
			
			case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
				var_num_u32 = va_arg(argp, uint32_t);
 3ba:	87 01       	movw	r16, r14
 3bc:	0c 5f       	subi	r16, 0xFC	; 252
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
#if (Enable_UART_TxDecimalNumber == 1)				
				UART_TxDecimalNumber(var_num_u32,var_numOfDigitsToTransmit_u8);
 3c0:	f7 01       	movw	r30, r14
 3c2:	60 81       	ld	r22, Z
 3c4:	71 81       	ldd	r23, Z+1	; 0x01
 3c6:	82 81       	ldd	r24, Z+2	; 0x02
 3c8:	93 81       	ldd	r25, Z+3	; 0x03
 3ca:	0e 94 bc 00 	call	0x178	; 0x178 <UART_TxDecimalNumber>
 3ce:	78 01       	movw	r14, r16
 3d0:	19 c0       	rjmp	.+50     	; 0x404 <UART_Printf+0x1a2>
#endif				
				break;			

			case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
				var_num_u16 = va_arg(argp, uint16_t);
 3d2:	22 e0       	ldi	r18, 0x02	; 2
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <UART_Printf+0x17a>
				UART_TxBinaryNumber(var_num_u16,var_numOfDigitsToTransmit_u8);
#endif				
				break;

			case 'B':  /* Argument type is of binary,Read int and convert to binary */
				var_num_u32 = va_arg(argp, uint32_t);
 3d8:	24 e0       	ldi	r18, 0x04	; 4
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	e2 0e       	add	r14, r18
 3de:	f3 1e       	adc	r15, r19
 3e0:	11 c0       	rjmp	.+34     	; 0x404 <UART_Printf+0x1a2>
#endif				
				break;

			case 'F':
			case 'f': /* Argument type is of float, hence read double data from the argp */
				var_floatNum_f32 = va_arg(argp, double);
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	e8 0e       	add	r14, r24
 3e8:	f9 1e       	adc	r15, r25
 3ea:	0c c0       	rjmp	.+24     	; 0x404 <UART_Printf+0x1a2>
				break;


			case 'S':
			case 's': /* Argument type is of string, hence get the pointer to sting passed */
				str = va_arg(argp, char *);
 3ec:	e2 e0       	ldi	r30, 0x02	; 2
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	ee 0e       	add	r14, r30
 3f2:	ff 1e       	adc	r15, r31
 3f4:	07 c0       	rjmp	.+14     	; 0x404 <UART_Printf+0x1a2>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 3f6:	5d 9b       	sbis	0x0b, 5	; 11
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <UART_Printf+0x194>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 3fa:	ac b8       	out	0x0c, r10	; 12
 3fc:	03 c0       	rjmp	.+6      	; 0x404 <UART_Printf+0x1a2>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 3fe:	5d 9b       	sbis	0x0b, 5	; 11
 400:	fe cf       	rjmp	.-4      	; 0x3fe <UART_Printf+0x19c>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 402:	8c b9       	out	0x0c, r24	; 12
	uint8_t var_numOfDigitsToTransmit_u8;

	va_start(argp, argList);

	/* Loop through the list to extract all the input arguments */
	for(ptr = argList; *ptr != '\0'; ptr++)
 404:	08 94       	sec
 406:	c1 1c       	adc	r12, r1
 408:	d1 1c       	adc	r13, r1
 40a:	f6 01       	movw	r30, r12
 40c:	80 81       	ld	r24, Z
 40e:	88 23       	and	r24, r24
 410:	09 f0       	breq	.+2      	; 0x414 <UART_Printf+0x1b2>
 412:	44 cf       	rjmp	.-376    	; 0x29c <UART_Printf+0x3a>
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
 414:	cf 91       	pop	r28
 416:	df 91       	pop	r29
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	df 90       	pop	r13
 422:	cf 90       	pop	r12
 424:	bf 90       	pop	r11
 426:	af 90       	pop	r10
 428:	9f 90       	pop	r9
 42a:	08 95       	ret

0000042c <__udivmodsi4>:
 42c:	a1 e2       	ldi	r26, 0x21	; 33
 42e:	1a 2e       	mov	r1, r26
 430:	aa 1b       	sub	r26, r26
 432:	bb 1b       	sub	r27, r27
 434:	fd 01       	movw	r30, r26
 436:	0d c0       	rjmp	.+26     	; 0x452 <__udivmodsi4_ep>

00000438 <__udivmodsi4_loop>:
 438:	aa 1f       	adc	r26, r26
 43a:	bb 1f       	adc	r27, r27
 43c:	ee 1f       	adc	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	a2 17       	cp	r26, r18
 442:	b3 07       	cpc	r27, r19
 444:	e4 07       	cpc	r30, r20
 446:	f5 07       	cpc	r31, r21
 448:	20 f0       	brcs	.+8      	; 0x452 <__udivmodsi4_ep>
 44a:	a2 1b       	sub	r26, r18
 44c:	b3 0b       	sbc	r27, r19
 44e:	e4 0b       	sbc	r30, r20
 450:	f5 0b       	sbc	r31, r21

00000452 <__udivmodsi4_ep>:
 452:	66 1f       	adc	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	1a 94       	dec	r1
 45c:	69 f7       	brne	.-38     	; 0x438 <__udivmodsi4_loop>
 45e:	60 95       	com	r22
 460:	70 95       	com	r23
 462:	80 95       	com	r24
 464:	90 95       	com	r25
 466:	9b 01       	movw	r18, r22
 468:	ac 01       	movw	r20, r24
 46a:	bd 01       	movw	r22, r26
 46c:	cf 01       	movw	r24, r30
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
