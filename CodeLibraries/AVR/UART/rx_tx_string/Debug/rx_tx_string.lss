
rx_tx_string.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000094  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000248  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000017d  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001fb  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012e  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e0  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "uart.h"	//User defined UART library which conatins the uart routines


/* start the main program */
void main() 
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	df 93       	push	r29
  88:	cf 93       	push	r28
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	e2 97       	sbiw	r28, 0x32	; 50
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
   	 char msg[50];

  /* Initialize the UART before Transmitting/Receiving any data */
    UART_Init(9600);
  9a:	60 e8       	ldi	r22, 0x80	; 128
  9c:	75 e2       	ldi	r23, 0x25	; 37
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 90 00 	call	0x120	; 0x120 <UART_Init>
	
   while(1)
    {
	    /*Receive and transmit a string indefinitely at 9600 baud rate */
	     UART_TxString("\n\r\n\rEnter a new String: ");
		 UART_RxString(msg);   //Receive a string and store it in msg
  a6:	8e 01       	movw	r16, r28
  a8:	0f 5f       	subi	r16, 0xFF	; 255
  aa:	1f 4f       	sbci	r17, 0xFF	; 255
    UART_Init(9600);
	
   while(1)
    {
	    /*Receive and transmit a string indefinitely at 9600 baud rate */
	     UART_TxString("\n\r\n\rEnter a new String: ");
  ac:	80 e6       	ldi	r24, 0x60	; 96
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 a0 00 	call	0x140	; 0x140 <UART_TxString>
		 UART_RxString(msg);   //Receive a string and store it in msg
  b4:	c8 01       	movw	r24, r16
  b6:	0e 94 aa 00 	call	0x154	; 0x154 <UART_RxString>

		 UART_TxString("Entered String is: ");
  ba:	89 e7       	ldi	r24, 0x79	; 121
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 a0 00 	call	0x140	; 0x140 <UART_TxString>
		 UART_TxString(msg);   //Transmit the received string
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 a0 00 	call	0x140	; 0x140 <UART_TxString>
  c8:	f1 cf       	rjmp	.-30     	; 0xac <main+0x2a>

000000ca <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
  ca:	9b 01       	movw	r18, r22
  cc:	ac 01       	movw	r20, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
  ce:	dc 01       	movw	r26, r24
  d0:	cb 01       	movw	r24, r22
  d2:	80 56       	subi	r24, 0x60	; 96
  d4:	99 40       	sbci	r25, 0x09	; 9
  d6:	a0 40       	sbci	r26, 0x00	; 0
  d8:	b0 40       	sbci	r27, 0x00	; 0
  da:	81 5a       	subi	r24, 0xA1	; 161
  dc:	98 4b       	sbci	r25, 0xB8	; 184
  de:	a1 40       	sbci	r26, 0x01	; 1
  e0:	b0 40       	sbci	r27, 0x00	; 0
  e2:	18 f0       	brcs	.+6      	; 0xea <UART_SetBaudRate+0x20>
  e4:	27 e6       	ldi	r18, 0x67	; 103
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	18 c0       	rjmp	.+48     	; 0x11a <UART_SetBaudRate+0x50>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
  ea:	60 e8       	ldi	r22, 0x80	; 128
  ec:	74 e8       	ldi	r23, 0x84	; 132
  ee:	8e e1       	ldi	r24, 0x1E	; 30
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	62 1b       	sub	r22, r18
  f4:	73 0b       	sbc	r23, r19
  f6:	84 0b       	sbc	r24, r20
  f8:	95 0b       	sbc	r25, r21
  fa:	f3 e0       	ldi	r31, 0x03	; 3
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	88 1f       	adc	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	fa 95       	dec	r31
 106:	d1 f7       	brne	.-12     	; 0xfc <UART_SetBaudRate+0x32>
 108:	e4 e0       	ldi	r30, 0x04	; 4
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	44 1f       	adc	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	ea 95       	dec	r30
 114:	d1 f7       	brne	.-12     	; 0x10a <UART_SetBaudRate+0x40>
 116:	0e 94 b9 00 	call	0x172	; 0x172 <__udivmodsi4>
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
	}

	UBRRL = util_ExtractByte0to8(RegValue);
 11a:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
 11c:	30 bd       	out	0x20, r19	; 32
}
 11e:	08 95       	ret

00000120 <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
 120:	28 e1       	ldi	r18, 0x18	; 24
 122:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
 124:	26 e8       	ldi	r18, 0x86	; 134
 126:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
 128:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(var_baudRate_u32);
 12a:	0e 94 65 00 	call	0xca	; 0xca <UART_SetBaudRate>
}
 12e:	08 95       	ret

00000130 <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
 130:	5f 9b       	sbis	0x0b, 7	; 11
 132:	fe cf       	rjmp	.-4      	; 0x130 <UART_RxChar>
	return(UDR);                          // return the received char
 134:	8c b1       	in	r24, 0x0c	; 12
}
 136:	08 95       	ret

00000138 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 138:	5d 9b       	sbis	0x0b, 5	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <UART_TxChar>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 13c:	8c b9       	out	0x0c, r24	; 12
}
 13e:	08 95       	ret

00000140 <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 140:	fc 01       	movw	r30, r24
 142:	04 c0       	rjmp	.+8      	; 0x14c <UART_TxString+0xc>

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 144:	5d 9b       	sbis	0x0b, 5	; 11
 146:	fe cf       	rjmp	.-4      	; 0x144 <UART_TxString+0x4>
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 148:	31 96       	adiw	r30, 0x01	; 1
 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 14a:	8c b9       	out	0x0c, r24	; 12
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	c9 f7       	brne	.-14     	; 0x144 <UART_TxString+0x4>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 152:	08 95       	ret

00000154 <UART_RxString>:
    if not required then comment UART_TxChar(ch) in the code.
  2.BackSlash is not taken care.
***************************************************************************************************/
#if (Enable_UART_RxString==1)
void UART_RxString(char *ptr_stringPointer_u8)
{
 154:	fc 01       	movw	r30, r24
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
 156:	5f 9b       	sbis	0x0b, 7	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <UART_RxString+0x2>
	return(UDR);                          // return the received char
 15a:	8c b1       	in	r24, 0x0c	; 12

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 15c:	5d 9b       	sbis	0x0b, 5	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <UART_RxString+0x8>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 160:	8c b9       	out	0x0c, r24	; 12
	while(1)
	{
		ch=UART_RxChar();    //Receive a char
		UART_TxChar(ch);     //Echo back the received char

		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
 162:	8d 30       	cpi	r24, 0x0D	; 13
 164:	11 f0       	breq	.+4      	; 0x16a <UART_RxString+0x16>
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	11 f4       	brne	.+4      	; 0x16e <UART_RxString+0x1a>
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
 16a:	10 82       	st	Z, r1
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
		ptr_stringPointer_u8++;
	}
}
 16c:	08 95       	ret
		if((ch=='\r') || (ch=='\n')) //read till enter key is pressed
		{						     //once enter key is pressed null terminate the string
			*ptr_stringPointer_u8=0;           //and break the loop
			break;				  
		}
		*ptr_stringPointer_u8=ch;              //copy the char into string and increment the pointer
 16e:	81 93       	st	Z+, r24
 170:	f2 cf       	rjmp	.-28     	; 0x156 <UART_RxString+0x2>

00000172 <__udivmodsi4>:
 172:	a1 e2       	ldi	r26, 0x21	; 33
 174:	1a 2e       	mov	r1, r26
 176:	aa 1b       	sub	r26, r26
 178:	bb 1b       	sub	r27, r27
 17a:	fd 01       	movw	r30, r26
 17c:	0d c0       	rjmp	.+26     	; 0x198 <__udivmodsi4_ep>

0000017e <__udivmodsi4_loop>:
 17e:	aa 1f       	adc	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	ee 1f       	adc	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	a2 17       	cp	r26, r18
 188:	b3 07       	cpc	r27, r19
 18a:	e4 07       	cpc	r30, r20
 18c:	f5 07       	cpc	r31, r21
 18e:	20 f0       	brcs	.+8      	; 0x198 <__udivmodsi4_ep>
 190:	a2 1b       	sub	r26, r18
 192:	b3 0b       	sbc	r27, r19
 194:	e4 0b       	sbc	r30, r20
 196:	f5 0b       	sbc	r31, r21

00000198 <__udivmodsi4_ep>:
 198:	66 1f       	adc	r22, r22
 19a:	77 1f       	adc	r23, r23
 19c:	88 1f       	adc	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	1a 94       	dec	r1
 1a2:	69 f7       	brne	.-38     	; 0x17e <__udivmodsi4_loop>
 1a4:	60 95       	com	r22
 1a6:	70 95       	com	r23
 1a8:	80 95       	com	r24
 1aa:	90 95       	com	r25
 1ac:	9b 01       	movw	r18, r22
 1ae:	ac 01       	movw	r20, r24
 1b0:	bd 01       	movw	r22, r26
 1b2:	cf 01       	movw	r24, r30
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
