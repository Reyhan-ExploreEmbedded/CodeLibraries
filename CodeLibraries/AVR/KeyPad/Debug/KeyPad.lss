
KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800066  00800066  000004b0  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000186  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a93  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000459  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099d  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000391  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000027e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  8a:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DELAY_sec>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	40 e9       	ldi	r20, 0x90	; 144
  94:	51 e0       	ldi	r21, 0x01	; 1
  96:	09 c0       	rjmp	.+18     	; 0xaa <DELAY_sec+0x18>
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  98:	20 e1       	ldi	r18, 0x10	; 16
  9a:	37 e2       	ldi	r19, 0x27	; 39
  9c:	fa 01       	movw	r30, r20
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <DELAY_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d1 f7       	brne	.-12     	; 0x9c <DELAY_sec+0xa>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
  a8:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  aa:	00 97       	sbiw	r24, 0x00	; 0
  ac:	a9 f7       	brne	.-22     	; 0x98 <DELAY_sec+0x6>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
		}
  }
  ae:	08 95       	ret

000000b0 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
  b0:	80 ef       	ldi	r24, 0xF0	; 240
  b2:	87 bb       	out	0x17, r24	; 23
}
  b4:	08 95       	ret

000000b6 <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
  b6:	3f e0       	ldi	r19, 0x0F	; 15
  b8:	40 ea       	ldi	r20, 0xA0	; 160
  ba:	5f e0       	ldi	r21, 0x0F	; 15
  bc:	38 bb       	out	0x18, r19	; 24
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
  be:	26 b3       	in	r18, 0x16	; 22
		}while(key!=0x0F);
  c0:	2f 70       	andi	r18, 0x0F	; 15
  c2:	2f 30       	cpi	r18, 0x0F	; 15
  c4:	d9 f7       	brne	.-10     	; 0xbc <KEYPAD_WaitForKeyRelease+0x6>
  c6:	ca 01       	movw	r24, r20
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <KEYPAD_WaitForKeyRelease+0x12>

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
  cc:	28 bb       	out	0x18, r18	; 24
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
  ce:	86 b3       	in	r24, 0x16	; 22
	}while(key!=0x0F);   // Wait till the Key is released,
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	8f 30       	cpi	r24, 0x0F	; 15
  d4:	99 f7       	brne	.-26     	; 0xbc <KEYPAD_WaitForKeyRelease+0x6>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
  d6:	08 95       	ret

000000d8 <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
  d8:	4f e0       	ldi	r20, 0x0F	; 15
  da:	20 ea       	ldi	r18, 0xA0	; 160
  dc:	3f e0       	ldi	r19, 0x0F	; 15
  de:	48 bb       	out	0x18, r20	; 24
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
  e0:	86 b3       	in	r24, 0x16	; 22
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	8f 30       	cpi	r24, 0x0F	; 15
  e6:	d9 f3       	breq	.-10     	; 0xde <KEYPAD_WaitForKeyPress+0x6>
  e8:	c9 01       	movw	r24, r18
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <KEYPAD_WaitForKeyPress+0x12>
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
  ee:	48 bb       	out	0x18, r20	; 24
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
  f0:	86 b3       	in	r24, 0x16	; 22

	}while(var_keyPress_u8==0x0F);
  f2:	8f 70       	andi	r24, 0x0F	; 15
  f4:	8f 30       	cpi	r24, 0x0F	; 15
  f6:	99 f3       	breq	.-26     	; 0xde <KEYPAD_WaitForKeyPress+0x6>
}
  f8:	08 95       	ret

000000fa <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
  fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <KEYPAD_WaitForKeyRelease>
  fe:	80 ea       	ldi	r24, 0xA0	; 160
 100:	9f e0       	ldi	r25, 0x0F	; 15
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <KEYPAD_GetKey+0x8>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 106:	0e 94 6c 00 	call	0xd8	; 0xd8 <KEYPAD_WaitForKeyPress>
 10a:	2f ee       	ldi	r18, 0xEF	; 239
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 ea       	ldi	r20, 0xA0	; 160
 110:	5f e0       	ldi	r21, 0x0F	; 15

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 112:	28 bb       	out	0x18, r18	; 24
 114:	ca 01       	movw	r24, r20
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <KEYPAD_GetKey+0x1c>
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 11a:	96 b3       	in	r25, 0x16	; 22
 11c:	9f 70       	andi	r25, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 11e:	9f 30       	cpi	r25, 0x0F	; 15
 120:	29 f4       	brne	.+10     	; 0x12c <KEYPAD_GetKey+0x32>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 122:	22 0f       	add	r18, r18
 124:	2f 5f       	subi	r18, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 126:	3f 5f       	subi	r19, 0xFF	; 255
 128:	34 30       	cpi	r19, 0x04	; 4
 12a:	99 f7       	brne	.-26     	; 0x112 <KEYPAD_GetKey+0x18>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
 12c:	82 2f       	mov	r24, r18
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	89 0f       	add	r24, r25
 132:	8e 3b       	cpi	r24, 0xBE	; 190
 134:	09 f4       	brne	.+2      	; 0x138 <KEYPAD_GetKey+0x3e>
 136:	43 c0       	rjmp	.+134    	; 0x1be <KEYPAD_GetKey+0xc4>
 138:	8f 3b       	cpi	r24, 0xBF	; 191
 13a:	a0 f4       	brcc	.+40     	; 0x164 <KEYPAD_GetKey+0x6a>
 13c:	8e 37       	cpi	r24, 0x7E	; 126
 13e:	09 f4       	brne	.+2      	; 0x142 <KEYPAD_GetKey+0x48>
 140:	46 c0       	rjmp	.+140    	; 0x1ce <KEYPAD_GetKey+0xd4>
 142:	8f 37       	cpi	r24, 0x7F	; 127
 144:	40 f4       	brcc	.+16     	; 0x156 <KEYPAD_GetKey+0x5c>
 146:	8b 37       	cpi	r24, 0x7B	; 123
 148:	f1 f1       	breq	.+124    	; 0x1c6 <KEYPAD_GetKey+0xcc>
 14a:	8d 37       	cpi	r24, 0x7D	; 125
 14c:	f1 f1       	breq	.+124    	; 0x1ca <KEYPAD_GetKey+0xd0>
 14e:	87 37       	cpi	r24, 0x77	; 119
 150:	09 f0       	breq	.+2      	; 0x154 <KEYPAD_GetKey+0x5a>
 152:	3f c0       	rjmp	.+126    	; 0x1d2 <KEYPAD_GetKey+0xd8>
 154:	36 c0       	rjmp	.+108    	; 0x1c2 <KEYPAD_GetKey+0xc8>
 156:	8b 3b       	cpi	r24, 0xBB	; 187
 158:	71 f1       	breq	.+92     	; 0x1b6 <KEYPAD_GetKey+0xbc>
 15a:	8d 3b       	cpi	r24, 0xBD	; 189
 15c:	71 f1       	breq	.+92     	; 0x1ba <KEYPAD_GetKey+0xc0>
 15e:	87 3b       	cpi	r24, 0xB7	; 183
 160:	c1 f5       	brne	.+112    	; 0x1d2 <KEYPAD_GetKey+0xd8>
 162:	27 c0       	rjmp	.+78     	; 0x1b2 <KEYPAD_GetKey+0xb8>
 164:	8e 3d       	cpi	r24, 0xDE	; 222
 166:	19 f1       	breq	.+70     	; 0x1ae <KEYPAD_GetKey+0xb4>
 168:	8f 3d       	cpi	r24, 0xDF	; 223
 16a:	38 f4       	brcc	.+14     	; 0x17a <KEYPAD_GetKey+0x80>
 16c:	8b 3d       	cpi	r24, 0xDB	; 219
 16e:	d9 f0       	breq	.+54     	; 0x1a6 <KEYPAD_GetKey+0xac>
 170:	8d 3d       	cpi	r24, 0xDD	; 221
 172:	d9 f0       	breq	.+54     	; 0x1aa <KEYPAD_GetKey+0xb0>
 174:	87 3d       	cpi	r24, 0xD7	; 215
 176:	69 f5       	brne	.+90     	; 0x1d2 <KEYPAD_GetKey+0xd8>
 178:	14 c0       	rjmp	.+40     	; 0x1a2 <KEYPAD_GetKey+0xa8>
 17a:	8b 3e       	cpi	r24, 0xEB	; 235
 17c:	51 f0       	breq	.+20     	; 0x192 <KEYPAD_GetKey+0x98>
 17e:	8c 3e       	cpi	r24, 0xEC	; 236
 180:	18 f4       	brcc	.+6      	; 0x188 <KEYPAD_GetKey+0x8e>
 182:	87 3e       	cpi	r24, 0xE7	; 231
 184:	31 f5       	brne	.+76     	; 0x1d2 <KEYPAD_GetKey+0xd8>
 186:	07 c0       	rjmp	.+14     	; 0x196 <KEYPAD_GetKey+0x9c>
 188:	8d 3e       	cpi	r24, 0xED	; 237
 18a:	39 f0       	breq	.+14     	; 0x19a <KEYPAD_GetKey+0xa0>
 18c:	8e 3e       	cpi	r24, 0xEE	; 238
 18e:	09 f5       	brne	.+66     	; 0x1d2 <KEYPAD_GetKey+0xd8>
 190:	06 c0       	rjmp	.+12     	; 0x19e <KEYPAD_GetKey+0xa4>
 192:	81 e3       	ldi	r24, 0x31	; 49
 194:	08 95       	ret
 196:	80 e3       	ldi	r24, 0x30	; 48
 198:	08 95       	ret
 19a:	82 e3       	ldi	r24, 0x32	; 50
 19c:	08 95       	ret
	{
	case 0xe7: var_keyPress_u8='0'; break;
	case 0xeb: var_keyPress_u8='1'; break;
	case 0xed: var_keyPress_u8='2'; break;
 19e:	83 e3       	ldi	r24, 0x33	; 51
 1a0:	08 95       	ret
	case 0xee: var_keyPress_u8='3'; break;
 1a2:	84 e3       	ldi	r24, 0x34	; 52
 1a4:	08 95       	ret
	case 0xd7: var_keyPress_u8='4'; break;
 1a6:	85 e3       	ldi	r24, 0x35	; 53
 1a8:	08 95       	ret
	case 0xdb: var_keyPress_u8='5'; break;
 1aa:	86 e3       	ldi	r24, 0x36	; 54
 1ac:	08 95       	ret
	case 0xdd: var_keyPress_u8='6'; break;
 1ae:	87 e3       	ldi	r24, 0x37	; 55
 1b0:	08 95       	ret
	case 0xde: var_keyPress_u8='7'; break;
 1b2:	88 e3       	ldi	r24, 0x38	; 56
 1b4:	08 95       	ret
	case 0xb7: var_keyPress_u8='8'; break;
 1b6:	89 e3       	ldi	r24, 0x39	; 57
 1b8:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break;
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	08 95       	ret
	case 0xbd: var_keyPress_u8='A'; break;
 1be:	82 e4       	ldi	r24, 0x42	; 66
 1c0:	08 95       	ret
	case 0xbe: var_keyPress_u8='B'; break;
 1c2:	83 e4       	ldi	r24, 0x43	; 67
 1c4:	08 95       	ret
	case 0x77: var_keyPress_u8='C'; break;
 1c6:	84 e4       	ldi	r24, 0x44	; 68
 1c8:	08 95       	ret
	case 0x7b: var_keyPress_u8='D'; break;
 1ca:	85 e4       	ldi	r24, 0x45	; 69
 1cc:	08 95       	ret
	case 0x7d: var_keyPress_u8='E'; break;
 1ce:	86 e4       	ldi	r24, 0x46	; 70
 1d0:	08 95       	ret
	case 0x7e: var_keyPress_u8='F'; break;
 1d2:	8a e7       	ldi	r24, 0x7A	; 122
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 1d4:	08 95       	ret

000001d6 <lcd_BusyCheck>:
static void lcd_BusyCheck()
{
	uint8_t busyflag;
#ifdef LCD_RW       //Perform Busy check if LCD_RW pin is used

	util_UpdateBit(M_LcdDataBusDirection,LCD_D7,C_PinInput_U8); // Configure busy pin as input
 1d6:	a7 98       	cbi	0x14, 7	; 20
	M_LcdClearBit(LCD_RS);           // Select the Command Register by pulling RS LOW
 1d8:	95 98       	cbi	0x12, 5	; 18
	M_LcdSetBit(LCD_RW);             // Select the Read Operation for busy flag by setting RW
 1da:	96 9a       	sbi	0x12, 6	; 18
		M_LcdSetBit(LCD_EN); 
		DELAY_us(10);
		busyflag = util_GetBitStatus(M_LcdDataBusInput,LCD_D7);


		if(STK_LCDConfig.mvar_LcdMode_U8 == 4)
 1dc:	30 91 6a 00 	lds	r19, 0x006A
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e0:	95 e3       	ldi	r25, 0x35	; 53
	M_LcdClearBit(LCD_RS);           // Select the Command Register by pulling RS LOW
	M_LcdSetBit(LCD_RW);             // Select the Read Operation for busy flag by setting RW
	do
	{

		M_LcdClearBit(LCD_EN);             // Send a High-to-Low Pulse at Enable Pin
 1e2:	97 98       	cbi	0x12, 7	; 18
 1e4:	89 2f       	mov	r24, r25
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_BusyCheck+0x10>
		DELAY_us(10);	
		M_LcdSetBit(LCD_EN); 
 1ea:	97 9a       	sbi	0x12, 7	; 18
 1ec:	89 2f       	mov	r24, r25
 1ee:	8a 95       	dec	r24
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_BusyCheck+0x18>
		DELAY_us(10);
		busyflag = util_GetBitStatus(M_LcdDataBusInput,LCD_D7);
 1f2:	23 b3       	in	r18, 0x13	; 19


		if(STK_LCDConfig.mvar_LcdMode_U8 == 4)
 1f4:	34 30       	cpi	r19, 0x04	; 4
 1f6:	41 f4       	brne	.+16     	; 0x208 <lcd_BusyCheck+0x32>
		{
			/* Perform extra dummy read for 4-bit */ 	   	
			M_LcdClearBit(LCD_EN);
 1f8:	97 98       	cbi	0x12, 7	; 18
 1fa:	89 2f       	mov	r24, r25
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_BusyCheck+0x26>
			DELAY_us(10);
			M_LcdSetBit(LCD_EN); 
 200:	97 9a       	sbi	0x12, 7	; 18
 202:	89 2f       	mov	r24, r25
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_BusyCheck+0x2e>
			DELAY_us(10);
		}	
	}while(busyflag);
 208:	27 fd       	sbrc	r18, 7
 20a:	eb cf       	rjmp	.-42     	; 0x1e2 <lcd_BusyCheck+0xc>

	util_UpdateBit(M_LcdDataBusDirection,LCD_D7,C_PinOutput_U8);
 20c:	a7 9a       	sbi	0x14, 7	; 20
#else
	/* Busy flag cannot be read as LCD_RW is not available hence Extra delay of 1ms is added 
	  to ensure the LCD completes previous operation and ready to receive new commands/data */
	DELAY_ms(1);  
#endif
}
 20e:	08 95       	ret

00000210 <lcd_SendNibble>:

 * description : This functions is used to send the higher nibble of the data to LCD in 4-bit mode
 *************************************************************************************************/
static void lcd_SendNibble(uint8_t var)
{
	util_UpdateBit(M_LcdDataBus,LCD_D4,util_GetBitStatus(var,LCD_D4));
 210:	98 2f       	mov	r25, r24
 212:	84 ff       	sbrs	r24, 4
 214:	02 c0       	rjmp	.+4      	; 0x21a <lcd_SendNibble+0xa>
 216:	ac 9a       	sbi	0x15, 4	; 21
 218:	01 c0       	rjmp	.+2      	; 0x21c <lcd_SendNibble+0xc>
 21a:	ac 98       	cbi	0x15, 4	; 21
 21c:	25 b3       	in	r18, 0x15	; 21
	util_UpdateBit(M_LcdDataBus,LCD_D5,util_GetBitStatus(var,LCD_D5));
 21e:	95 ff       	sbrs	r25, 5
 220:	02 c0       	rjmp	.+4      	; 0x226 <lcd_SendNibble+0x16>
 222:	ad 9a       	sbi	0x15, 5	; 21
 224:	01 c0       	rjmp	.+2      	; 0x228 <lcd_SendNibble+0x18>
 226:	ad 98       	cbi	0x15, 5	; 21
 228:	25 b3       	in	r18, 0x15	; 21
	util_UpdateBit(M_LcdDataBus,LCD_D6,util_GetBitStatus(var,LCD_D6));
 22a:	96 ff       	sbrs	r25, 6
 22c:	02 c0       	rjmp	.+4      	; 0x232 <lcd_SendNibble+0x22>
 22e:	ae 9a       	sbi	0x15, 6	; 21
 230:	01 c0       	rjmp	.+2      	; 0x234 <lcd_SendNibble+0x24>
 232:	ae 98       	cbi	0x15, 6	; 21
 234:	95 b3       	in	r25, 0x15	; 21
	util_UpdateBit(M_LcdDataBus,LCD_D7,util_GetBitStatus(var,LCD_D7));
 236:	87 ff       	sbrs	r24, 7
 238:	02 c0       	rjmp	.+4      	; 0x23e <lcd_SendNibble+0x2e>
 23a:	af 9a       	sbi	0x15, 7	; 21
 23c:	01 c0       	rjmp	.+2      	; 0x240 <lcd_SendNibble+0x30>
 23e:	af 98       	cbi	0x15, 7	; 21
 240:	85 b3       	in	r24, 0x15	; 21
 242:	08 95       	ret

00000244 <lcd_SendCmdSignals>:

 * description : This functions generates the signals for sending the var_lcdCmd_u8 to LCD
 *************************************************************************************************/
static void lcd_SendCmdSignals()
{
	M_LcdClearBit(LCD_RS);           // Select the Command Register by pulling RS LOW
 244:	95 98       	cbi	0x12, 5	; 18
#ifdef LCD_RW
	M_LcdClearBit(LCD_RW);           // Select the Write Operation  by pulling RW LOW
 246:	96 98       	cbi	0x12, 6	; 18
#endif
	M_LcdSetBit(LCD_EN);             // Send a High-to-Low Pusle at Enable Pin
 248:	97 9a       	sbi	0x12, 7	; 18
 24a:	85 e3       	ldi	r24, 0x35	; 53
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_SendCmdSignals+0x8>
	DELAY_us(10);
	M_LcdClearBit(LCD_EN);
 250:	97 98       	cbi	0x12, 7	; 18
}
 252:	08 95       	ret

00000254 <LCD_CmdWrite>:
                Some of the commonly used commands are defined in lcd.h.
                For more commands refer the data sheet and send the supported command.				
				The behaviour is undefined if unsupported commands are sent.    
 ***************************************************************************************************/
void LCD_CmdWrite( uint8_t var_lcdCmd_u8)
{
 254:	1f 93       	push	r17
 256:	18 2f       	mov	r17, r24
	lcd_BusyCheck();
 258:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_BusyCheck>
	if(STK_LCDConfig.mvar_LcdMode_U8 == M_EightBitMode)
 25c:	80 91 6a 00 	lds	r24, 0x006A
 260:	88 30       	cpi	r24, 0x08	; 8
 262:	11 f4       	brne	.+4      	; 0x268 <LCD_CmdWrite+0x14>
	{

		M_LcdDataBus = var_lcdCmd_u8;     // Send the complete command if the selected mode is 8-bit
 264:	15 bb       	out	0x15, r17	; 21
 266:	0c c0       	rjmp	.+24     	; 0x280 <LCD_CmdWrite+0x2c>
		lcd_SendCmdSignals();  // Signals for command write operation
	}
	else if(STK_LCDConfig.mvar_LcdMode_U8 == M_FourBitMode)
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	61 f4       	brne	.+24     	; 0x284 <LCD_CmdWrite+0x30>
	{
		lcd_SendNibble(var_lcdCmd_u8);  // Send the command in two nibbles as the selected mode is 4-bit
 26c:	81 2f       	mov	r24, r17
 26e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
		lcd_SendCmdSignals(); // Signals for command write operation
 272:	0e 94 22 01 	call	0x244	; 0x244 <lcd_SendCmdSignals>

		lcd_SendNibble(var_lcdCmd_u8 << 4);
 276:	81 2f       	mov	r24, r17
 278:	82 95       	swap	r24
 27a:	80 7f       	andi	r24, 0xF0	; 240
 27c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
		lcd_SendCmdSignals();
 280:	0e 94 22 01 	call	0x244	; 0x244 <lcd_SendCmdSignals>
	}
}
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <LCD_GoToNextLine>:
 ***************************************************************************************************/
void  LCD_GoToNextLine()
{
	/*Increment the current line number.
	  In case it exceeds the limit, rool it back to first line */
	VAR_LcdTrackLineNum_U8++;
 288:	80 91 67 00 	lds	r24, 0x0067
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 67 00 	sts	0x0067, r24
	VAR_LcdTrackCursorPos_U8 = 0x00;
 292:	10 92 66 00 	sts	0x0066, r1
	if(VAR_LcdTrackLineNum_U8 > STK_LCDConfig.mvar_MaxSupportedLines_U8)
 296:	90 91 68 00 	lds	r25, 0x0068
 29a:	98 17       	cp	r25, r24
 29c:	18 f4       	brcc	.+6      	; 0x2a4 <LCD_GoToNextLine+0x1c>
		VAR_LcdTrackLineNum_U8 = 0x01;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 67 00 	sts	0x0067, r24
	LCD_CmdWrite(ARR_LcdLineNumAddress_U8[VAR_LcdTrackLineNum_U8]);
 2a4:	e0 91 67 00 	lds	r30, 0x0067
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	e0 5a       	subi	r30, 0xA0	; 160
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	80 81       	ld	r24, Z
 2b0:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_CmdWrite>
}
 2b4:	08 95       	ret

000002b6 <LCD_GoToLine>:
           mENUM_LcdLineTwo,
           mENUM_LcdLineThree,
           mENUM_LcdLineFour,
 ***************************************************************************************************/
void LCD_GoToLine(uint8_t var_lineNumber_u8)
{
 2b6:	e8 2f       	mov	r30, r24
	if(var_lineNumber_u8 <= STK_LCDConfig.mvar_MaxSupportedLines_U8)
 2b8:	80 91 68 00 	lds	r24, 0x0068
 2bc:	8e 17       	cp	r24, r30
 2be:	50 f0       	brcs	.+20     	; 0x2d4 <LCD_GoToLine+0x1e>
	{
		/* If the line number is within range then
	       Move the Cursor to beginning of the specified line */
		VAR_LcdTrackCursorPos_U8 = 0x00;
 2c0:	10 92 66 00 	sts	0x0066, r1
		VAR_LcdTrackLineNum_U8 = var_lineNumber_u8;
 2c4:	e0 93 67 00 	sts	0x0067, r30
		LCD_CmdWrite(ARR_LcdLineNumAddress_U8[var_lineNumber_u8]);
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	e0 5a       	subi	r30, 0xA0	; 160
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	80 81       	ld	r24, Z
 2d0:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_CmdWrite>
 2d4:	08 95       	ret

000002d6 <LCD_Clear>:

 * description  :This function clears the LCD and moves the cursor to beginning of first line
 ***************************************************************************************************/
void LCD_Clear()
{
	LCD_CmdWrite(CMD_LCD_CLEAR);	// Clear the LCD and go to First line First Position
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_CmdWrite>
	LCD_GoToLine(mENUM_LcdLineOne);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_GoToLine>
}
 2e2:	08 95       	ret

000002e4 <LCD_Init>:

 * description  :This function is used to initialize the lcd.
                 *It initializes the LCD for selected mode(4/8-bit) and Type(16x2/16x1 etc)
**************************************************************************************************/
void LCD_Init(uint8_t var_lcdMode_u8, uint8_t var_lcdNoOfLines_u8, uint8_t var_MaxCharsPerLine_u8)
{
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	58 2f       	mov	r21, r24


	M_LcdDataBusDirection = C_PortOutput_U8;     //Configure the Data Bus as output
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	84 bb       	out	0x14, r24	; 20
	M_LcdControlBusDirection = C_PortOutput_U8;  //Configure the Control Bus as output
 2ee:	81 bb       	out	0x11, r24	; 17
	STK_LCDConfig.mvar_LcdMode_U8 = var_lcdMode_u8;      // Keep the track of selected Mode(4/8 bit)
 2f0:	50 93 6a 00 	sts	0x006A, r21
	STK_LCDConfig.mvar_MaxSupportedChars_U8 = var_MaxCharsPerLine_u8; //Keep the LCD type
 2f4:	40 93 69 00 	sts	0x0069, r20
	STK_LCDConfig.mvar_MaxSupportedLines_U8 = var_lcdNoOfLines_u8;
 2f8:	60 93 68 00 	sts	0x0068, r22
	if(var_lcdNoOfLines_u8 > mENUM_LcdLineTwo)
 2fc:	63 30       	cpi	r22, 0x03	; 3
 2fe:	40 f0       	brcs	.+16     	; 0x310 <LCD_Init+0x2c>
	{
		ARR_LcdLineNumAddress_U8[mENUM_LcdLineThree] =  0x90 + (var_MaxCharsPerLine_u8 & 0x0fu);
 300:	84 2f       	mov	r24, r20
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	80 57       	subi	r24, 0x70	; 112
 306:	80 93 63 00 	sts	0x0063, r24
		ARR_LcdLineNumAddress_U8[mENUM_LcdLineFour] =  0xd0 + (var_MaxCharsPerLine_u8 & 0x0fu);
 30a:	80 5c       	subi	r24, 0xC0	; 192
 30c:	80 93 64 00 	sts	0x0064, r24
 310:	88 ee       	ldi	r24, 0xE8	; 232
 312:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 314:	20 e9       	ldi	r18, 0x90	; 144
 316:	31 e0       	ldi	r19, 0x01	; 1
 318:	f9 01       	movw	r30, r18
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_Init+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 320:	d9 f7       	brne	.-10     	; 0x318 <LCD_Init+0x34>
	}

	DELAY_ms(100);

	if(STK_LCDConfig.mvar_LcdMode_U8 == M_EightBitMode)
 322:	58 30       	cpi	r21, 0x08	; 8
 324:	11 f4       	brne	.+4      	; 0x32a <LCD_Init+0x46>
	{
		LCD_CmdWrite(CMD_LCD_EIGHT_BIT_MODE); // Initialize the LCD for 8-bit 5x7 matrix type
 326:	88 e3       	ldi	r24, 0x38	; 56
 328:	2b c0       	rjmp	.+86     	; 0x380 <LCD_Init+0x9c>
	}
	else if(STK_LCDConfig.mvar_LcdMode_U8 == M_FourBitMode)
 32a:	54 30       	cpi	r21, 0x04	; 4
 32c:	59 f5       	brne	.+86     	; 0x384 <LCD_Init+0xa0>
                 This is used only in 4-bit mode as the LCD by default boots in 8-Bit mode.
----------------------------------------------------------------------------------*/
static void lcd_Reset()
{
	/* LCD reset sequence for 4-bit mode, refer data sheet for more info */
	lcd_SendNibble(0x30);
 32e:	80 e3       	ldi	r24, 0x30	; 48
 330:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
	lcd_SendCmdSignals();
 334:	0e 94 22 01 	call	0x244	; 0x244 <lcd_SendCmdSignals>
 338:	88 ee       	ldi	r24, 0xE8	; 232
 33a:	93 e0       	ldi	r25, 0x03	; 3
 33c:	20 e9       	ldi	r18, 0x90	; 144
 33e:	31 e0       	ldi	r19, 0x01	; 1
 340:	f9 01       	movw	r30, r18
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_Init+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 346:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 348:	d9 f7       	brne	.-10     	; 0x340 <LCD_Init+0x5c>
	DELAY_ms(100);
	lcd_SendNibble(0x30);
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
	lcd_SendCmdSignals();
 350:	0e 94 22 01 	call	0x244	; 0x244 <lcd_SendCmdSignals>
 354:	00 e2       	ldi	r16, 0x20	; 32
 356:	13 e0       	ldi	r17, 0x03	; 3
 358:	c8 01       	movw	r24, r16
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_Init+0x76>
	DELAY_us(200);
	lcd_SendNibble(0x30);
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
	lcd_SendCmdSignals();
 364:	0e 94 22 01 	call	0x244	; 0x244 <lcd_SendCmdSignals>
 368:	c8 01       	movw	r24, r16
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_Init+0x86>
	DELAY_us(200);
	lcd_SendNibble(0x20);
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
	lcd_SendCmdSignals();
 374:	0e 94 22 01 	call	0x244	; 0x244 <lcd_SendCmdSignals>
 378:	c8 01       	movw	r24, r16
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_Init+0x96>
		LCD_CmdWrite(CMD_LCD_EIGHT_BIT_MODE); // Initialize the LCD for 8-bit 5x7 matrix type
	}
	else if(STK_LCDConfig.mvar_LcdMode_U8 == M_FourBitMode)
	{
		lcd_Reset();
		LCD_CmdWrite(CMD_LCD_FOUR_BIT_MODE); // Initialize the LCD for 4-bit 5x7 matrix type 
 37e:	88 e2       	ldi	r24, 0x28	; 40
 380:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_CmdWrite>
	}

	LCD_CmdWrite(CMD_DISPLAY_ON_CURSOR_ON);	 // Display ON cursor ON
 384:	8e e0       	ldi	r24, 0x0E	; 14
 386:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_CmdWrite>
	LCD_Clear();	                         // Clear the LCD and go to First line First Position
 38a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_Clear>
}
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	08 95       	ret

00000394 <lcd_SendDataSignals>:

 * description : This functions generates the signals for sending the Data to LCD
 *************************************************************************************************/
static void lcd_SendDataSignals()
{
	M_LcdSetBit(LCD_RS); 			// Select the Data Register by pulling RS HIGH
 394:	95 9a       	sbi	0x12, 5	; 18
#ifdef LCD_RW
	M_LcdClearBit(LCD_RW);          // Select the Write Operation  by pulling RW LOW
 396:	96 98       	cbi	0x12, 6	; 18
#endif
	M_LcdSetBit(LCD_EN);            // Send a High-to-Low Pusle at Enable Pin
 398:	97 9a       	sbi	0x12, 7	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 39a:	85 e3       	ldi	r24, 0x35	; 53
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_SendDataSignals+0x8>
	DELAY_us(10);
	M_LcdClearBit(LCD_EN);
 3a0:	97 98       	cbi	0x12, 7	; 18
}
 3a2:	08 95       	ret

000003a4 <LCD_DisplayChar>:
 * description  : This function sends a character to be displayed on LCD.
                  Any valid ascii value can be passed to display respective character

 ***************************************************************************************************/
void LCD_DisplayChar(char var_lcdData_u8)
{
 3a4:	1f 93       	push	r17
 3a6:	18 2f       	mov	r17, r24
	if((VAR_LcdTrackCursorPos_U8>=STK_LCDConfig.mvar_MaxSupportedChars_U8) || (var_lcdData_u8=='\n'))
 3a8:	90 91 66 00 	lds	r25, 0x0066
 3ac:	80 91 69 00 	lds	r24, 0x0069
 3b0:	98 17       	cp	r25, r24
 3b2:	10 f4       	brcc	.+4      	; 0x3b8 <LCD_DisplayChar+0x14>
 3b4:	1a 30       	cpi	r17, 0x0A	; 10
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <LCD_DisplayChar+0x1c>
	{
		/* If the cursor has reached to end of line on page1
		OR NewLine command is issued Then Move the cursor to next line */
		LCD_GoToNextLine();
 3b8:	0e 94 44 01 	call	0x288	; 0x288 <LCD_GoToNextLine>
	}
	if(var_lcdData_u8!='\n') /* Display the character if its not newLine Char */
 3bc:	1a 30       	cpi	r17, 0x0A	; 10
 3be:	d9 f0       	breq	.+54     	; 0x3f6 <LCD_DisplayChar+0x52>

 * description : This functions is used to send a byte of data to LCD.                 .    
 *************************************************************************************************/
static void lcd_DataWrite( uint8_t dat)
{
	lcd_BusyCheck();
 3c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_BusyCheck>
	if(STK_LCDConfig.mvar_LcdMode_U8 == M_EightBitMode)
 3c4:	80 91 6a 00 	lds	r24, 0x006A
 3c8:	88 30       	cpi	r24, 0x08	; 8
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <LCD_DisplayChar+0x2c>
	{
		M_LcdDataBus = dat;      // Send the complete data byte if the selected mode is 8-bit
 3cc:	15 bb       	out	0x15, r17	; 21
 3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <LCD_DisplayChar+0x44>
		lcd_SendDataSignals();  // Signals for data write operation
	}
	else if(STK_LCDConfig.mvar_LcdMode_U8 == M_FourBitMode)
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	61 f4       	brne	.+24     	; 0x3ec <LCD_DisplayChar+0x48>
	{
		lcd_SendNibble(dat);    // Send the data in two nibbles as the selected mode is 4-bit
 3d4:	81 2f       	mov	r24, r17
 3d6:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
		lcd_SendDataSignals();  // Signals for data write operation
 3da:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_SendDataSignals>

		lcd_SendNibble(dat << 4);
 3de:	81 2f       	mov	r24, r17
 3e0:	82 95       	swap	r24
 3e2:	80 7f       	andi	r24, 0xF0	; 240
 3e4:	0e 94 08 01 	call	0x210	; 0x210 <lcd_SendNibble>
		lcd_SendDataSignals();
 3e8:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_SendDataSignals>
	}
	if(var_lcdData_u8!='\n') /* Display the character if its not newLine Char */
	{

		lcd_DataWrite(var_lcdData_u8); /* Display the data and keep track of cursor */
		VAR_LcdTrackCursorPos_U8++;
 3ec:	80 91 66 00 	lds	r24, 0x0066
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 66 00 	sts	0x0066, r24
	}
}
 3f6:	1f 91       	pop	r17
 3f8:	08 95       	ret

000003fa <main>:

/* Program to demonstrate the hex-Keypad interface*/
int  main()
{
  uint8_t key;
  LCD_Init(8,2,16);            /*Initialize the 2x16 LCD in 8-bit mode */
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	40 e1       	ldi	r20, 0x10	; 16
 400:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Init>
  KEYPAD_Init();               /*Configure the ROWs and COLUMNs for keypad scanning*/
 404:	0e 94 58 00 	call	0xb0	; 0xb0 <KEYPAD_Init>

	while(1)
	{
		key = KEYPAD_GetKey(); /*Get the Ascii value of the key Pressed */
 408:	0e 94 7d 00 	call	0xfa	; 0xfa <KEYPAD_GetKey>
		LCD_DisplayChar(key);  /*Display the key pressed */
 40c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_DisplayChar>
 410:	fb cf       	rjmp	.-10     	; 0x408 <main+0xe>

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
