
SevenSegment_SingleDigit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000102  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003b  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c5  00000000  00000000  00000201  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000137  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000204  00000000  00000000  000004fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012b  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000086f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  7a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DELAY_sec>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	40 e9       	ldi	r20, 0x90	; 144
  84:	51 e0       	ldi	r21, 0x01	; 1
  86:	09 c0       	rjmp	.+18     	; 0x9a <DELAY_sec+0x18>
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  88:	20 e1       	ldi	r18, 0x10	; 16
  8a:	37 e2       	ldi	r19, 0x27	; 39
  8c:	fa 01       	movw	r30, r20
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <DELAY_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d1 f7       	brne	.-12     	; 0x8c <DELAY_sec+0xa>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
  98:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	a9 f7       	brne	.-22     	; 0x88 <DELAY_sec+0x6>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
		}
  }
  9e:	08 95       	ret

000000a0 <main>:
#define SegThree 0x04
#define SegFour  0x08

/* start the main program */
void main() 
{
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	60 97       	sbiw	r28, 0x10	; 16
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
   unsigned char seg_code[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
  bc:	de 01       	movw	r26, r28
  be:	11 96       	adiw	r26, 0x01	; 1
  c0:	e0 e6       	ldi	r30, 0x60	; 96
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 e1       	ldi	r24, 0x10	; 16
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	81 50       	subi	r24, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x26>
   unsigned char cnt=0;

 /* Configure the ports as output */
  DDRB = C_PortOutput_U8;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	87 bb       	out	0x17, r24	; 23
  DDRC = C_PortOutput_U8;
  d2:	84 bb       	out	0x14, r24	; 20
  d4:	10 e0       	ldi	r17, 0x00	; 0
   while(1)
    {
	   
	    for(cnt=0x00;cnt<=0x0f;cnt++)	 // loop to display 0-F
		 {
		   	SegmentSlection = SegOne;	 // Select the segment
  d6:	01 e0       	ldi	r16, 0x01	; 1
			SegmentValue= seg_code[cnt];	 // Send the segment_code of number to be displayed
  d8:	7e 01       	movw	r14, r28
  da:	08 94       	sec
  dc:	e1 1c       	adc	r14, r1
  de:	f1 1c       	adc	r15, r1
   while(1)
    {
	   
	    for(cnt=0x00;cnt<=0x0f;cnt++)	 // loop to display 0-F
		 {
		   	SegmentSlection = SegOne;	 // Select the segment
  e0:	05 bb       	out	0x15, r16	; 21
			SegmentValue= seg_code[cnt];	 // Send the segment_code of number to be displayed
  e2:	f7 01       	movw	r30, r14
  e4:	e1 0f       	add	r30, r17
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	88 bb       	out	0x18, r24	; 24
			DELAY_sec(1);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 41 00 	call	0x82	; 0x82 <DELAY_sec>
  DDRC = C_PortOutput_U8;
 
   while(1)
    {
	   
	    for(cnt=0x00;cnt<=0x0f;cnt++)	 // loop to display 0-F
  f4:	1f 5f       	subi	r17, 0xFF	; 255
  f6:	10 31       	cpi	r17, 0x10	; 16
  f8:	98 f3       	brcs	.-26     	; 0xe0 <main+0x40>
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <main+0x40>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
