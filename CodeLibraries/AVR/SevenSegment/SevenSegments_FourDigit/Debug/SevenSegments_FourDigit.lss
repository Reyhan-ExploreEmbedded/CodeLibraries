
SevenSegments_FourDigit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001e4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004e  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000033a  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000203  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000039a  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000013d  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000070  00000000  00000000  00000d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  7a:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DELAY_sec>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	40 e9       	ldi	r20, 0x90	; 144
  84:	51 e0       	ldi	r21, 0x01	; 1
  86:	09 c0       	rjmp	.+18     	; 0x9a <DELAY_sec+0x18>
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  88:	20 e1       	ldi	r18, 0x10	; 16
  8a:	37 e2       	ldi	r19, 0x27	; 39
  8c:	fa 01       	movw	r30, r20
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <DELAY_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d1 f7       	brne	.-12     	; 0x8c <DELAY_sec+0xa>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
  98:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	a9 f7       	brne	.-22     	; 0x88 <DELAY_sec+0x6>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
		}
  }
  9e:	08 95       	ret

000000a0 <display_number>:
#define SegThree 0x04
#define SegFour  0x08	 


void display_number(unsigned int number)
{
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	60 97       	sbiw	r28, 0x10	; 16
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
  bc:	9c 01       	movw	r18, r24
    unsigned char seg_code[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71};
  be:	de 01       	movw	r26, r28
  c0:	11 96       	adiw	r26, 0x01	; 1
  c2:	e0 e6       	ldi	r30, 0x60	; 96
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 e1       	ldi	r24, 0x10	; 16
  c8:	01 90       	ld	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	e1 f7       	brne	.-8      	; 0xc8 <display_number+0x28>
   for(i=0;i<200;i++)	   
   	 { 
	   num=number;
	   
	   temp = num/1000;
	   num=num%1000;  
  d0:	c9 01       	movw	r24, r18
  d2:	68 ee       	ldi	r22, 0xE8	; 232
  d4:	73 e0       	ldi	r23, 0x03	; 3
  d6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodhi4>
  da:	48 2f       	mov	r20, r24
  dc:	19 2f       	mov	r17, r25
	   SegmentSlection=SegOne;
	   SegmentValue = seg_code[temp];
  de:	c9 01       	movw	r24, r18
  e0:	68 ee       	ldi	r22, 0xE8	; 232
  e2:	73 e0       	ldi	r23, 0x03	; 3
  e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodhi4>
  e8:	9e 01       	movw	r18, r28
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
  ee:	f9 01       	movw	r30, r18
  f0:	e6 0f       	add	r30, r22
  f2:	f1 1d       	adc	r31, r1
  f4:	e0 80       	ld	r14, Z
	   DELAY_ms(1);

	   temp = num/100;
	   num=num%100;  
  f6:	84 2f       	mov	r24, r20
  f8:	91 2f       	mov	r25, r17
  fa:	64 e6       	ldi	r22, 0x64	; 100
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodhi4>
 102:	08 2f       	mov	r16, r24
 104:	f9 2e       	mov	r15, r25
	   SegmentSlection=SegTwo;
	   SegmentValue = seg_code[temp];
 106:	84 2f       	mov	r24, r20
 108:	91 2f       	mov	r25, r17
 10a:	64 e6       	ldi	r22, 0x64	; 100
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodhi4>
 112:	f9 01       	movw	r30, r18
 114:	e6 0f       	add	r30, r22
 116:	f1 1d       	adc	r31, r1
 118:	10 81       	ld	r17, Z
	   DELAY_ms(1);

           temp = num/10;
	   SegmentSlection=SegThree;
	   SegmentValue = seg_code[temp];
 11a:	80 2f       	mov	r24, r16
 11c:	9f 2d       	mov	r25, r15
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodhi4>
 126:	f9 01       	movw	r30, r18
 128:	e6 0f       	add	r30, r22
 12a:	f1 1d       	adc	r31, r1
 12c:	e0 81       	ld	r30, Z
	   DELAY_ms(1);

	   temp = num%10;
	   SegmentSlection=SegFour; 
	   SegmentValue = seg_code[temp];
 12e:	80 2f       	mov	r24, r16
 130:	9f 2d       	mov	r25, r15
 132:	6a e0       	ldi	r22, 0x0A	; 10
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__udivmodhi4>
 13a:	28 0f       	add	r18, r24
 13c:	31 1d       	adc	r19, r1
 13e:	d9 01       	movw	r26, r18
 140:	2c 91       	ld	r18, X
 142:	60 e0       	ldi	r22, 0x00	; 0
   	 { 
	   num=number;
	   
	   temp = num/1000;
	   num=num%1000;  
	   SegmentSlection=SegOne;
 144:	a1 e0       	ldi	r26, 0x01	; 1
 146:	40 ea       	ldi	r20, 0xA0	; 160
 148:	5f e0       	ldi	r21, 0x0F	; 15
	   SegmentValue = seg_code[temp];
	   DELAY_ms(1);

	   temp = num/100;
	   num=num%100;  
	   SegmentSlection=SegTwo;
 14a:	f2 e0       	ldi	r31, 0x02	; 2
	   SegmentValue = seg_code[temp];
	   DELAY_ms(1);

           temp = num/10;
	   SegmentSlection=SegThree;
 14c:	74 e0       	ldi	r23, 0x04	; 4
	   SegmentValue = seg_code[temp];
	   DELAY_ms(1);

	   temp = num%10;
	   SegmentSlection=SegFour; 
 14e:	38 e0       	ldi	r19, 0x08	; 8
   	 { 
	   num=number;
	   
	   temp = num/1000;
	   num=num%1000;  
	   SegmentSlection=SegOne;
 150:	a5 bb       	out	0x15, r26	; 21
	   SegmentValue = seg_code[temp];
 152:	e8 ba       	out	0x18, r14	; 24
 154:	ca 01       	movw	r24, r20
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <display_number+0xb6>
	   DELAY_ms(1);

	   temp = num/100;
	   num=num%100;  
	   SegmentSlection=SegTwo;
 15a:	f5 bb       	out	0x15, r31	; 21
	   SegmentValue = seg_code[temp];
 15c:	18 bb       	out	0x18, r17	; 24
 15e:	ca 01       	movw	r24, r20
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <display_number+0xc0>
	   DELAY_ms(1);

           temp = num/10;
	   SegmentSlection=SegThree;
 164:	75 bb       	out	0x15, r23	; 21
	   SegmentValue = seg_code[temp];
 166:	e8 bb       	out	0x18, r30	; 24
 168:	ca 01       	movw	r24, r20
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <display_number+0xca>
	   DELAY_ms(1);

	   temp = num%10;
	   SegmentSlection=SegFour; 
 16e:	35 bb       	out	0x15, r19	; 21
	   SegmentValue = seg_code[temp];
 170:	28 bb       	out	0x18, r18	; 24
 172:	ca 01       	movw	r24, r20
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <display_number+0xd4>
    unsigned char temp,i;
    unsigned int num;
  
 

   for(i=0;i<200;i++)	   
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	68 3c       	cpi	r22, 0xC8	; 200
 17c:	49 f7       	brne	.-46     	; 0x150 <display_number+0xb0>
	   temp = num%10;
	   SegmentSlection=SegFour; 
	   SegmentValue = seg_code[temp];
	   DELAY_ms(1);
	  }
 }
 17e:	60 96       	adiw	r28, 0x10	; 16
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	cf 91       	pop	r28
 18c:	df 91       	pop	r29
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	08 95       	ret

00000198 <main>:
/* start the main program */
void main() 
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 
   unsigned int cnt=0;
 /* Configure the ports as output */
  DDRB = C_PortOutput_U8;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	87 bb       	out	0x17, r24	; 23
  DDRC = C_PortOutput_U8;
 1a0:	84 bb       	out	0x14, r24	; 20
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
   while(1)
    {
	   
	    for(cnt=0;cnt<=9999;cnt++)	 // loop to display 0000-9999
		 {
		   display_number(cnt);  	
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 50 00 	call	0xa0	; 0xa0 <display_number>
  DDRB = C_PortOutput_U8;
  DDRC = C_PortOutput_U8;
   while(1)
    {
	   
	    for(cnt=0;cnt<=9999;cnt++)	 // loop to display 0000-9999
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	87 e2       	ldi	r24, 0x27	; 39
 1b0:	c0 31       	cpi	r28, 0x10	; 16
 1b2:	d8 07       	cpc	r29, r24
 1b4:	b0 f7       	brcc	.-20     	; 0x1a2 <main+0xa>
 1b6:	f7 cf       	rjmp	.-18     	; 0x1a6 <main+0xe>

000001b8 <__udivmodhi4>:
 1b8:	aa 1b       	sub	r26, r26
 1ba:	bb 1b       	sub	r27, r27
 1bc:	51 e1       	ldi	r21, 0x11	; 17
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <__udivmodhi4_ep>

000001c0 <__udivmodhi4_loop>:
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	a6 17       	cp	r26, r22
 1c6:	b7 07       	cpc	r27, r23
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <__udivmodhi4_ep>
 1ca:	a6 1b       	sub	r26, r22
 1cc:	b7 0b       	sbc	r27, r23

000001ce <__udivmodhi4_ep>:
 1ce:	88 1f       	adc	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	5a 95       	dec	r21
 1d4:	a9 f7       	brne	.-22     	; 0x1c0 <__udivmodhi4_loop>
 1d6:	80 95       	com	r24
 1d8:	90 95       	com	r25
 1da:	bc 01       	movw	r22, r24
 1dc:	cd 01       	movw	r24, r26
 1de:	08 95       	ret

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
