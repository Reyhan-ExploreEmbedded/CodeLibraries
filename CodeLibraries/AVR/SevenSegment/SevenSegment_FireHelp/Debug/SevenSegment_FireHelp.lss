
SevenSegment_FireHelp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000047  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000031f  00000000  00000000  00000225  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001f4  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000037a  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000141  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000060  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000ca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6d 00 	call	0xda	; 0xda <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DELAY_sec>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6c:	40 e9       	ldi	r20, 0x90	; 144
  6e:	51 e0       	ldi	r21, 0x01	; 1
  70:	09 c0       	rjmp	.+18     	; 0x84 <DELAY_sec+0x18>
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  72:	20 e1       	ldi	r18, 0x10	; 16
  74:	37 e2       	ldi	r19, 0x27	; 39
  76:	fa 01       	movw	r30, r20
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <DELAY_sec+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  80:	d1 f7       	brne	.-12     	; 0x76 <DELAY_sec+0xa>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
  82:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  84:	00 97       	sbiw	r24, 0x00	; 0
  86:	a9 f7       	brne	.-22     	; 0x72 <DELAY_sec+0x6>
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
		}
  }
  88:	08 95       	ret

0000008a <display>:
#define SegFour  0x08
#define NoSeg    0x00	 	 


void display(unsigned char seg_code[])
{						   
  8a:	1f 93       	push	r17
  8c:	fc 01       	movw	r30, r24
	unsigned char i;
								  
   for(i=0;i<200;i++)	   
   	 { 
	   SegmentSlection=SegOne;
	   SegmentValue = seg_code[0];
  8e:	a0 81       	ld	r26, Z
	   DELAY_ms(1);
   
	   SegmentSlection=SegTwo;
	   SegmentValue = seg_code[1];
  90:	71 81       	ldd	r23, Z+1	; 0x01
	   DELAY_ms(1);
 
	   SegmentSlection=SegThree;
	   SegmentValue = seg_code[2];
  92:	62 81       	ldd	r22, Z+2	; 0x02
	   DELAY_ms(1);

	   SegmentSlection=SegFour; 
	   SegmentValue = seg_code[3];
  94:	53 81       	ldd	r21, Z+3	; 0x03
  96:	40 e0       	ldi	r20, 0x00	; 0
{						   
	unsigned char i;
								  
   for(i=0;i<200;i++)	   
   	 { 
	   SegmentSlection=SegOne;
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	20 ea       	ldi	r18, 0xA0	; 160
  9c:	3f e0       	ldi	r19, 0x0F	; 15
	   SegmentValue = seg_code[0];
	   DELAY_ms(1);
   
	   SegmentSlection=SegTwo;
  9e:	b2 e0       	ldi	r27, 0x02	; 2
	   SegmentValue = seg_code[1];
	   DELAY_ms(1);
 
	   SegmentSlection=SegThree;
  a0:	f4 e0       	ldi	r31, 0x04	; 4
	   SegmentValue = seg_code[2];
	   DELAY_ms(1);

	   SegmentSlection=SegFour; 
  a2:	e8 e0       	ldi	r30, 0x08	; 8
{						   
	unsigned char i;
								  
   for(i=0;i<200;i++)	   
   	 { 
	   SegmentSlection=SegOne;
  a4:	15 bb       	out	0x15, r17	; 21
	   SegmentValue = seg_code[0];
  a6:	a8 bb       	out	0x18, r26	; 24
  a8:	c9 01       	movw	r24, r18
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <display+0x20>
	   DELAY_ms(1);
   
	   SegmentSlection=SegTwo;
  ae:	b5 bb       	out	0x15, r27	; 21
	   SegmentValue = seg_code[1];
  b0:	78 bb       	out	0x18, r23	; 24
  b2:	c9 01       	movw	r24, r18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <display+0x2a>
	   DELAY_ms(1);
 
	   SegmentSlection=SegThree;
  b8:	f5 bb       	out	0x15, r31	; 21
	   SegmentValue = seg_code[2];
  ba:	68 bb       	out	0x18, r22	; 24
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <display+0x34>
	   DELAY_ms(1);

	   SegmentSlection=SegFour; 
  c2:	e5 bb       	out	0x15, r30	; 21
	   SegmentValue = seg_code[3];
  c4:	58 bb       	out	0x18, r21	; 24
  c6:	c9 01       	movw	r24, r18
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <display+0x3e>

void display(unsigned char seg_code[])
{						   
	unsigned char i;
								  
   for(i=0;i<200;i++)	   
  cc:	4f 5f       	subi	r20, 0xFF	; 255
  ce:	48 3c       	cpi	r20, 0xC8	; 200
  d0:	49 f7       	brne	.-46     	; 0xa4 <display+0x1a>

	   SegmentSlection=SegFour; 
	   SegmentValue = seg_code[3];
	   DELAY_ms(1);
	  }
  SegmentSlection=NoSeg;
  d2:	15 ba       	out	0x15, r1	; 21
  SegmentValue = 0x00;
  d4:	18 ba       	out	0x18, r1	; 24
}
  d6:	1f 91       	pop	r17
  d8:	08 95       	ret

000000da <main>:
/* start the main program */
void main() 
{
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	28 97       	sbiw	r28, 0x08	; 8
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
    unsigned char fire_code[]={0x71,0x06,0x50,0x79},help_code[]={0x76,0x79,0x38,0x73};
  f6:	81 e7       	ldi	r24, 0x71	; 113
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	8a 83       	std	Y+2, r24	; 0x02
  fe:	80 e5       	ldi	r24, 0x50	; 80
 100:	8b 83       	std	Y+3, r24	; 0x03
 102:	99 e7       	ldi	r25, 0x79	; 121
 104:	9c 83       	std	Y+4, r25	; 0x04
 106:	86 e7       	ldi	r24, 0x76	; 118
 108:	8d 83       	std	Y+5, r24	; 0x05
 10a:	9e 83       	std	Y+6, r25	; 0x06
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	8f 83       	std	Y+7, r24	; 0x07
 110:	83 e7       	ldi	r24, 0x73	; 115
 112:	88 87       	std	Y+8, r24	; 0x08
  
/* Configure the ports as output */  
  DDRB = C_PortOutput_U8;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	87 bb       	out	0x17, r24	; 23
  DDRC = C_PortOutput_U8;
 118:	84 bb       	out	0x14, r24	; 20
 
  while(1)
    {
          display(fire_code);
 11a:	7e 01       	movw	r14, r28
 11c:	08 94       	sec
 11e:	e1 1c       	adc	r14, r1
 120:	f1 1c       	adc	r15, r1
	     DELAY_sec(1);

          display(help_code);
 122:	8e 01       	movw	r16, r28
 124:	0b 5f       	subi	r16, 0xFB	; 251
 126:	1f 4f       	sbci	r17, 0xFF	; 255
  DDRB = C_PortOutput_U8;
  DDRC = C_PortOutput_U8;
 
  while(1)
    {
          display(fire_code);
 128:	c7 01       	movw	r24, r14
 12a:	0e 94 45 00 	call	0x8a	; 0x8a <display>
	     DELAY_sec(1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 36 00 	call	0x6c	; 0x6c <DELAY_sec>

          display(help_code);
 136:	c8 01       	movw	r24, r16
 138:	0e 94 45 00 	call	0x8a	; 0x8a <display>
	    DELAY_sec(1);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 36 00 	call	0x6c	; 0x6c <DELAY_sec>
 144:	f1 cf       	rjmp	.-30     	; 0x128 <main+0x4e>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
